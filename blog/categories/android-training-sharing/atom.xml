<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android:Training:Sharing | 四方城]]></title>
  <link href="http://kesenhoo.github.com/blog/categories/android-training-sharing/atom.xml" rel="self"/>
  <link href="http://kesenhoo.github.com/"/>
  <updated>2013-12-01T15:14:32+08:00</updated>
  <id>http://kesenhoo.github.com/</id>
  <author>
    <name><![CDATA[Kesen Hoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Training[Content Sharing] - 分享简单数据(Lesson 3 - 在Actionbar上添加分享功能)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/31/android-training-content-sharing-share-simple-data-lesson-3/"/>
    <updated>2012-03-31T19:16:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/31/android-training-content-sharing-share-simple-data-lesson-3</id>
    <content type="html"><![CDATA[<p>这一课会介绍在ActionBar 中添加一个高效率且比较友好的Share功能，会使用到ActionProvider(在Android 4.0上才被引进)。它会handle出现share功能的appearance与hehavior。在ShareActionProvider的例子里面，你之需要提供一个share intent，剩下的就交给<a href="https://developer.android.com/reference/android/widget/ShareActionProvider.html">ShareActionProvider</a>来做。</p>

<p><img src="/images/articles/actionbar-shareaction.png" title="Figure 1. The ShareActionProvider in the Gallery app." alt="actionbar-shareaction.png" /></p>

<!-- more -->


<h2>Update Menu Declarations(更新菜单声明)</h2>

<p>使用ShareActionProvider的第一步，在你的menu resources对应item中定义android:actionProviderClass属性。
```xml
<menu xmlns:android="http://schemas.android.com/apk/res/android"></p>

<pre><code>&lt;item android:id="@+id/menu_item_share"
    android:showAsAction="ifRoom"  
    android:title="Share"  
    android:actionProviderClass="android.widget.ShareActionProvider" /&gt;  
...
</code></pre>

<p></menu>
```
这表明了这个item的appearance与function需要与ShareActionProvider匹配。然而，你还是需要告诉provider你想分享的内容。</p>

<h2>Set the Share Intent(设置分享的intent)</h2>

<p>为了能够实现ShareActionProvider的功能，你必须提供给它一个intent。这个share intent应该像第一课讲的那样，带有ACTION_SEND和附加数据(例如EXTRA_TEXT与 EXTRA_STREAM)的。如何使用ShareActionProvider，请看下面的例子：
```java
private ShareActionProvider mShareActionProvider;<br/>
...</p>

<p>@Override<br/>
public boolean onCreateOptionsMenu(Menu menu) {</p>

<pre><code>// Inflate menu resource file.  
getMenuInflater().inflate(R.menu.share_menu, menu);  

// Locate MenuItem with ShareActionProvider  
MenuItem item = menu.findItem(R.id.menu_item_share);  

// Fetch and store ShareActionProvider  
mShareActionProvider = (ShareActionProvider) item.getActionProvider();  

// Return true to display menu  
return true;  
</code></pre>

<p>}</p>

<p>// Call to update the share intent<br/>
private void setShareIntent(Intent shareIntent) {</p>

<pre><code>if (mShareActionProvider != null) {  
    mShareActionProvider.setShareIntent(shareIntent);  
}  
</code></pre>

<p>}<br/>
```
你也许在创建菜单的时候仅仅需要设置一次share intent就满足需求了，或者说你可能想先设置share intent，然后根据UI的变化来对intent进行更新。例如，当你在Gallery里面全图查看照片的时候，share intent会在你切换图片的时候进行改变。
想要查看更多关于ShareActionProvider的内容，请查看<a href="https://developer.android.com/guide/topics/ui/actionbar.html#ActionProvider">Action Bar</a> 。</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/sharing/shareaction.html">http://developer.android.com/training/sharing/shareaction.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.io">http://kesenhoo.github.io</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Content Sharing] - 分享简单数据(Lesson 2 - 接收从其它Apps分享过来的简单数据)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/31/android-training-content-sharing-share-simple-data-lesson-2/"/>
    <updated>2012-03-31T18:28:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/31/android-training-content-sharing-share-simple-data-lesson-2</id>
    <content type="html"><![CDATA[<p>就像你的程序能够发送数据到其他程序一样，其他程序也能够方便的接收发送过来的数据。需要考虑的是用户与你的程序如何进行交互，你想要从其他程序接收哪些数据类型。例如，一个社交网络程序会希望能够从其他程序接受文本数据，像一个有趣的网址链接。Google+的Android客户端会接受文本数据与单张或者多张图片。用这个app，用户可以简单的从Gallery程序选择一张图片来启动Google+进行发布。</p>

<!-- more -->


<h2>Update Your Manifest[更新你的manifest文件]</h2>

<p>Intent filters通知了Android系统说，一个程序会接受哪些数据。像上一课一样，你可以创建intent filters来表明程序能够接收哪些action。下面是个例子，对三个activit分别指定接受单张图片，文本与多张图片。(这里有不清楚Intent filter的，请参考<a href="http://developer.android.com/guide/topics/intents/intents-filters.html#ifs">Intents and Intent Filters</a>)
```xml
<activity android:name=".ui.MyActivity" ></p>

<pre><code>&lt;intent-filter&gt;  
    &lt;action android:name="android.intent.action.SEND" /&gt;  
    &lt;category android:name="android.intent.category.DEFAULT" /&gt;  
    &lt;data android:mimeType="image/*" /&gt;  
&lt;/intent-filter&gt;  
&lt;intent-filter&gt;  
    &lt;action android:name="android.intent.action.SEND" /&gt;  
    &lt;category android:name="android.intent.category.DEFAULT" /&gt;  
    &lt;data android:mimeType="text/plain" /&gt;  
&lt;/intent-filter&gt;  
&lt;intent-filter&gt;  
    &lt;action android:name="android.intent.action.SEND_MULTIPLE" /&gt;  
    &lt;category android:name="android.intent.category.DEFAULT" /&gt;  
    &lt;data android:mimeType="image/*" /&gt;  
&lt;/intent-filter&gt;  
</code></pre>

<p></activity><br/>
```
当另外一个程序尝试分享一些东西的时候，你的程序会被呈现在一个列表里面让用户进行选择。如果用户选择了你的程序，相应的activity就应该被调用开启，这个时候就是你如何处理获取到的数据的问题了。</p>

<h2>Handle the Incoming Content[处理接受到的数据]</h2>

<p>为了处理从Intent带过来的数据，可以通过调用getIntent()方法来获取到Intent对象。一旦你拿到这个对象，你可以对里面的数据进行判断，从而决定下一步应该做什么。请记住，如果一个activity可以被其他的程序启动，你需要在检查intent的时候考虑这种情况(是被其他程序而调用启动的)。
```java
void onCreate (Bundle savedInstanceState) {</p>

<pre><code>...  
// Get intent, action and MIME type  
Intent intent = getIntent();  
String action = intent.getAction();  
String type = intent.getType();  

if (Intent.ACTION_SEND.equals(action) &amp;&amp; type != null) {  
    if ("text/plain".equals(type)) {  
        handleSendText(intent); // Handle text being sent  
    } else if (type.startsWith("image/")) {  
        handleSendImage(intent); // Handle single image being sent  
    }  
} else if (Intent.ACTION_SEND_MULTIPLE.equals(action) &amp;&amp; type != null) {  
    if (type.startsWith("image/")) {  
        handleSendMultipleImages(intent); // Handle multiple images being sent  
    }  
} else {  
    // Handle other intents, such as being started from the home screen  
}  
...  
</code></pre>

<p>}</p>

<p>void handleSendText(Intent intent) {</p>

<pre><code>String sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);  
if (sharedText != null) {  
    // Update UI to reflect text being shared  
}  
</code></pre>

<p>}</p>

<p>void handleSendImage(Intent intent) {</p>

<pre><code>Uri imageUri = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM);  
if (imageUri != null) {  
    // Update UI to reflect image being shared  
}  
</code></pre>

<p>}</p>

<p>void handleSendMultipleImages(Intent intent) {</p>

<pre><code>ArrayList&lt;Uri&gt; imageUris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);  
if (imageUris != null) {  
    // Update UI to reflect multiple images being shared  
}  
</code></pre>

<p>}<br/>
```
请注意，因为你无法知道其他程序发送过来的数据内容是文本还是其他的数据，因此你需要避免在UI线程里面去处理那些获取到的数据。
更新UI可以像更新EditText一样简单，也可以是更加复杂一点的操作，例如过滤出感兴趣的图片。It's really specific to your application what happens next.</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/sharing/receive.html">http://developer.android.com/training/sharing/receive.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.io">http://kesenhoo.github.io</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Content Sharing] - 分享简单数据(Lesson 1 - 发送简单数据到其他Apps)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/31/android-training-content-sharing-share-simple-data-lesson-1/"/>
    <updated>2012-03-31T14:00:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/31/android-training-content-sharing-share-simple-data-lesson-1</id>
    <content type="html"><![CDATA[<p><strong>章节序言</strong></p>

<p>Android程序中很炫的一个功能是程序之间可以互相通信。为什么要重新发明一个已经存在于另外一个程序中的功能呢，而且这个功能并非自己程序的核心部分。</p>

<p>这一章节会讲述一些通常使用的方法来在不同程序之间通过使用<a href="https://developer.android.com/reference/android/content/Intent.html">Intent</a> APIs与<a href="https://developer.android.com/reference/android/view/ActionProvider.html">ActionProvider</a>对象来发送与接受content。</p>

<!-- more -->


<p>当你构建一个intent，你必须指定这个intent需要触发的actions。Android定义了一些actions，包括ACTION_SEND，这个action表明着这个intent是用来从一个activity发送数据到另外一个activity的，甚至是跨进程之间的。</p>

<p>为了发送数据到另外一个activity，你需要做的是指定数据与数据的类型，系统会识别出能够兼容接受的这些数据的activity并且把这些activity显示给用户进行选择(如果有多个选择)，或者是立即启动Activity(只有一个兼容的选择)。同样的，你可以在manifest文件的Activity描述中添加接受哪些数据类型。</p>

<p>在不同的程序之间使用intent来发送与接受数据是在社交分享内容的时候最常用的方法。Intent使得用户用最常用的程序进行快速简单的分享信息。</p>

<p><strong>注意:</strong>为ActionBar添加分享功能的最好方法是使用<a href="https://developer.android.com/reference/android/widget/ShareActionProvider.html">ShareActionProvide</a>，它能够在API level 14以上进行使用。ShareActionProvider会在第3课中进行详细介绍。</p>

<h2>Send Text Content(分享文本内容)</h2>

<p>ACTION_SEND的最直接与最常用的是从一个Activity发送文本内容到另外一个Activity。例如，Android内置的浏览器可以把当前显示页面的URL作为文本内容分享到其他程序。这是非常有用的，通过邮件或者社交网络来分享文章或者网址给好友。下面是一段Sample Code:
<code>java
Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT, "This is my text to send.");
sendIntent.setType("text/plain");
startActivity(sendIntent);
</code>
如果设备上有安装某个能够匹配ACTION_SEND与MIME类型为text/plain程序，那么Android系统会自动把他们都给筛选出来，并呈现Dialog给用户进行选择。如果你为intent调用了Intent.createChooser()，那么Android总是会显示可供选择。这样有一些好处：</p>

<ul>
<li>即使用户之前为这个intent设置了默认的action，选择界面还是会被显示。</li>
<li>如果没有匹配的程序，Android会显示系统信息。</li>
<li>你可以指定选择界面的标题。</li>
</ul>


<p>下面是更新后的代码：
<code>java
Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT, "This is my text to send.");
sendIntent.setType("text/plain");
startActivity(Intent.createChooser(sendIntent, getResources().getText(R.string.send_to));
</code>
效果图如下：</p>

<p><img src="/images/articles/share-text-screenshot.png" title="Figure 1. Screenshot of ACTION_SEND intent chooser on a handset." alt="share-text-screenshot.png" /></p>

<p>Optionally,你可以为intent设置一些标准的附加值，例如：EXTRA_EMAIL, EXTRA_CC, EXTRA_BCC, EXTRA_SUBJECT.然而，如果接收程序没有针对那些做特殊的处理，则不会有对应的反应。你也可以使用自定义的附加值，但是除非接收的程序能够识别出来，不然没有任何效果。典型的做法是，你使用被接受程序定义的附加值。</p>

<p><strong>注意：</strong>一些e-mail程序，例如Gmail,对应接收的是EXTRA_EMAIL与EXTRA_CC，他们都是String类型的，可以使用putExtra(string,string[])方法来添加到intent里面。</p>

<h2>Send Binary Content(分享二进制内容)</h2>

<p>分享二进制的数据需要结合设置特定的MIME Type，需要在EXTRA_STREAM里面放置数据的URI,下面有个分享图片的例子，这个例子也可以修改用来分享任何类型的二进制数据：
<code>java
Intent shareIntent = new Intent();  
shareIntent.setAction(Intent.ACTION_SEND);  
shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);  
shareIntent.setType("image/jpeg");  
startActivity(Intent.createChooser(shareIntent, getResources().getText(R.string.send_to)));  
</code>
<strong>请注意下面的内容：</strong></p>

<ul>
<li>你可以使用"<em>/</em>"这样的方式来制定MIME类型，但是这仅仅会match到那些能够处理一般数据类型的Activity(即一般的Activity无法详尽所有的MIME类型)</li>
<li>接收的程序需要有访问URI资源的权限。下面有一些方法来处理这个问题：

<ul>
<li>把文件写到外部存储设备上，类似SDCard，这样所有的app都可以进行读取。使用Uri.fromFile()方法来创建可以用在分享时传递到intent里面的Uri.。然而，请记住，不是所有的程序都遵循“file://”这样格式的Uri。</li>
<li>在调用 getFileStreamPath()返回一个File之后，使用带有MODE_WORLD_READABLE 模式的openFileOutput() 方法把数据写入到你自己的程序目录下。像上面一样，使用Uri.fromFile()创建一个“file://”格式的Uri用来添加到intent里面进行分享。</li>
<li>媒体文件，例如图片，视频与音频，可以使用scanFile()方法进行扫描并存储到MediaStore里面。onScanCompletted()回调函数会返回一个"content://"格式的Uri.，这样便于你进行分享的时候把这个uri放到intent里面。</li>
<li>图片可以使用 insertImage() 方法直接插入到MediaStore 系统里面。那个方法会返回一个"content://"格式的Uri.。</li>
<li>存储数据到你自己的ContentProvider里面，确保其他app可以有访问你的provider的权限。(或者使用 per-URI permissions)</li>
</ul>
</li>
</ul>


<h2>Send Multiple Pieces of Content(发送多块内容)</h2>

<p>为了同时分享多种不同类型的内容，需要使用ACTION_SEND_MULTIPLE与指定到那些数据的URIs列表。MIME类型会根据你分享的混合内容而不同。例如，如果你分享3张JPEG的图片，那么MIME类型仍然是“image/jpeg”。如果是不同图片格式的话，应该是用“image/<em>”来匹配那些可以接收任何图片类型的activity。如果你需要分享多种不同类型的数据，可以使用“</em>/*”来表示MIME。像前面描述的那样，这取决于那些接收的程序解析并处理你的数据。下面是一个例子：
```java
ArrayList<Uri> imageUris = new ArrayList<Uri>();<br/>
imageUris.add(imageUri1); // Add your image URIs here<br/>
imageUris.add(imageUri2);</p>

<p>Intent shareIntent = new Intent();<br/>
shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);<br/>
shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);<br/>
shareIntent.setType("image/*");<br/>
startActivity(Intent.createChooser(shareIntent, "Share images to.."));<br/>
```
当然，请确保指定到数据的URIs能够被接收程序所访问(添加访问权限)。</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/sharing/send.html">http://developer.android.com/training/sharing/send.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.io">http://kesenhoo.github.io</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
</feed>
