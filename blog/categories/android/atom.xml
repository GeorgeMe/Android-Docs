<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 胡凯]]></title>
  <link href="http://hukai.me/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://hukai.me/"/>
  <updated>2015-08-11T11:00:49+08:00</updated>
  <id>http://hukai.me/</id>
  <author>
    <name><![CDATA[HuKai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android性能优化典范 - 第3季]]></title>
    <link href="http://hukai.me/android-performance-patterns-season-3/"/>
    <updated>2015-08-11T23:53:00+08:00</updated>
    <id>http://hukai.me/android-performance-patterns-season-3</id>
    <content type="html"><![CDATA[<p><img src="/images/android_perf_patterns_season_3.png" alt="android_perf_patterns_season_3" /></p>

<p><a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE">Android性能优化典范</a>的课程最近更新到第三季了，这次一共12个短视频课程，包括的内容大致有：更高效的ArrayMap容器，使用Android系统提供的特殊容器来避免自动装箱，避免使用枚举类型，注意onLowMemory与onTrimMemory的回调，避免内存泄漏，高效的位置更新操作，重复layout操作的性能影响，以及使用Batching，Prefetching优化网络请求，压缩传输数据等等使用技巧。下面是对这些课程的总结摘要，认知有限，理解偏差的地方请多多交流指正！</p>

<h2>1)Fun with ArrayMaps</h2>

<p>程序内存的管理是否合理高效对应用的性能有着很大的影响，有的时候对容器的使用不当也会导致内存管理效率低下。Android为移动操作系统特意编写了一些更加高效的容器，例如SparseArray，今天要介绍的是一个新的容器，叫做<strong><a href="https://android.googlesource.com/platform/frameworks/base.git/+/master/core/java/android/util/ArrayMap.java">ArrayMap</a></strong>。</p>

<p>我们经常会使用到HashMap这个容器，它非常好用，但是却很占用内存。下图演示了HashMap的简要工作原理：</p>

<p><img src="/images/android_perf_3_arraymap_key_value.png" alt="android_perf_3_arraymap_key_value" /></p>

<p>为了解决HashMap更占内存的弊端，Android提供了内存效率更高的<strong>ArrayMap</strong>。它内部使用两个数组进行工作，其中一个数组记录key hash过后的顺序列表，另外一个数组按key的顺序记录Key-Value值，如下图所示：</p>

<!-- More -->


<p><img src="/images/android_perf_3_arraymap_two_array.png" alt="android_perf_3_arraymap_two_array" /></p>

<p>当你想获取某个value的时候，ArrayMap会计算输入key转换过后的hash值，然后对hash数组使用二分查找法寻找到对应的index，然后我们可以通过这个index在另外一个数组中直接访问到需要的键值对。如果在第二个数组键值对中的key和前面输入的查询key不一致，那么就认为是发生了碰撞冲突。为了解决这个问题，我们会以该key为中心点，分别上下展开，逐个去对比查找，直到找到匹配的值。如下图所示：</p>

<p><img src="/images/android_perf_3_arraymap_binary_search.png" alt="android_perf_3_arraymap_binary_search" /></p>

<p>随着数组中的对象越来越多，查找访问单个对象的花费也会跟着增长，这是在内存占用与访问时间之间做权衡交换。</p>

<p>既然ArrayMap中的内存占用是连续不间断的，那么它是如何处理插入与删除操作的呢？请看下图所示，演示了Array的特性：</p>

<p><img src="/images/android_perf_3_arraymap_del.png" alt="android_perf_3_arraymap_del" /></p>

<p><img src="/images/android_perf_3_arraymap_add.png" alt="android_perf_3_arraymap_add" /></p>

<p>很明显，ArrayMap的插入与删除的效率是不够高的，但是如果数组的列表只是在一百这个数量级上，则完全不用担心这些插入与删除的效率问题。HashMap与ArrayMap之间的内存占用效率对比图如下：</p>

<p><img src="/images/android_perf_3_arraymap_memory_compare.png" alt="android_perf_3_arraymap_memory_compare" /></p>

<p>与HashMap相比，ArrayMap在循环遍历的时候也更加简单高效，如下图所示：</p>

<p><img src="/images/android_perf_3_arraymap_list.png" alt="android_perf_3_arraymap_list" /></p>

<p>前面演示了很多ArrayMap的优点，但并不是所有情况下都适合使用ArrayMap，我们应该在满足下面2个条件的时候才考虑使用ArrayMap：</p>

<ul>
<li>对象个数的数量级最好是千以内</li>
<li>数据组织形式包含Map结构</li>
</ul>


<p>我们需要学会在特定情形下选择相对更加高效的实现方式。</p>

<h2>2)Beware Autoboxing</h2>

<p>有时候性能问题也可能是因为那些不起眼的小细节引起的，例如在代码中不经意的“自动装箱”。我们知道基础数据类型的大小：boolean(8 bits), int(32 bits), float(32 bits)，long(64 bits)，为了能够让这些基础数据类型在大多数Java容器中运作，会需要做一个autoboxing的操作，转换成Boolean，Integer，Float等对象，如下演示了循环操作的时候是否发生autoboxing行为的差异：</p>

<p><img src="/images/android_perf_3_autoboxing_for.png" alt="android_perf_3_autoboxing_for" /></p>

<p><img src="/images/android_perf_3_autoboxing_perf.png" alt="android_perf_3_autoboxing_perf" /></p>

<p>Autoboxing的行为还经常发生在类似HashMap这样的容器里面，对HashMap的增删改查操作都会发生了大量的autoboxing的行为。</p>

<p><img src="/images/android_perf_3_autoboxing_hashmap.png" alt="android_perf_3_autoboxing_hashmap" /></p>

<p>为了避免这些autoboxing带来的效率问题，Android特地提供了一些如下的Map容器用来替代HashMap，不仅避免了autoboxing，还减少了内存占用：</p>

<p><img src="/images/android_perf_3_autoboxing_sparse.png" alt="android_perf_3_autoboxing_sparse" /></p>

<h2>3)SparseArray Family Ties</h2>

<p>为了避免HashMap的autoboxing行为，Android系统提供了SparseBoolMap，SparseIntMap，SparseLongMap，LongSparseMap等容器。关于这些容器的基本原理请参考前面的ArrayMap的介绍，另外这些容器的使用场景也和ArrayMap一致，需要满足数量级在千以内，数据组织形式需要包含Map结构。</p>

<h2>4)The price of ENUMs</h2>

<p>在StackOverFlow等问答社区常常出现关于在Android系统里面使用枚举类型的性能讨论，关于这一点，Android官方的Training课程里面有下面这样一句话：</p>

<blockquote><p>Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.</p></blockquote>

<p><img src="/images/android_perf_3_enum.png" alt="android_perf_3_enum" /></p>

<p>关于enum的效率，请看下面的讨论。假设我们有这样一份代码，编译之后的dex大小是2556 bytes，在此基础之上，添加一些如下代码，这些代码使用普通static常量相关作为判断值：</p>

<p><img src="/images/android_perf_3_enum_static.png" alt="android_perf_3_enum_static" /></p>

<p>增加上面那段代码之后，编译成dex的大小是2680 bytes，相比起之前的2556 bytes只增加124 bytes。假如换做使用enum，情况如下：</p>

<p><img src="/images/android_perf_3_enum_enum.png" alt="android_perf_3_enum_enum" /></p>

<p>使用enum之后的dex大小是4188 bytes，相比起2556增加了1632 bytes，增长量是使用static int的13倍。不仅仅如此，使用enum，运行时还会产生额外的内存占用，如下图所示：</p>

<p><img src="/images/android_perf_3_enum_memory.png" alt="android_perf_3_enum_memory" /></p>

<p>Android官方强烈建议不要在Android程序里面使用到enum。</p>

<h2>5)Trimming and Sharing Memory</h2>

<p>Android系统的一大特色是多任务，用户可以随意在不同的app之间进行快速切换。为了确保你的应用在这种复杂的多任务环境中正常运行，我们需要了解下面的知识。</p>

<p>为了让background的应用能够迅速的切换到forground，每一个background的应用都会占用一定的内存。Android系统会根据当前的系统内存使用情况，决定回收部分background的应用内存。如果background的应用从暂停状态直接被恢复到forground，能够获得较快的恢复体验，如果background应用是从Kill的状态进行恢复，就会显得稍微有点慢。</p>

<p><img src="/images/android_perf_3_memory_bg_2_for.png" alt="android_perf_3_memory_bg_2_for" /></p>

<p>Android系统提供了一些回调来通知应用的内存使用情况，通常来说，当所有的background应用都被kill掉的时候，forground应用会收到<strong>onLowMemory()</strong>的回调。在这种情况下，需要尽快释放当前应用的非必须内存资源，从而确保系统能够稳定继续运行。Android系统还提供了onTrimMemory()的回调，当系统内存达到某些条件的时候，所有正在运行的应用都会收到这个回调，同时在这个回调里面会传递以下的参数，代表不同的内存使用情况，下图介绍了各种不同的回调参数：</p>

<p><img src="/images/android_perf_3_memory_ontrimmemory.png" alt="android_perf_3_memory_ontrimmemory" /></p>

<p>关于每个参数的更多介绍，请参考这里 <a href="http://hukai.me/android-training-managing_your_app_memory/">http://hukai.me/android-training-managing_your_app_memory/</a>，另外onTrimMemory()的回调可以发生在Application，Activity，Fragment，Service，Content Provider。</p>

<p>从Android 4.4开始，ActivityManager提供了<strong>isLowRamDevice()</strong>的API，通常指的是Heap Size低于512M或者屏幕大小&lt;=800*480的设备。</p>

<h2>6)DO NOT LEAK VIEWS</h2>

<p>内存泄漏的概念，下面一张图演示下：</p>

<p><img src="/images/android_perf_3_leak.png" alt="android_perf_3_leak" /></p>

<p>通常来说，View会保持Activity的引用，Activity同时还和其他内部对象也有可能保持引用关系。当屏幕发生旋转的时候，activity很容易发生泄漏，这样的话，里面的view也会发生泄漏。Activity以及view的泄漏是非常严重的，为了避免出现泄漏，请特别留意以下的规则：</p>

<h3>6.1)避免使用异步回调</h3>

<p>异步回调被执行的时间不确定，很有可能发生在activity已经被销毁之后，这不仅仅很容易引起crash，还很容易发生内存泄露。</p>

<p><img src="/images/android_perf_3_leak_asyncback.png" alt="android_perf_3_leak_asyncback" /></p>

<h3>6.2)避免使用Static对象</h3>

<p>因为static的生命周期过长，使用不当很可能导致leak，在Android中应该尽量避免使用static对象。</p>

<p><img src="/images/android_perf_3_leak_static.png" alt="android_perf_3_leak_static" /></p>

<h3>6.3)避免把View添加到没有清除机制的容器里面</h3>

<p>假如把view添加到<a href="http://stackoverflow.com/questions/5511279/what-is-a-weakhashmap-and-when-to-use-it">WeekHashMap</a>，如果没有执行清除操作，很可能会导致泄漏。</p>

<p><img src="/images/android_perf_3_leak_map.png" alt="android_perf_3_leak_map" /></p>

<h2>7)Location &amp; Battery Drain</h2>

<p>开启定位功能是一个相对来说比较耗电的操作，通常来说，我们会使用类似下面这样的代码来发出定位请求：</p>

<p><img src="/images/android_perf_3_location_request.png" alt="android_perf_3_location_request" /></p>

<p>上面演示中有一个方法是<strong>setInterval()</strong>指的意思是每隔多长的时间获取一次位置更新，时间相隔越短，自然花费的电量就越多，但是时间相隔太长，又无法及时获取到更新的位置信息。其中存在的一个优化点是，我们可以通过判断返回的位置信息是否相同，从而决定设置下次的更新间隔是否增加一倍，通过这种方式可以减少电量的消耗，如下图所示：</p>

<p><img src="/images/android_perf_3_location_reduce.png" alt="android_perf_3_location_reduce" /></p>

<p>在位置请求的演示代码中还有一个方法是<strong>setFastestInterval()</strong>，因为整个系统中很可能存在其他的应用也在请求位置更新，那些应用很有可能设置的更新间隔时间很短，这种情况下，我们就可以通过setFestestInterval的方法来过滤那些过于频繁的更新。</p>

<p>通过GPS定位服务相比起使用网络进行定位更加的耗电，但是也相对更加精准一些，他们的图示关系如下：</p>

<p><img src="/images/android_perf_3_location_provider.png" alt="android_perf_3_location_provider" /></p>

<p>为了提供不同精度的定位需求，同时屏蔽实现位置请求的细节，Android提供了下面4种不同精度与耗电量的参数给应用进行设置调用，应用只需要决定在适当的场景下使用对应的参数就好了，通过LocationRequest.setPriority()方法传递下面的参数就好了。</p>

<p><img src="/images/android_perf_3_location_accuracy.png" alt="android_perf_3_location_accuracy" /></p>

<h2>8)Double Layout Taxation</h2>

<p>布局中的任何一个View一旦发生一些属性变化，都可能引起很大的连锁反应。例如某个button的大小突然增加一倍，有可能会导致兄弟视图的位置变化，也有可能导致父视图的大小发生改变。当大量的layout()操作被频繁调用执行的时候，就很可能引起丢帧的现象。</p>

<p><img src="/images/android_perf_3_layout_double.png" alt="android_perf_3_layout_double" /></p>

<p>例如，在RelativeLayout中，我们通常会定义一些类似alignTop，alignBelow等等属性，如图所示：</p>

<p><img src="/images/android_perf_3_layout_relative.png" alt="android_perf_3_layout_relative" /></p>

<p>为了获得视图的准确位置，需要经过下面几个阶段。首先子视图会触发计算自身位置的操作，然后RelativeLayout使用前面计算出来的位置信息做边界的调整的操作，如下面两张图所示：</p>

<p><img src="/images/android_perf_3_layout_first_cal.png" alt="android_perf_3_layout_first_cal" /></p>

<p><img src="/images/android_perf_3_layout_first_adjust.png" alt="android_perf_3_layout_first_adjust" /></p>

<p>经历过上面2个步骤，relativeLayout会立即触发第二次layout()的操作来确定所有子视图的最终位置与大小信息。</p>

<p>除了RelativeLayout会发生两次layout操作之外，LinearLayout也有可能触发两次layout操作，通常情况下LinearLayout只会发生一次layout操作，可是一旦调用了measureWithLargetChild()方法就会导致触发两次layout的操作。另外，通常来说，GridLayout会自动预处理子视图的关系来避免两次layout，可是如果GridLayout里面的某些子视图使用了weight等复杂的属性，还是会导致重复的layout操作。</p>

<p>如果只是少量的重复layout本身并不会引起严重的性能问题，但是如果它们发生在布局的根节点，或者是ListView里面的某个ListItem，这样就会引起比较严重的性能问题。如下图所示：</p>

<p><img src="/images/android_perf_3_layout_hierachy.png" alt="android_perf_3_layout_hierachy" /></p>

<p>我们可以使用Systrace来跟踪特定的某段操作，如果发现了疑似丢帧的现象，可能就是因为重复layout引起的。通常我们无法避免重复layout，在这种情况下，我们应该尽量保持View Hierarchy的层级比较浅，这样即使发生重复layout，也不会因为布局的层级比较深而增大了重复layout的倍数。另外还有一点需要特别注意，在任何时候都请避免调用<strong>requestLayout()</strong>的方法，因为一旦调用了requestLayout，会导致该layout的所有父节点都发生重新layout的操作。</p>

<p><img src="/images/android_perf_3_layout_request.png" alt="android_perf_3_layout_request" /></p>

<h2>9)Network Performance 101</h2>

<p>在性能优化第一季与第二季的课程里面都介绍过，网络请求的操作是非常耗电的，其中在移动蜂窝网络情况下执行网络数据的请求则尤其比较耗电。关于如何减少移动网络下的网络请求的耗电量，有两个重要的原则需要遵守：第一个是减少移动网络被激活的时间与次数，第二个是压缩传输数据。</p>

<h3>9.1)减少移动网络被激活的时间与次数</h3>

<p>通常来说，发生网络行为可以划分为如下图所示的三种类型，一个是用户主动触发的请求，另外被动接收服务器的返回数据，最后一个是数据上报，行为上报，位置更新等等自定义的后台操作。</p>

<p><img src="/images/android_perf_3_network_three_type.png" alt="android_perf_3_network_three_type" /></p>

<p>我们绝对坚决肯定不应该使用Polling(轮询)的方式去执行网络请求，这样不仅仅会造成严重的电量消耗，还会浪费许多网络流量，例如：</p>

<p><img src="/images/android_perf_3_network_polling.png" alt="android_perf_3_network_polling" /></p>

<p>Android官方推荐使用<a href="https://developers.google.com/cloud-messaging/">Google Cloud Messaging</a>(在大陆，然并卵)，这个框架会帮助把更新的数据推送给手机客户端，效率极高！我们应该遵循下面的规则来处理数据同步的问题：</p>

<p>首先，我们应该使用回退机制来避免固定频繁的同步请求，例如，在发现返回数据相同的情况下，推迟下次的请求时间，如下图所示：</p>

<p><img src="/images/android_perf_3_network_backoff.png" alt="android_perf_3_network_backoff" /></p>

<p>其次，我们还可以使用<strong>Batching</strong>(批处理)的方式来集中发出请求，避免频繁的间隔请求，如下图所示：</p>

<p><img src="/images/android_perf_3_network_batching.png" alt="android_perf_3_network_batching" /></p>

<p>最后，我们还可以使用<strong>Prefetching</strong>(预取)的技术提前把一些数据拿到，避免后面频繁再次发起网络请求，如下图所示：</p>

<p><img src="/images/android_perf_3_network_prefetching.png" alt="android_perf_3_network_prefetching" /></p>

<p>Google Play Service中提供了一个叫做<a href="https://developers.google.com/cloud-messaging/network-manager">GCMNetworkManager</a>的类来帮助我们实现上面的那些功能，我们只需要调用对应的API，设置一些简单的参数，其余的工作就都交给Google来帮我们实现了。</p>

<p><img src="/images/android_perf_3_network_gcm_network_manager.png" alt="android_perf_3_network_gcm_network_manager" /></p>

<h3>9.2)压缩传输数据</h3>

<p>关于压缩传输数据，我们可以学习以下的一些课程(真的够喝好几壶了)：</p>

<ul>
<li><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H">CompressorHead</a>：这系列的课程会介绍压缩的基本概念以及一些常见的压缩算法知识。</li>
<li><a href="http://www.html5rocks.com/en/tutorials/speed/img-compression/">Image Compression</a>：介绍关于图片的压缩知识。</li>
<li><a href="http://www.gdcvault.com/play/1020682/Texture-Wranglin-Getting-your-Android">Texture Wranglin</a>：介绍了游戏开发相关的知识。</li>
<li><a href="https://www.youtube.com/watch?v=P7riQin9Bfo&amp;feature=iv&amp;src_vid=l5mE3Tpjejs&amp;annotation_id=annotation_3146342489">Grabby</a>：介绍了游戏开发相关的知识。</li>
<li><a href="https://www.youtube.com/watch?v=whGwm0Lky2s&amp;feature=iv&amp;src_vid=l5mE3Tpjejs&amp;annotation_id=annotation_1270272007">Gzip is not enough</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/speed/txt-compression/">Text Compression</a></li>
<li><a href="https://www.youtube.com/watch?v=iQTxMkSJ1dQ&amp;feature=iv&amp;src_vid=l5mE3Tpjejs&amp;annotation_id=annotation_632816183">FlatBuffers</a></li>
</ul>


<h2>10)Effective Network Batching</h2>

<p>在性能优化课程的第一季与第二季里面，我们都有提到过下面这样一个网络请求与电量消耗的示意图：</p>

<p><img src="/images/android_perf_3_batching_networking.png" alt="android_perf_3_batching_networking" /></p>

<p>发起网络请求与接收返回数据都是比较耗电的，在网络硬件模块被激活之后，会继续保持几十秒的电量消耗，直到没有新的网络操作行为之后，才会进入休眠状态。前面一个段落介绍了使用Batching的技术来捆绑网络请求，从而达到减少网络请求的频率。那么如何实现Batching技术呢？通常来说，我们可以会把那些发出的网络请求，先暂存到一个PendingQueue里面，等到条件合适的时候再触发Queue里面的网络请求。</p>

<p><img src="/images/android_perf_3_batching_queue.png" alt="android_perf_3_batching_queue" /></p>

<p>可是什么时候才算是条件合适了呢？最简单粗暴的，例如我们可以在Queue大小到10的时候触发任务，也可以是当手机开始充电，或者是手机连接到WiFi等情况下才触发队列中的任务。手动编写代码去实现这些功能会比较复杂繁琐，Google为了解决这个问题，为我们提供了GCMNetworkManager来帮助实现那些功能，仅仅只需要调用API，设置触发条件，然后就OK了。</p>

<h2>11)Optimizing Network Request Frequencies</h2>

<p>前面的段落已经提到了应该减少网络请求的频率，这是为了减少电量的消耗。我们可以使用Batching，Prefetching的技术来避免频繁的网络请求。Google提供了GCMNetworkManager来帮助开发者实现那些功能，通过提供的API，我们可以选择在接入WiFi，开始充电，等待移动网络被激活等条件下再次激活网络请求。</p>

<h2>12)Effective Prefetching</h2>

<p>假设我们有这样的一个场景，最开始网络请求了一张图片，隔了10秒需要请求另外一张图片，再隔6秒会请求第三张图片，如下图所示：</p>

<p><img src="/images/android_perf_3_prefetching.png" alt="android_perf_3_prefetching" /></p>

<p>类似上面的情况会频繁触发网络请求，但是如果我们能够预先请求后续可能会使用到网络资源，避免频繁的触发网络请求，这样就能够显著的减少电量的消耗。可是预先获取多少数据量是很值得考量的，因为如果预取数据量偏少，就起不到减少频繁请求的作用，可是如果预取数据过多，就会造成资源的浪费。</p>

<p><img src="/images/android_perf_3_prefetching_over.png" alt="android_perf_3_prefetching_over" /></p>

<p>我们可以参考在WiFi，4G，3G等不同的网络下设计不同大小的预取数据量，也可以是按照图片数量或者操作时间来作为阀值。这需要我们需要根据特定的场景，不同的网络情况设计合适的方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android性能优化典范 - 第2季]]></title>
    <link href="http://hukai.me/android-performance-patterns-season-2/"/>
    <updated>2015-04-29T12:32:00+08:00</updated>
    <id>http://hukai.me/android-performance-patterns-season-2</id>
    <content type="html"><![CDATA[<p><img src="/images/android_perf_patterns_season_2.png" alt="android_perf_patterns_season_2" /></p>

<p>Google前几天刚发布了<a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE">Android性能优化典范第2季</a>的课程，一共20个短视频，包括的内容大致有：电量优化，网络优化，Wear上如何做优化，使用对象池来提高效率，LRU Cache，Bitmap的缩放，缓存，重用，PNG压缩，自定义View的性能，提升设置alpha之后View的渲染性能，以及Lint，StictMode等等工具的使用技巧。
下面是对这些课程的总结摘要，认知有限，理解偏差的地方请多多指教！</p>

<h2>1)Battery Drain and Networking</h2>

<p>对于手机程序，网络操作相对来说是比较耗电的行为。优化网络操作能够显著节约电量的消耗。在性能优化第1季里面有提到过，手机硬件的各个模块的耗电量是不一样的，其中移动蜂窝模块对电量消耗是比较大的，另外蜂窝模块在不同工作强度下，对电量的消耗也是有差异的。当程序想要执行某个网络请求之前，需要先唤醒设备，然后发送数据请求，之后等待返回数据，最后才慢慢进入休眠状态。这个流程如下图所示：</p>

<p><img src="/images/android_perf_2_network_request_mode.png" alt="android_perf_2_network_request_mode" /></p>

<!-- More -->


<p>在上面那个流程中，蜂窝模块的电量消耗差异如下图所示：</p>

<p><img src="/images/android_perf_2_battery_drain_mode.png" alt="android_perf_2_battery_drain_mode" /></p>

<p>从图示中可以看到，激活瞬间，发送数据的瞬间，接收数据的瞬间都有很大的电量消耗，所以，我们应该从如何传递网络数据以及何时发起网络请求这两个方面来着手优化。</p>

<h4>1.1)何时发起网络请求</h4>

<p>首先我们需要区分哪些网络请求是需要及时返回结果的，哪些是可以延迟执行的。例如，用户主动下拉刷新列表，这种行为需要立即触发网络请求，并等待数据返回。但是对于上传用户操作的数据，同步程序设置等等行为则属于可以延迟的行为。我们可以通过Battery Historian这个工具来查看关于移动蜂窝模块的电量消耗（关于这部分的细节，请点击<a href="http://hukai.me/android-performance-battery/">Android性能优化之电量篇</a>）。在Mobile Radio那一行会显示蜂窝模块的电量消耗情况，红色的部分代表模块正在工作，中间的间隔部分代表模块正在休眠状态，如果看到有一段区间，红色与间隔频繁的出现，那就说明这里有可以优化的行为。如下图所示：</p>

<p><img src="/images/android_perf_2_battery_mobile_radio.png" alt="android_perf_2_battery_mobile_radio" /></p>

<p>对于上面可以优化的部分，我们可以有针对性的把请求行为捆绑起来，延迟到某个时刻统一发起请求。如下图所示：</p>

<p><img src="/images/android_perf_2_battery_batch_delay.png" alt="android_perf_2_battery_batch_delay" /></p>

<p>经过上面的优化之后，我们再回头使用Battery Historian导出电量消耗图，可以看到唤醒状态与休眠状态是连续大块间隔的，这样的话，总体电量的消耗就会变得更少。</p>

<p><img src="/images/android_perf_2_battery_mobile_radio_2.png" alt="android_perf_2_battery_mobile_radio_2" /></p>

<p>当然，我们甚至可以把请求的任务延迟到手机网络切换到WiFi，手机处于充电状态下再执行。在前面的描述过程中，我们会遇到的一个难题是如何把网络请求延迟，并批量进行执行。还好，Android提供了<a href="http://developer.android.com/intl/zh-cn/reference/android/app/job/JobScheduler.html">JobScheduler</a>来帮助我们达成这个目标。</p>

<h4>1.2)如何传递网络数据</h4>

<p>关于这部分主要会涉及到Prefetch(预取)与Compressed(压缩)这两个技术。对于Prefetch的使用，我们需要预先判断用户在此次操作之后，后续零散的请求是否很有可能会马上被触发，可以把后面5分钟有可能会使用到的零散请求都一次集中执行完毕。对于Compressed的使用，在上传与下载数据之前，使用CPU对数据进行压缩与解压，可以很大程度上减少网络传输的时间。</p>

<p>想要知道我们的应用程序中网络请求发生的时间，每次请求的数据量等等信息，可以通过Android Studio中的<a href="http://developer.android.com/intl/zh-cn/tools/debugging/ddms.html#network">Networking Traffic Tool</a>来查看详细的数据，如下图所示：</p>

<p><img src="/images/android_perf_2_battery_network_tracking.png" alt="android_perf_2_battery_network_tracking" /></p>

<h2>2)Wear &amp; Sensors</h2>

<p>在Android Wear上会大量的使用Sensors来实现某些特殊功能，如何在尽量节约电量的前提下利用好Sensor会是我们需要特别注意的问题。下面会介绍一些在Android Wear上的最佳实践典范。</p>

<p>尽量减少刷新请求，例如我们可以在不需要某些数据的时候尽快注销监听，减小刷新频率，对Sensor的数据做批量处理等等。那么如何做到这些优化呢？</p>

<ul>
<li>首先我们需要尽量使用Android平台提供的既有运动数据，而不是自己去实现监听采集数据，因为大多数Android Watch自身记录Sensor数据的行为是有经过做电量优化的。</li>
<li>其次在Activity不需要监听某些Sensor数据的时候需要尽快释放监听注册。</li>
<li>还有我们需要尽量控制更新的频率，仅仅在需要刷新显示数据的时候才触发获取最新数据的操作。</li>
<li>另外我们可以针对Sensor的数据做批量处理，待数据累积一定次数或者某个程度的时候才更新到UI上。</li>
<li>最后当Watch与Phone连接起来的时候，可以把某些复杂操作的事情交给Phone来执行，Watch只需要等待返回的结果。</li>
</ul>


<p>更对关于Sensors的知识，可以点击<a href="https://www.youtube.com/watch?v=82M8DmFz4P8&amp;index=2&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE">这里</a></p>

<h2>3)Smooth Android Wear Animation</h2>

<p>Android Material Design风格的应用采用了大量的动画来进行UI切换，优化动画的性能不仅能够提升用户体验还可以减少电量的消耗，下面会介绍一些简单易行的方法。</p>

<p>在Android里面一个相对操作比较繁重的事情是对Bitmap进行旋转，缩放，裁剪等等。例如在一个圆形的钟表图上，我们把时钟的指针抠出来当做单独的图片进行旋转会比旋转一张完整的圆形图的所形成的帧率要高56%。</p>

<p><img src="/images/android_perf_2_waer_animation.png" alt="android_perf_2_waer_animation" /></p>

<p>另外尽量减少每次重绘的元素可以极大的提升性能，假如某个钟表界面上有很多需要显示的复杂组件，我们可以把这些组件做拆分处理，例如把背景图片单独拎出来设置为一个独立的View，通过setLayerType()方法使得这个View强制用Hardware来进行渲染。至于界面上哪些元素需要做拆分，他们各自的更新频率是多少，需要有针对性的单独讨论。</p>

<p>如何使用Systrace等工具来查看某些View的渲染性能，在前面的章节里面有提到过，感兴趣的可以点击<a href="http://hukai.me/android-performance-render/">这里</a></p>

<p>对于大多数应用中的动画，我们会使用PropertyAnimation或者ViewAnimation来操作实现，Android系统会自动对这些Animation做一定的优化处理，在Android上面学习到的大多数性能优化的知识同样也适用于Android Wear。</p>

<p>想要获取更多关于Android Wear中动画效果的优化，请点击<a href="http://developer.android.com/samples/WatchFace/index.html">WatchFace</a>这个范例。</p>

<h2>4)Android Wear Data Batching</h2>

<p>在Android Training里面有关于Wear上面如何利用Wearable API与Phone进行沟通协作的课程(详情请点击<a href="http://developer.android.com/training/wearables/data-layer/index.html">这里</a>)。因为Phone的CPU与电量都比Wear要强大，另外Phone还可以直接接入网络，而Wear要接入网络则相对更加困难，所以我们在开发Wear应用的时候需要尽量做到把复杂的操作交给Phone来执行。例如我们可以让Phone来获取天气信息，然后把数据返回Wear进行显示。更进一步，在之前的性能优化课程里面我们有学习过如何使用JobScheduler来延迟批量处理任务，假设Phone收到来自Wear的其中一个任务是每隔5分钟检查一次天气情况，那么Phone使用JobScheduler执行检查天气任务之后，先判断这次返回的结果和之前是否有差异，仅仅当天气发生变化的时候，才有必要把结果通知到Wear，或者仅仅把变化的某一项数据通知给Wear，这样可以更大程度上减少Wear的电量消耗。</p>

<p>下面我们总结一下如何优化Wear的性能与电量：</p>

<ul>
<li>仅仅在真正需要刷新界面的时候才发出请求</li>
<li>尽量把计算复杂操作的任务交给Phone来处理</li>
<li>Phone仅仅在数据发生变化的时候才通知到Wear</li>
<li>把零碎的数据请求捆绑一起再进行操作</li>
</ul>


<h2>5)Object Pools</h2>

<p>在程序里面经常会遇到的一个问题是短时间内创建大量的对象，导致内存紧张，从而触发GC导致性能问题。对于这个问题，我们可以使用对象池技术来解决它。通常对象池中的对象可能是bitmaps，views，paints等等。关于对象池的操作原理，不展开述说了，请看下面的图示：</p>

<p><img src="/images/android_perf_2_object_pool.png" alt="android_perf_2_object_pool" /></p>

<p>使用对象池技术有很多好处，它可以避免内存抖动，提升性能，但是在使用的时候有一些内容是需要特别注意的。通常情况下，初始化的对象池里面都是空白的，当使用某个对象的时候先去对象池查询是否存在，如果不存在则创建这个对象然后加入对象池，但是我们也可以在程序刚启动的时候就事先为对象池填充一些即将要使用到的数据，这样可以在需要使用到这些对象的时候提供更快的首次加载速度，这种行为就叫做<strong>预分配</strong>。使用对象池也有不好的一面，程序员需要手动管理这些对象的分配与释放，所以我们需要慎重地使用这项技术，避免发生对象的内存泄漏。为了确保所有的对象能够正确被释放，我们需要保证加入对象池的对象和其他外部对象没有互相引用的关系。</p>

<h2>6)To Index or Iterate?</h2>

<p>遍历容器是编程里面一个经常遇到的场景。在Java语言中，使用Iterate是一个比较常见的方法。可是在Android开发团队中，大家却尽量避免使用Iterator来执行遍历操作。下面我们看下在Android上可能用到的三种不同的遍历方法：</p>

<p><img src="/images/android_perf_2_iterate_1.png" alt="android_perf_2_iterate_1" /></p>

<p><img src="/images/android_perf_2_iterate_for_loop.png" alt="android_perf_2_iterate_for_loop" /></p>

<p><img src="/images/android_perf_2_iterate_simple_loop.png" alt="android_perf_2_iterate_simple_loop" /></p>

<p>使用上面三种方式在同一台手机上，使用相同的数据集做测试，他们的表现性能如下所示：</p>

<p><img src="/images/android_perf_2_iterate_result.png" alt="android_perf_2_iterate_result" /></p>

<p>从上面可以看到for index的方式有更好的效率，但是因为不同平台编译器优化各有差异，我们最好还是针对实际的方法做一下简单的测量比较好，拿到数据之后，再选择效率最高的那个方式。</p>

<h2>7)The Magic of LRU Cache</h2>

<p>这小节我们要讨论的是缓存算法，在Android上面最常用的一个缓存算法是LRU(Least Recently Use)，关于LRU算法，不展开述说，用下面一张图演示下含义：</p>

<p><img src="/images/android_perf_2_lru_mode.png" alt="android_perf_2_lru_mode" /></p>

<p>LRU Cache的基础构建用法如下：</p>

<p><img src="/images/android_perf_2_lru_key_value.png" alt="android_perf_2_lru_key_value" /></p>

<p>为了给LRU Cache设置一个比较合理的缓存大小值，我们通常是用下面的方法来做界定的：</p>

<p><img src="/images/android_perf_2_lru_size.png" alt="android_perf_2_lru_size" /></p>

<p>使用LRU Cache时为了能够让Cache知道每个加入的Item的具体大小，我们需要Override下面的方法：</p>

<p><img src="/images/android_perf_2_lru_sizeof.png" alt="android_perf_2_lru_sizeof" /></p>

<p>使用LRU Cache能够显著提升应用的性能，可是也需要注意LRU Cache中被淘汰对象的回收，否者会引起严重的内存泄露。</p>

<h2>8)Using LINT for Performance Tips</h2>

<p>Lint是Android提供的一个静态扫描应用源码并找出其中的潜在问题的一个强大的工具。</p>

<p><img src="/images/android_perf_2_lint_overview.png" alt="android_perf_2_lint_overview" /></p>

<p>例如，如果我们在onDraw方法里面执行了new对象的操作，Lint就会提示我们这里有性能问题，并提出对应的建议方案。Lint已经集成到Android Studio中了，我们可以手动去触发这个工具，点击工具栏的Analysis -> Inspect Code，触发之后，Lint会开始工作，并把结果输出到底部的工具栏，我们可以逐个查看原因并根据指示做相应的优化修改。</p>

<p>Lint的功能非常强大，他能够扫描各种问题。当然我们可以通过Android Studio设置找到Lint，对Lint做一些定制化扫描的设置，可以选择忽略掉那些不想Lint去扫描的选项，我们还可以针对部分扫描内容修改它的提示优先级。</p>

<p>建议把与内存有关的选项中的严重程度标记为红色的Error，对于Layout的性能问题标记为黄色Warning。</p>

<h2>9)Hidden Cost of Transparency</h2>

<p>这小节会介绍如何减少透明区域对性能的影响。通常来说，对于不透明的View，显示它只需要渲染一次即可，可是如果这个View设置了alpha值，会至少需要渲染两次。原因是包含alpha的view需要事先知道混合View的下一层元素是什么，然后再结合上层的View进行Blend混色处理。</p>

<p>在某些情况下，一个包含alpha的View有可能会触发改View在HierarchyView上的父View都被额外重绘一次。下面我们看一个例子，下图演示的ListView中的图片与二级标题都有设置透明度。</p>

<p><img src="/images/android_perf_2_trans_listview.png" alt="android_perf_2_trans_listview" /></p>

<p>大多数情况下，屏幕上的元素都是由后向前进行渲染的。在上面的图示中，会先渲染背景图(蓝，绿，红)，然后渲染人物头像图。如果后渲染的元素有设置alpha值，那么这个元素就会和屏幕上已经渲染好的元素做blend处理。很多时候，我们会给整个View设置alpha的来达到fading的动画效果，如果我们图示中的ListView做alpha逐渐减小的处理，我们可以看到ListView上的TextView等等组件会逐渐融合到背景色上。但是在这个过程中，我们无法观察到它其实已经触发了额外的绘制任务，我们的目标是让整个View逐渐透明，可是期间ListView在不停的做Blending的操作，这样会导致不少性能问题。</p>

<p>如何渲染才能够得到我们想要的效果呢？我们可以先按照通常的方式把View上的元素按照从后到前的方式绘制出来，但是不直接显示到屏幕上，而是使用GPU预处理之后，再又GPU渲染到屏幕上，GPU可以对界面上的原始数据直接做旋转，设置透明度等等操作。使用GPU进行渲染，虽然第一次操作相比起直接绘制到屏幕上更加耗时，可是一旦原始纹理数据生成之后，接下去的操作就比较省时省力。</p>

<p><img src="/images/android_perf_2_trans_hw_layer.png" alt="android_perf_2_trans_hw_layer" /></p>

<p>如何才能够让GPU来渲染某个View呢？我们可以通过setLayerType的方法来指定View应该如何进行渲染，从SDK 16开始，我们还可以使用ViewPropertyAnimator.alpha().withLayer()来指定。如下图所示：</p>

<p><img src="/images/android_perf_2_trans_setlayertype.png" alt="android_perf_2_trans_setlayertype" /></p>

<p>另外一个例子是包含阴影区域的View，这种类型的View并不会出现我们前面提到的问题，因为他们并不存在层叠的关系。</p>

<p><img src="/images/android_perf_2_trans_overlap.png" alt="android_perf_2_trans_overlap" /></p>

<p>为了能够让渲染器知道这种情况，避免为这种View占用额外的GPU内存空间，我们可以做下面的设置。</p>

<p><img src="/images/android_perf_2_trans_override_lap.png" alt="android_perf_2_trans_override_lap" /></p>

<p>通过上面的设置以后，性能可以得到显著的提升，如下图所示：</p>

<p><img src="/images/android_perf_2_trans_overlap_compare.png" alt="android_perf_2_trans_overlap_compare" /></p>

<h2>10)Avoiding Allocations in onDraw()</h2>

<p>我们都知道应该避免在onDraw()方法里面执行导致内存分配的操作，下面讲解下为何需要这样做。</p>

<p>首先onDraw()方法是执行在UI线程的，在UI线程尽量避免做任何可能影响到性能的操作。虽然分配内存的操作并不需要花费太多系统资源，但是这并不意味着是免费无代价的。设备有一定的刷新频率，导致View的onDraw方法会被频繁的调用，如果onDraw方法效率低下，在频繁刷新累积的效应下，效率低的问题会被扩大，然后会对性能有严重的影响。</p>

<p><img src="/images/android_perf_2_ondraw_gc.png" alt="android_perf_2_ondraw_gc" /></p>

<p>如果在onDraw里面执行内存分配的操作，会容易导致内存抖动，GC频繁被触发，虽然GC后来被改进为执行在另外一个后台线程(GC操作在2.3以前是同步的，之后是并发)，可是频繁的GC的操作还是会影响到CPU，影响到电量的消耗。</p>

<p>那么简单解决频繁分配内存的方法就是把分配操作移动到onDraw()方法外面，通常情况下，我们会把onDraw()里面new Paint的操作移动到外面，如下面所示：</p>

<p><img src="/images/android_perf_2_ondraw_paint.png" alt="android_perf_2_ondraw_paint" /></p>

<h2>11)Tool: Strict Mode</h2>

<p>UI线程被阻塞超过5秒，就会出现ANR，这太糟糕了。防止程序出现ANR是很重要的事情，那么如何找出程序里面潜在的坑，预防ANR呢？很多大部分情况下执行很快的方法，但是他们有可能存在巨大的隐患，这些隐患的爆发就很容易导致ANR。</p>

<p>Android提供了一个叫做Strict Mode的工具，我们可以通过手机设置里面的开发者选项，打开Strict Mode选项，如果程序存在潜在的隐患，屏幕就会闪现红色。我们也可以通过<a href="http://developer.android.com/reference/android/os/StrictMode.html">StrictMode</a> API在代码层面做细化的跟踪，可以设置StrictMode监听那些潜在问题，出现问题时如何提醒开发者，可以对屏幕闪红色，也可以输出错误日志。下面是官方的代码示例：</p>

<p>```java
public void onCreate() {</p>

<pre><code> if (DEVELOPER_MODE) {
     StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
             .detectDiskReads()
             .detectDiskWrites()
             .detectNetwork()   // or .detectAll() for all detectable problems
             .penaltyLog()
             .build());
     StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
             .detectLeakedSqlLiteObjects()
             .detectLeakedClosableObjects()
             .penaltyLog()
             .penaltyDeath()
             .build());
 }
 super.onCreate();
</code></pre>

<p>}
```</p>

<h2>12)Custom Views and Performance</h2>

<p>Android系统有提供超过70多种标准的View，例如TextView，ImageView，Button等等。在某些时候，这些标准的View无法满足我们的需要，那么就需要我们自己来实现一个View，这节会介绍如何优化自定义View的性能。</p>

<p>通常来说，针对自定义View，我们可能犯下面三个错误：</p>

<ul>
<li><strong>Useless calls to onDraw()：</strong>我们知道调用View.invalidate()会触发View的重绘，有两个原则需要遵守，第1个是仅仅在View的内容发生改变的时候才去触发invalidate方法，第2个是尽量使用ClipRect等方法来提高绘制的性能。</li>
<li><strong>Useless pixels：</strong>减少绘制时不必要的绘制元素，对于那些不可见的元素，我们需要尽量避免重绘。</li>
<li><strong>Wasted CPU cycles：</strong>对于不在屏幕上的元素，可以使用Canvas.quickReject把他们给剔除，避免浪费CPU资源。另外尽量使用GPU来进行UI的渲染，这样能够极大的提高程序的整体表现性能。</li>
</ul>


<p>最后请时刻牢记，尽量提高View的绘制性能，这样才能保证界面的刷新帧率尽量的高。更多关于这部分的内容，可以看<a href="http://hukai.me/android-performance-patterns/">这里</a></p>

<h2>13)Batching Background Work Until Later</h2>

<p>优化性能时大多数时候讨论的都是如何减少不必要的操作，但是选择何时去执行某些操作同样也很重要。在<a href="http://hukai.me/android-performance-patterns/">第1季</a>以及上一期的<a href="http://hukai.me/android-performance-battery/">性能优化之电量篇</a>里面，我们有提到过移动蜂窝模块的电量消耗模型。为了避免我们的应用程序过多的频繁消耗电量，我们需要学习如何把后台任务打包批量，并选择一个合适的时机进行触发执行。下图是每个应用程序各自执行后台任务导致的电量消耗示意图：</p>

<p><img src="/images/android_perf_2_batching_bg_1.png" alt="android_perf_2_batching_bg_1" /></p>

<p>因为像上面那样做会导致浪费很多电量，我们需要做的是把部分应用的任务延迟处理，等到一定时机，这些任务一并进行处理。结果如下面的示意图：</p>

<p><img src="/images/android_perf_2_batching_bg_2.png" alt="android_perf_2_batching_bg_2" /></p>

<p>执行延迟任务，通常有下面三种方式：</p>

<h4>1)AlarmManager</h4>

<p>使用AlarmManager设置定时任务，可以选择精确的间隔时间，也可以选择非精确时间作为参数。除非程序有很强烈的需要使用精确的定时唤醒，否者一定要避免使用他，我们应该尽量使用非精确的方式。</p>

<h4>2)SyncAdapter</h4>

<p>我们可以使用SyncAdapter为应用添加设置账户，这样在手机设置的账户列表里面可以找到我们的应用。这种方式功能更多，但是实现起来比较复杂。我们可以从这里看到官方的培训课程：<a href="http://developer.android.com/training/sync-adapters/index.html">http://developer.android.com/training/sync-adapters/index.html</a></p>

<h4>3)JobSchedulor</h4>

<p>这是最简单高效的方法，我们可以设置任务延迟的间隔，执行条件，还可以增加重试机制。</p>

<h2>14)Smaller Pixel Formats</h2>

<p>常见的png,jpeg,webp等格式的图片在设置到UI上之前需要经过解码的过程，而解压时可以选择不同的解码率，不同的解码率对内存的占用是有很大差别的。在不影响到画质的前提下尽量减少内存的占用，这能够显著提升应用程序的性能。</p>

<p>Android的Heap空间是不会自动做兼容压缩的，意思就是如果Heap空间中的图片被收回之后，这块区域并不会和其他已经回收过的区域做重新排序合并处理，那么当一个更大的图片需要放到heap之前，很可能找不到那么大的连续空闲区域，那么就会触发GC，使得heap腾出一块足以放下这张图片的空闲区域，如果无法腾出，就会发生OOM。如下图所示：</p>

<p><img src="/images/android_perf_2_pixel_heap_free.png" alt="android_perf_2_pixel_heap_free" /></p>

<p>所以为了避免加载一张超大的图片，需要尽量减少这张图片所占用的内存大小，Android为图片提供了4种解码格式，他们分别占用的内存大小如下图所示：</p>

<p><img src="/images/android_perf_2_pixel_format.png" alt="android_perf_2_pixel_format" /></p>

<p>随着解码占用内存大小的降低，清晰度也会有损失。我们需要针对不同的应用场景做不同的处理，大图和小图可以采用不同的解码率。在Android里面可以通过下面的代码来设置解码率：</p>

<p><img src="/images/android_perf_2_pixel_decode.png" alt="android_perf_2_pixel_decode" /></p>

<h2>15)Smaller PNG Files</h2>

<p>尽量减少PNG图片的大小是Android里面很重要的一条规范。相比起JPEG，PNG能够提供更加清晰无损的图片，但是PNG格式的图片会更大，占用更多的磁盘空间。到底是使用PNG还是JPEG，需要设计师仔细衡量，对于那些使用JPEG就可以达到视觉效果的，可以考虑采用JPEG即可。我们可以通过Google搜索到很多关于PNG压缩的工具，如下图所示：</p>

<p><img src="/images/android_perf_2_png_tools.png" alt="android_perf_2_png_tools" /></p>

<p>这里要介绍一种新的图片格式：Webp，它是由Google推出的一种既保留png格式的优点，又能够减少图片大小的一种新型图片格式。关于Webp的更多细节，请点击<a href="https://developers.google.com/speed/webp/?csw=1">这里</a></p>

<h2>16)Pre-scaling Bitmaps</h2>

<p>对bitmap做缩放，这也是Android里面最遇到的问题。对bitmap做缩放的意义很明显，提示显示性能，避免分配不必要的内存。Android提供了现成的bitmap缩放的API，叫做createScaledBitmap()，使用这个方法可以获取到一张经过缩放的图片。</p>

<p><img src="/images/android_perf_2_sacle_bitmap_created.png" alt="android_perf_2_sacle_bitmap_created" /></p>

<p>上面的方法能够快速的得到一张经过缩放的图片，可是这个方法能够执行的前提是，原图片需要事先加载到内存中，如果原图片过大，很可能导致OOM。下面介绍其他几种缩放图片的方式。</p>

<p>inSampleSize能够等比的缩放显示图片，同时还避免了需要先把原图加载进内存的缺点。我们会使用类似像下面一样的方法来缩放bitmap：</p>

<p><img src="/images/android_perf_2_sacle_bitmap_code.png" alt="android_perf_2_sacle_bitmap_code" /></p>

<p><img src="/images/android_perf_2_sacle_bitmap_insamplesize.png" alt="android_perf_2_sacle_bitmap_insamplesize" /></p>

<p>另外，我们还可以使用inScaled，inDensity，inTargetDensity的属性来对解码图片做处理，源码如下图所示：</p>

<p><img src="/images/android_perf_2_sacle_bitmap_inscale.png" alt="android_perf_2_sacle_bitmap_inscale" /></p>

<p>还有一个经常使用到的技巧是inJustDecodeBounds，使用这个属性去尝试解码图片，可以事先获取到图片的大小而不至于占用什么内存。如下图所示：</p>

<p><img src="/images/android_perf_2_sacle_bitmap_injust.png" alt="android_perf_2_sacle_bitmap_injust" /></p>

<h2>17)Re-using Bitmaps</h2>

<p>我们知道bitmap会占用大量的内存空间，这节会讲解什么是inBitmap属性，如何利用这个属性来提升bitmap的循环效率。前面我们介绍过使用对象池的技术来解决对象频繁创建再回收的效率问题，使用这种方法，bitmap占用的内存空间会差不多是恒定的数值，每次新创建出来的bitmap都会需要占用一块单独的内存区域，如下图所示：</p>

<p><img src="/images/android_perf_2_inbitmap_old.png" alt="android_perf_2_inbitmap_old" /></p>

<p>为了解决上图所示的效率问题，Android在解码图片的时候引进了<strong>inBitmap</strong>属性，使用这个属性可以得到下图所示的效果：</p>

<p><img src="/images/android_perf_2_inbitmap_new.png" alt="android_perf_2_inbitmap_new" /></p>

<p>使用inBitmap属性可以告知Bitmap解码器去尝试使用已经存在的内存区域，新解码的bitmap会尝试去使用之前那张bitmap在heap中所占据的pixel data内存区域，而不是去问内存重新申请一块区域来存放bitmap。利用这种特性，即使是上千张的图片，也只会仅仅只需要占用屏幕所能够显示的图片数量的内存大小。下面是如何使用inBitmap的代码示例：</p>

<p><img src="/images/android_perf_2_inbitmap_code.png" alt="android_perf_2_inbitmap_code" /></p>

<p>使用inBitmap需要注意几个限制条件：</p>

<ul>
<li>在SDK 11 -> 18之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100-100，那么新申请的bitmap必须也为100-100才能够被重用。从SDK 19开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。</li>
<li>新申请的bitmap与旧的bitmap必须有相同的解码格式，例如大家都是8888的，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了。</li>
</ul>


<p>我们可以创建一个包含多种典型可重用bitmap的对象池，这样后续的bitmap创建都能够找到合适的“模板”去进行重用。如下图所示：</p>

<p><img src="/images/android_perf_2_inbitmap_pool.png" alt="android_perf_2_inbitmap_pool" /></p>

<p>Google介绍了一个开源的加载bitmap的库：<a href="https://github.com/bumptech/glide">Glide</a>，这里面包含了各种对bitmap的优化技巧。</p>

<h2>18)The Performance Lifecycle</h2>

<p>大多数开发者在没有发现严重性能问题之前是不会特别花精力去关注性能优化的，通常大家关注的都是功能是否实现。当性能问题真的出现的时候，请不要慌乱。我们通常采用下面三个步骤来解决性能问题。</p>

<h4>Gather：收集数据</h4>

<p>我们可以通过Android SDK里面提供的诸多工具来收集CPU，GPU，内存，电量等等性能数据，</p>

<h4>Insight：分析数据</h4>

<p>通过上面的步骤，我们获取到了大量的数据，下一步就是分析这些数据。工具帮我们生成了很多可读性强的表格，我们需要事先了解如何查看表格的数据，每一项代表的含义，这样才能够快速定位问题。如果分析数据之后还是没有找到问题，那么就只能不停的重新收集数据，再进行分析，如此循环。</p>

<h4>Action：解决问题</h4>

<p>定位到问题之后，我们需要采取行动来解决问题。解决问题之前一定要先有个计划，评估这个解决方案是否可行，是否能够及时的解决问题。</p>

<h2>19)Tools not Rules</h2>

<p>虽然前面介绍了很多调试的方法，处理技巧，规范建议等等，可是这并不意味着所有的情况都适用，我们还是需要根据当时的情景做特定灵活的处理。</p>

<h2>20)Memory Profiling 101</h2>

<p>围绕Android生态系统，不仅仅有Phone，还有Wear，TV，Auto等等。对这些不同形态的程序进行性能优化，都离不开内存调试这个步骤。这节中介绍的内容大部分和<a href="http://hukai.me/android-performance-patterns/">Android性能优化典范</a>与<a href="http://hukai.me/android-performance-memory/">Android性能优化之内存篇</a>重合，不展开了。</p>

<p>首发于CSDN：<a href="http://www.csdn.net/article/2015-04-29/2824583-android-performance-patterns-season-2">Android性能优化典范（二）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android性能优化之电量篇]]></title>
    <link href="http://hukai.me/android-performance-battery/"/>
    <updated>2015-04-12T16:49:00+08:00</updated>
    <id>http://hukai.me/android-performance-battery</id>
    <content type="html"><![CDATA[<p><img src="/images/android_performance_course_udacity.jpg" alt="android_performance_course_udacity" /></p>

<p>Google近期在Udacity上发布了<a href="https://www.udacity.com/course/ud825">Android性能优化的在线课程</a>，分别从渲染，运算与内存，电量几个方面介绍了如何去优化性能，这些课程是Google之前在Youtube上发布的<a href="http://hukai.me/android-performance-patterns/">Android性能优化典范</a>专题课程的细化与补充。</p>

<p>下面是电量篇章的学习笔记，部分内容与前面的性能优化典范有重合，欢迎大家一起学习交流！</p>

<h3>1)Understanding Battery Drain</h3>

<p>手机各个硬件模块的耗电量是不一样的，有些模块非常耗电，而有些模块则相对显得耗电量小很多。</p>

<p><img src="/images/android_perf_battery_drain.png" alt="android_perf_battery_drain" /></p>

<p>电量消耗的计算与统计是一件麻烦而且矛盾的事情，记录电量消耗本身也是一个费电量的事情。唯一可行的方案是使用第三方监测电量的设备，这样才能够获取到真实的电量消耗。</p>

<p>当设备处于待机状态时消耗的电量是极少的，以N5为例，打开飞行模式，可以待机接近1个月。可是点亮屏幕，硬件各个模块就需要开始工作，这会需要消耗很多电量。</p>

<p>使用WakeLock或者JobScheduler唤醒设备处理定时的任务之后，一定要及时让设备回到初始状态。每次唤醒蜂窝信号进行数据传递，都会消耗很多电量，它比WiFi等操作更加的耗电。</p>

<!-- More -->


<p><img src="/images/battery_drain_radio.png" alt="battery_drain_radio" /></p>

<h3>2)Battery Historian</h3>

<p><a href="https://developer.android.com/about/versions/android-5.0.html#Power">Battery Historian</a>是Android 5.0开始引入的新API。通过下面的指令，可以得到设备上的电量消耗信息：</p>

<p><code>bash
$ adb shell dumpsys batterystats &gt; xxx.txt  //得到整个设备的电量消耗信息
$ adb shell dumpsys batterystats &gt; com.package.name &gt; xxx.txt //得到指定app相关的电量消耗信息
</code></p>

<p>得到了原始的电量消耗数据之后，我们需要通过Google编写的一个<a href="https://github.com/google/battery-historian">python脚本</a>把数据信息转换成可读性更好的html文件：</p>

<p><code>bash
$ python historian.py xxx.txt &gt; xxx.html
</code></p>

<p>打开这个转换过后的html文件，可以看到类似TraceView生成的列表数据，这里的数据信息量很大，这里就不展开了。</p>

<p><img src="/images/android_perf_battery_historian.png" alt="android_perf_battery_historian" /></p>

<h3>3)Track Battery Status &amp; Battery Manager</h3>

<p>我们可以通过下面的代码来获取手机的当前充电状态：</p>

<p>```java
// It is very easy to subscribe to changes to the battery state, but you can get the current
// state by simply passing null in as your receiver.  Nifty, isn't that?
IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
Intent batteryStatus = this.registerReceiver(null, filter);
int chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);
boolean acCharge = (chargePlug == BatteryManager.BATTERY_PLUGGED_AC);
if (acCharge) {</p>

<pre><code>Log.v(LOG_TAG,“The phone is charging!”);
</code></pre>

<p>}
```</p>

<p>在上面的例子演示了如何立即获取到手机的充电状态，得到充电状态信息之后，我们可以有针对性的对部分代码做优化。比如我们可以判断只有当前手机为AC充电状态时
才去执行一些非常耗电的操作。</p>

<p>```java
/<em>*
 * This method checks for power by comparing the current battery state against all possible
 * plugged in states. In this case, a device may be considered plugged in either by USB, AC, or
 * wireless charge. (Wireless charge was introduced in API Level 17.)
 </em>/
private boolean checkForPower() {</p>

<pre><code>// It is very easy to subscribe to changes to the battery state, but you can get the current
// state by simply passing null in as your receiver.  Nifty, isn't that?
IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
Intent batteryStatus = this.registerReceiver(null, filter);

// There are currently three ways a device can be plugged in. We should check them all.
int chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);
boolean usbCharge = (chargePlug == BatteryManager.BATTERY_PLUGGED_USB);
boolean acCharge = (chargePlug == BatteryManager.BATTERY_PLUGGED_AC);
boolean wirelessCharge = false;
if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    wirelessCharge = (chargePlug == BatteryManager.BATTERY_PLUGGED_WIRELESS);
}
return (usbCharge || acCharge || wirelessCharge);
</code></pre>

<p>}
```</p>

<h3>4)Wakelock and Battery Drain</h3>

<p>高效的保留更多的电量与不断促使用户使用你的App会消耗电量，这是矛盾的选择题。不过我们可以使用一些更好的办法来平衡两者。</p>

<p>假设你的手机里面装了大量的社交类应用，即使手机处于待机状态，也会经常被这些应用唤醒用来检查同步新的数据信息。Android会不断关闭各种硬件来延长手机的待机时间，首先屏幕会逐渐变暗直至关闭，然后CPU进入睡眠，这一切操作都是为了节约宝贵的电量资源。但是即使在这种睡眠状态下，大多数应用还是会尝试进行工作，他们将不断的唤醒手机。一个最简单的唤醒手机的方法是使用PowerManager.WakeLock的API来保持CPU工作并防止屏幕变暗关闭。这使得手机可以被唤醒，执行工作，然后回到睡眠状态。知道如何获取WakeLock是简单的，可是及时释放WakeLock也是非常重要的，不恰当的使用WakeLock会导致严重错误。例如网络请求的数据返回时间不确定，导致本来只需要10s的事情一直等待了1个小时，这样会使得电量白白浪费了。这也是为何使用带超时参数的wakelock.acquice()方法是很关键的。</p>

<p>但是仅仅设置超时并不足够解决问题，例如设置多长的超时比较合适？什么时候进行重试等等？解决上面的问题，正确的方式可能是使用非精准定时器。通常情况下，我们会设定一个时间进行某个操作，但是动态修改这个时间也许会更好。例如，如果有另外一个程序需要比你设定的时间晚5分钟唤醒，最好能够等到那个时候，两个任务捆绑一起同时进行，这就是非精确定时器的核心工作原理。我们可以定制计划的任务，可是系统如果检测到一个更好的时间，它可以推迟你的任务，以节省电量消耗。</p>

<p><img src="/images/alarmmanager_inexact_wakelock.png" alt="alarmmanager_inexact_wakelock" /></p>

<p>这正是JobScheduler API所做的事情。它会根据当前的情况与任务，组合出理想的唤醒时间，例如等到正在充电或者连接到WiFi的时候，或者集中任务一起执行。我们可以通过这个API实现很多免费的调度算法。</p>

<h3>5)Network and Battery Drain</h3>

<p>下面内容来自官方Training文档中<a href="http://hukai.me/android-training-course-in-chinese/connectivity/efficient-downloads/efficient-network-access.html">高效下载</a>章节关于手机(Radio)蜂窝信号对电量消耗的介绍。</p>

<p>通常情况下，使用3G移动网络传输数据，电量的消耗有三种状态：</p>

<ul>
<li><strong>Full power</strong>: 能量最高的状态，移动网络连接被激活，允许设备以最大的传输速率进行操作。</li>
<li><strong>Low power</strong>: 一种中间状态，对电量的消耗差不多是Full power状态下的50%。</li>
<li><strong>Standby</strong>: 最低的状态，没有数据连接需要传输，电量消耗最少。</li>
</ul>


<p>下图是一个典型的3G Radio State Machine的图示(来自AT&amp;T，详情请点击<a href="http://www.research.att.com/articles/featured_stories/2011_03/201102_Energy_efficient?fbid=SYuI20FzBum">这里</a>):</p>

<p><img src="/images/mobile_radio_state_machine.png" title="Figure 1. Typical 3G wireless radio state machine." alt="mobile_radio_state_machine.png" /></p>

<p><strong>总之，为了减少电量的消耗，在蜂窝移动网络下，最好做到批量执行网络请求，尽量避免频繁的间隔网络请求。</strong></p>

<p>通过前面学习到的Battery Historian我们可以得到设备的电量消耗数据，如果数据中的移动蜂窝网络(Mobile Radio)电量消耗呈现下面的情况，间隔很小，又频繁断断续续的出现，说明电量消耗性能很不好：</p>

<p><img src="/images/android_perf_battery_bad.png" alt="android_perf_battery_bad.png" /></p>

<p>经过优化之后，如果呈现下面的图示，说明电量消耗的性能是良好的：</p>

<p><img src="/images/android_perf_battery_good.png" alt="android_perf_battery_good" /></p>

<p>另外WiFi连接下，网络传输的电量消耗要比移动网络少很多，应该尽量减少移动网络下的数据传输，多在WiFi环境下传输数据。</p>

<p><img src="/images/android_perf_battery_wifi.png" alt="android_perf_battery_wifi" /></p>

<p>那么如何才能够把任务缓存起来，做到批量化执行呢？下面就轮到Job Scheduler出场了。</p>

<h3>6)Using Job Scheduler</h3>

<p>使用<a href="https://developer.android.com/reference/android/app/job/JobScheduler.html">Job Scheduler</a>，应用需要做的事情就是判断哪些任务是不紧急的，可以交给Job Scheduler来处理，Job Scheduler集中处理收到的任务，选择合适的时间，合适的网络，再一起进行执行。</p>

<p>下面是使用Job Scheduler的一段简要示例，需要先有一个JobService：</p>

<p>```java
public class MyJobService extends JobService {</p>

<pre><code>private static final String LOG_TAG = "MyJobService";

@Override
public void onCreate() {
    super.onCreate();
    Log.i(LOG_TAG, "MyJobService created");
}

@Override
public void onDestroy() {
    super.onDestroy();
    Log.i(LOG_TAG, "MyJobService destroyed");
}

@Override
public boolean onStartJob(JobParameters params) {
    // This is where you would implement all of the logic for your job. Note that this runs
    // on the main thread, so you will want to use a separate thread for asynchronous work
    // (as we demonstrate below to establish a network connection).
    // If you use a separate thread, return true to indicate that you need a "reschedule" to
    // return to the job at some point in the future to finish processing the work. Otherwise,
    // return false when finished.
    Log.i(LOG_TAG, "Totally and completely working on job " + params.getJobId());
    // First, check the network, and then attempt to connect.
    if (isNetworkConnected()) {
        new SimpleDownloadTask() .execute(params);
        return true;
    } else {
        Log.i(LOG_TAG, "No connection on job " + params.getJobId() + "; sad face");
    }
    return false;
}

@Override
public boolean onStopJob(JobParameters params) {
    // Called if the job must be stopped before jobFinished() has been called. This may
    // happen if the requirements are no longer being met, such as the user no longer
    // connecting to WiFi, or the device no longer being idle. Use this callback to resolve
    // anything that may cause your application to misbehave from the job being halted.
    // Return true if the job should be rescheduled based on the retry criteria specified
    // when the job was created or return false to drop the job. Regardless of the value
    // returned, your job must stop executing.
    Log.i(LOG_TAG, "Whelp, something changed, so I'm calling it on job " + params.getJobId());
    return false;
}

/**
 * Determines if the device is currently online.
 */
private boolean isNetworkConnected() {
    ConnectivityManager connectivityManager =
            (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
    return (networkInfo != null &amp;&amp; networkInfo.isConnected());
}

/**
 *  Uses AsyncTask to create a task away from the main UI thread. This task creates a
 *  HTTPUrlConnection, and then downloads the contents of the webpage as an InputStream.
 *  The InputStream is then converted to a String, which is logged by the
 *  onPostExecute() method.
 */
private class SimpleDownloadTask extends AsyncTask&lt;JobParameters, Void, String&gt; {

    protected JobParameters mJobParam;

    @Override
    protected String doInBackground(JobParameters... params) {
        // cache system provided job requirements
        mJobParam = params[0];
        try {
            InputStream is = null;
            // Only display the first 50 characters of the retrieved web page content.
            int len = 50;

            URL url = new URL("https://www.google.com");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(10000); //10sec
            conn.setConnectTimeout(15000); //15sec
            conn.setRequestMethod("GET");
            //Starts the query
            conn.connect();
            int response = conn.getResponseCode();
            Log.d(LOG_TAG, "The response is: " + response);
            is = conn.getInputStream();

            // Convert the input stream to a string
            Reader reader = null;
            reader = new InputStreamReader(is, "UTF-8");
            char[] buffer = new char[len];
            reader.read(buffer);
            return new String(buffer);

        } catch (IOException e) {
            return "Unable to retrieve web page.";
        }
    }

    @Override
    protected void onPostExecute(String result) {
        jobFinished(mJobParam, false);
        Log.i(LOG_TAG, result);
    }
}
</code></pre>

<p>}
```</p>

<p>然后模拟通过点击Button触发N个任务，交给JobService来处理</p>

<p>```java
public class FreeTheWakelockActivity extends ActionBarActivity {</p>

<pre><code>public static final String LOG_TAG = "FreeTheWakelockActivity";

TextView mWakeLockMsg;
ComponentName mServiceComponent;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_wakelock);

    mWakeLockMsg = (TextView) findViewById(R.id.wakelock_txt);
    mServiceComponent = new ComponentName(this, MyJobService.class);
    Intent startServiceIntent = new Intent(this, MyJobService.class);
    startService(startServiceIntent);

    Button theButtonThatWakelocks = (Button) findViewById(R.id.wakelock_poll);
    theButtonThatWakelocks.setText(R.string.poll_server_button);

    theButtonThatWakelocks.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
                pollServer();
        }
    });
}

/**
 * This method polls the server via the JobScheduler API. By scheduling the job with this API,
 * your app can be confident it will execute, but without the need for a wake lock. Rather, the
 * API will take your network jobs and execute them in batch to best take advantage of the
 * initial network connection cost.
 *
 * The JobScheduler API works through a background service. In this sample, we have
 * a simple service in MyJobService to get you started. The job is scheduled here in
 * the activity, but the job itself is executed in MyJobService in the startJob() method. For
 * example, to poll your server, you would create the network connection, send your GET
 * request, and then process the response all in MyJobService. This allows the JobScheduler API
 * to invoke your logic without needed to restart your activity.
 *
 * For brevity in the sample, we are scheduling the same job several times in quick succession,
 * but again, try to consider similar tasks occurring over time in your application that can
 * afford to wait and may benefit from batching.
 */
public void pollServer() {
    JobScheduler scheduler = (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);
    for (int i=0; i&lt;10; i++) {
        JobInfo jobInfo = new JobInfo.Builder(i, mServiceComponent)
                .setMinimumLatency(5000) // 5 seconds
                .setOverrideDeadline(60000) // 60 seconds (for brevity in the sample)
                .setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY) // WiFi or data connections
                .build();

        mWakeLockMsg.append("Scheduling job " + i + "!\n");
        scheduler.schedule(jobInfo);
    }
}
</code></pre>

<p>}
```</p>

<p><strong>Notes:</strong>关于更多电量优化，还有一篇文章，请点击<a href="http://developer.android.com/training/efficient-downloads/index.html">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android性能优化之内存篇]]></title>
    <link href="http://hukai.me/android-performance-memory/"/>
    <updated>2015-04-12T14:51:00+08:00</updated>
    <id>http://hukai.me/android-performance-memory</id>
    <content type="html"><![CDATA[<p><img src="/images/android_performance_course_udacity.jpg" alt="" /></p>

<p>Google近期在Udacity上发布了<a href="https://www.udacity.com/course/ud825">Android性能优化的在线课程</a>，分别从渲染，运算与内存，电量几个方面介绍了如何去优化性能，这些课程是Google之前在Youtube上发布的<a href="http://hukai.me/android-performance-patterns/">Android性能优化典范</a>专题课程的细化与补充。</p>

<p>下面是内存篇章的学习笔记，部分内容与前面的性能优化典范有重合，欢迎大家一起学习交流！</p>

<h3>1)Memory, GC, and Performance</h3>

<p>众所周知，与C/C++需要通过手动编码来申请以及释放内存有所不同，Java拥有GC的机制。Android系统里面有一个<strong>Generational Heap Memory</strong>的模型，系统会根据内存中不同的内存数据类型分别执行不同的GC操作。例如，最近刚分配的对象会放在Young Generation区域，这个区域的对象通常都是会快速被创建并且很快被销毁回收的，同时这个区域的GC操作速度也是比Old Generation区域的GC操作速度更快的。</p>

<p><img src="/images/memory_mode_generation.png" alt="" /></p>

<p>除了速度差异之外，执行GC操作的时候，所有线程的任何操作都会需要暂停，等待GC操作完成之后，其他操作才能够继续运行。</p>

<!-- More -->


<p><img src="/images/gc_event_thread_stop.png" alt="" /></p>

<p>通常来说，单个的GC并不会占用太多时间，但是大量不停的GC操作则会显著占用帧间隔时间(16ms)。如果在帧间隔时间里面做了过多的GC操作，那么自然其他类似计算，渲染等操作的可用时间就变得少了。</p>

<h3>2)Memory Monitor Walkthrough</h3>

<p>Android Studio中的Memory Monitor可以很好的帮助我们查看程序的内存使用情况。</p>

<p><img src="/images/memory_monitor_overview.png" alt="" /></p>

<p><img src="/images/memory_monitor_free_allocation.png" alt="" /></p>

<p><img src="/images/memory_monitor_gc_event.png" alt="" /></p>

<h3>3)Memory Leaks</h3>

<p>内存泄漏表示的是不再用到的对象因为被错误引用而无法进行回收。</p>

<p><img src="/images/android_perf_memory_leak.png" alt="" /></p>

<p>发生内存泄漏会导致Memory Generation中的剩余可用Heap Size越来越小，这样会导致频繁触发GC，更进一步引起性能问题。</p>

<p>举例内存泄漏，下面<code>init()</code>方法来自某个自定义View：</p>

<p>```java</p>

<pre><code>private void init() {
ListenerCollector collector = new ListenerCollector();
collector.setListener(this, mListener);
</code></pre>

<p>}
```</p>

<p>上面的例子容易存在内存泄漏，如果activity因为设备翻转而重新创建，自定义的View会自动重新把新创建出来的mListener给绑定到ListenerCollector中，但是当activity被销毁的时候，mListener却无法被回收了。</p>

<h3>4)Heap Viewer Walkthrough</h3>

<p>下图演示了Android Tools里面的Heap Viewer的功能，我们可以看到当前进程中的Heap Size的情况，分别有哪些类型的数据，占比是多少。</p>

<p><img src="/images/android_perf_memory_heap_viewer.png" alt="" /></p>

<h3>5)Understanding Memory Churn</h3>

<p><strong>Memory Churn内存抖动</strong>，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用Young Generation的内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</p>

<p><img src="/images/gc_overtime.png" alt="" /></p>

<p>解决上面的问题有简洁直观方法，如果你在<strong>Memory Monitor</strong>里面查看到短时间发生了多次内存的涨跌，这意味着很有可能发生了内存抖动。</p>

<p><img src="/images/memory_monitor_gc.png" alt="" /></p>

<p>同时我们还可以通过<strong>Allocation Tracker</strong>来查看在短时间内，同一个栈中不断进出的相同对象。这是内存抖动的典型信号之一。</p>

<p>当你大致定位问题之后，接下去的问题修复也就显得相对直接简单了。例如，你需要避免在for循环里面分配对象占用内存，需要尝试把对象的创建移到循环体之外，自定义View中的onDraw方法也需要引起注意，每次屏幕发生绘制以及动画执行过程中，onDraw方法都会被调用到，避免在onDraw方法里面执行复杂的操作，避免创建对象。对于那些无法避免需要创建对象的情况，我们可以考虑对象池模型，通过对象池来解决频繁创建与销毁的问题，但是这里需要注意结束使用之后，需要手动释放对象池中的对象。</p>

<h3>6)Allocation Tracker</h3>

<p>关于Allocation Tracker工具的使用，不展开了，参考下面的链接：</p>

<ul>
<li><a href="http://developer.android.com/tools/debugging/ddms.html#alloc">http://developer.android.com/tools/debugging/ddms.html#alloc</a></li>
<li><a href="http://android-developers.blogspot.com/2009/02/track-memory-allocations.html">http://android-developers.blogspot.com/2009/02/track-memory-allocations.html</a></li>
</ul>


<h3>7)Improve Your Code To Reduce Churn</h3>

<p>下面演示一个例子，如何通过修改代码来避免内存抖动。优化之前的内存检测图：</p>

<p><img src="/images/android_perf_memory_churn_1.png" alt="" /></p>

<p>定位代码之后，修复了String拼接的问题：</p>

<p><img src="/images/android_perf_memory_churn_code.png" alt="" /></p>

<p>优化之后的内存监测图：</p>

<p><img src="/images/android_perf_memory_churn_2.png" alt="" /></p>

<h3>8)Recap</h3>

<p>上面提到了三种测量内存的工具，下面再简要概括一下他们各自的特点：</p>

<ul>
<li><strong>Memory Monitor：</strong>跟踪整个app的内存变化情况。</li>
<li><strong>Heap Viewer：</strong>查看当前内存快照，便于对比分析哪些对象有可能发生了泄漏。</li>
<li><strong>Allocation Tracker：</strong>追踪内存对象的来源。</li>
</ul>


<p><strong>Notes:</strong>关于更多内存优化，这里还有一篇文章，请点击<a href="http://hukai.me/android-training-managing_your_app_memory/">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android性能优化之运算篇]]></title>
    <link href="http://hukai.me/android-performance-compute/"/>
    <updated>2015-04-12T13:50:00+08:00</updated>
    <id>http://hukai.me/android-performance-compute</id>
    <content type="html"><![CDATA[<p><img src="/images/android_performance_course_udacity.jpg" alt="" /></p>

<p>Google近期在Udacity上发布了<a href="https://www.udacity.com/course/ud825">Android性能优化的在线课程</a>，分别从渲染，运算与内存，电量几个方面介绍了如何去优化性能，这些课程是Google之前在Youtube上发布的<a href="http://hukai.me/android-performance-patterns/">Android性能优化典范</a>专题课程的细化与补充。</p>

<p>下面是运算篇章的学习笔记，部分内容与前面的性能优化典范有重合，欢迎大家一起学习交流！</p>

<h3>1)Intro to Compute and Memory Problems</h3>

<p>Android中的Java代码会需要经过编译优化再执行的过程。代码的不同写法会影响到Java编译器的优化效率。例如for循环的不同写法就会对编译器优化这段代码产生不同的效率，当程序中包含大量这种可优化的代码的时候，运算性能就会出现问题。想要知道如何优化代码的运算性能就需要知道代码在硬件层的执行差异。</p>

<h3>2)Slow Function Performance</h3>

<p>如果你写了一段代码，它的执行效率比想象中的要差很多。我们需要知道有哪些因素有可能影响到这段代码的执行效率。例如：比较两个float数值大小的执行时间是int数值的4倍左右。这是因为CPU的运算架构导致的，如下图所示：</p>

<p><img src="/images/android_perf_compute_float_int.png" alt="" /></p>

<p>虽然现代的CPU架构得到了很大的提升，也许并不存在上面所示的那么大的差异，但是这个例子说明了代码写法上的差异会对运算性能产生很大的影响。</p>

<!-- More -->


<p>通常来说有两类运行效率差的情况：第1种是相对执行时间长的方法，我们可以很轻松的找到这些方法并做一定的优化。第2种是执行时间短，但是执行频次很高的方法，因为执行次数多，累积效应下就会对性能产生很大的影响。</p>

<p>修复这些细节效率问题，需要使用Android SDK提供的工具，进行仔细的测量，然后再进行微调修复。</p>

<h3>3)Traceview Walkthrough</h3>

<p>通过Android Studio打开里面的Android Device Monitor，切换到DDMS窗口，点击左边栏上面想要跟踪的进程，再点击上面的Start Method Tracing的按钮，如下图所示：</p>

<p><img src="/images/android_perf_compute_traceview.png" alt="" /></p>

<p>启动跟踪之后，再操控app，做一些你想要跟踪的事件，例如滑动listview，点击某些视图进入另外一个页面等等。操作完之后，回到Android Device Monitor，再次点击Method Tracing的按钮停止跟踪。此时工具会为刚才的操作生成TraceView的详细视图。</p>

<p><img src="/images/android_perf_compute_traceview_2.png" alt="" /></p>

<p>关于TraceView中详细数据如何查看，这里不展开了，有很多文章介绍过。</p>

<h3>4)Batching and Caching</h3>

<p>为了提升运算性能，这里介绍2个非常重要的技术，Batching与Caching。</p>

<p><strong>Batching</strong>是在真正执行运算操作之前对数据进行批量预处理，例如你需要有这样一个方法，它的作用是查找某个值是否存在与于一堆数据中。假设一个前提，我们会先对数据做排序，然后使用二分查找法来判断值是否存在。我们先看第一种情况，下图中存在着多次重复的排序操作。</p>

<p><img src="/images/android_perf_compute_batching_1.png" alt="" /></p>

<p>在上面的那种写法下，如果数据的量级并不大的话，应该还可以接受，可是如果数据集非常大，就会有严重的效率问题。那么我们看下改进的写法，把排序的操作打包绑定只执行一次：</p>

<p><img src="/images/android_perf_compute_batching_2.png" alt="" /></p>

<p>上面就是Batching的一种示例：把重复的操作拎出来，打包只执行一次。</p>

<p><strong>Caching</strong>的理念很容易理解，在很多方面都有体现，下面举一个for循环的例子：</p>

<p><img src="/images/android_perf_compute_caching.png" alt="" /></p>

<p>上面这2种基础技巧非常实用，积极恰当的使用能够显著提升运算性能。</p>

<h3>5)Blocking the UI Thread</h3>

<p>提升代码的运算效率是改善性能的一方面，让代码执行在哪个线程也同样很重要。我们都知道Android的Main Thread也是UI Thread，它需要承担用户的触摸事件的反馈，界面视图的渲染等操作。这就意味着，我们不能在Main Thread里面做任何非轻量级的操作，类似I/O操作会花费大量时间，这很有可能会导致界面渲染发生丢帧的现象，甚至有可能导致ANR。防止这些问题的解决办法就是把那些可能有性能问题的代码移到非UI线程进行操作。</p>

<h3>6)Container Performance</h3>

<p>另外一个我们需要注意的运算性能问题是基础算法的合理选择，例如冒泡排序与快速排序的性能差异：</p>

<p><img src="/images/android_perf_compute_container.png" alt="" /></p>

<p>避免我们重复造轮子，Java提供了很多现成的容器，例如Vector，ArrayList，LinkedList，HashMap等等，在Android里面还有新增加的SparseArray等，我们需要了解这些基础容器的性能差异以及适用场景。这样才能够选择合适的容器，达到最佳的性能。</p>

<p><img src="/images/android_perf_compute_container_2.png" alt="" /></p>

<p><strong>Notes:</strong>关于更多代码优化的小技巧，请点击<a href="http://hukai.me/android-training-performance-tips/">这里</a></p>
]]></content>
  </entry>
  
</feed>
