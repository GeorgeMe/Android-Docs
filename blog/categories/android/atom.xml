<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 胡凯]]></title>
  <link href="http://hukai.me/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://hukai.me/"/>
  <updated>2014-04-01T00:39:00+08:00</updated>
  <id>http://hukai.me/</id>
  <author>
    <name><![CDATA[Kesen Hoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 管理应用的内存]]></title>
    <link href="http://hukai.me/blog/2013/10/19/android-training-performance-managing_your_app_memory/"/>
    <updated>2013-10-19T15:18:00+08:00</updated>
    <id>http://hukai.me/blog/2013/10/19/android-training-performance-managing_your_app_memory</id>
    <content type="html"><![CDATA[<p>Random Access Memory(RAM)在任何软件开发环境中都是一个很宝贵的资源。这一点在物理内存通常很有限的移动操作系统上，显得尤为突出。尽管Android的Dalvik虚拟机扮演了常规的垃圾回收的角色，但这并不意味着你可以忽视app的内存分配与释放的时机与地点。</p>

<p>为了GC能够从你的app中及时回收内存，你需要避免Memory Leaks(这通常由引用的不能释放而导致)并且在适当的时机(下面会讲到的lifecycle callbacks)来释放引用。对于大多数apps来说，Dalvik的GC会自动把离开活动线程的对象进行回收。</p>

<p>这篇文章会解释Android如何管理app的进程与内存分配，并且你可以在开发Android应用的时候主动的减少内存的使用。关于Java的资源管理机制，请参加其它书籍或者线上材料。如果你正在寻找如何分析你的内存使用情况的文章，请参考这里<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a>。</p>

<!-- More -->


<h2>第1部分:Android是如何管理内存的</h2>

<p>Android并没有提供内存的交换区(Swap space)，但是它有使用<a href="http://en.wikipedia.org/wiki/Paging">paging</a>与<a href="http://en.wikipedia.org/wiki/Memory-mapped_files">memory-mapping(mmapping)</a>的机制来管理内存。这意味着任何你修改的内存(无论是通过分配新的对象还是访问到mmaped pages的内容)都会贮存在RAM中，而且不能被paged out。因此唯一完整释放内存的方法是释放那些你可能hold住的对象的引用，这样使得它能够被GC回收。只有一种例外是：如果系统想要在其他地方进行reuse。</p>

<h3>1)共享内存</h3>

<p>Android通过下面几个方式在不同的Process中来共享RAM:</p>

<ul>
<li>每一个app的process都是从同一个被叫做Zygote的进程中fork出来的。Zygote进程在系统启动并且载入通用的framework的代码与资源之后开始启动。为了启动一个新的程序进程，系统会fork Zygote进程生成一个新的process，然后在新的process中加载并运行app的代码。这使得大多数的RAM pages被用来分配给framework的代码与资源，并在应用的所有进程中进行共享。</li>
<li>大多数static的数据被mmapped到一个进程中。这不仅仅使得同样的数据能够在进程间进行共享，而且使得它能够在需要的时候被paged out。例如下面几种static的数据:

<ul>
<li>Dalvik code (by placing it in a pre-linked .odex file for direct mmapping</li>
<li>App resources (by designing the resource table to be a structure that can be mmapped and by aligning the zip entries of the APK)</li>
<li>Traditional project elements like native code in .so files.</li>
</ul>
</li>
<li>在许多地方，Android通过显式的分配共享内存区域(例如ashmem或者gralloc)来实现一些动态RAM区域的能够在不同进程间的共享。例如，window surfaces在app与screen compositor之间使用共享的内存，cursor buffers在content provider与client之间使用共享的内存。</li>
</ul>


<p>关于如何查看app所使用的共享内存，请查看<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></p>

<h3>2)分配与回收内存</h3>

<p>这里有下面几点关于Android如何分配与回收内存的事实：</p>

<ul>
<li>每一个进程的Dalvik heap都有一个限制的虚拟内存范围。这就是逻辑上讲的heap size，它可以随着需要进行增长，但是会有一个系统为它所定义的上限。</li>
<li>逻辑上讲的heap size和实际物理上使用的内存数量是不等的，Android会计算一个叫做Proportional Set Size(PSS)的值，它记录了那些和其他进程进行共享的内存大小。（假设共享内存大小是10M，一共有20个Process在共享使用，根据权重，可能认为其中有0.3M才能真正算是你的进程所使用的）</li>
<li>Dalvik heap与逻辑上的heap size不吻合，这意味着Android并不会去做heap中的碎片整理用来关闭空闲区域。Android仅仅会在heap的尾端出现不使用的空间时才会做收缩逻辑heap size大小的动作。但是这并不是意味着被heap所使用的物理内存大小不能被收缩。在垃圾回收之后，Dalvik会遍历heap并找出不使用的pages，然后使用madvise把那些pages返回给kernal。因此，成对的allocations与deallocations大块的数据可以使得物理内存能够被正常的回收。然而，回收碎片化的内存则会使得效率低下很多，因为那些碎片化的分配页面也许会被其他地方所共享到。</li>
</ul>


<h3>3)限制应用的内存</h3>

<p>为了维持多任务的功能环境，Android为每一个app都设置了一个硬性的heap size限制。准确的heap size限制随着不同设备的不同RAM大小而各有差异。如果你的app已经到了heap的限制大小并且再尝试分配内存的话，会引起OutOfMemoryError的错误。</p>

<p>在一些情况下，你也许想要查询当前设备的heap size限制大小是多少，然后决定cache的大小。可以通过getMemoryClass()来查询。这个方法会返回一个整数，表明你的app heap size限制是多少megabates。</p>

<h3>4)切换应用</h3>

<p>当用户在不同应用之间进行切换的时候，不是使用交换空间的办法。Android会把那些不包含foreground组件的进程放到LRU cache中。例如，当用户刚开始启动了一个应用，这个时候为它创建了一个进程，但是当用户离开这个应用，这个进程并没有离开。系统会把这个进程放到cache中，如果用户后来回到这个应用，这个进程能够被resued，从而实现app的快速切换。</p>

<p>如果你的应用有一个被缓存的进程，它被保留在内存中，并且当前不再需要它了，这会对系统的整个性能有影响。因此当系统开始进入低内存状态时，它会由系统根据LRU的规则与其他因素选择杀掉某些进程，为了保持你的进程能够尽可能长久的被cached，请参考下面的章节学习何时释放你的引用。</p>

<p>更对关于不在foreground的进程是Android是如何决定kill掉哪一类进程的问题，请参考<a href="http://developer.android.com/guide/components/processes-and-threads.html">Processes and Threads</a>.</p>

<h2>第2部分:你的应用该如何管理内存</h2>

<p>你应该在开发过程的每一个阶段都考虑到RAM的有限性，甚至包括在开发开始之前的设计阶段。有许多种设计与实现方式，他们有着不同的效率，尽管是对同样一种技术的不断组合与演变。</p>

<p>为了使得你的应用效率更高，你应该在设计与实现代码时，遵循下面的技术要点。</p>

<h3>1)珍惜Services资源</h3>

<p>如果你的app需要在后台使用service，除非它被触发执行一个任务，否则其他时候都应该是非运行状态。同样需要注意当这个service已经完成任务后停止service失败引起的泄漏。</p>

<p>当你启动一个service，系统会倾向为了这个Service而一直保留它的Process。这使得process的运行代价很高，因为系统没有办法把Service所占用的RAM让给其他组件或者被Paged out。这减少了系统能够存放到LRU缓存当中的process数量，它会影响app之间的切换效率。它甚至会导致系统内存使用不稳定，从而无法继续Hold住
所有目前正在运行的Service。</p>

<p>限制你的service的最好办法是使用<a href="http://developer.android.com/reference/android/app/IntentService.html">IntentService</a>, 它会在处理完扔给它的intent任务之后尽快结束自己。更多信息，请阅读<a href="http://developer.android.com/training/run-background-service/index.html">Running in a Background Service</a>.</p>

<p>当一个service已经不需要的时候还继续保留它，这对Android应用的内存管理来说是<strong>最糟糕的错误之一</strong>。因此千万不要贪婪的使得一个Service持续保留。不仅仅是因为它会使得你的app因RAM的限制而性能糟糕，而且用户会发现那些行为奇怪的app并且卸载它。</p>

<h3>2)当你的UI隐藏时释放内存</h3>

<p>当用户切换到其它app并且你的app UI不再可见时，你应该释放你的UI上占用的任何资源。在这个时候释放UI资源可以显著的增加系统cached process的能力，它会对用户的质量体验有着直接的影响。</p>

<p>为了能够接收到用户离开你的UI时的通知，你需要实现Activtiy类里面的<a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int">onTrimMemory()</a>)回调方法。你应该使用这个方法来监听到<a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_UI_HIDDEN">TRIM_MEMORY_UI_HIDDEN</a>级别, 它意味着你的UI已经隐藏，你应该释放那些仅仅被你的UI使用的资源。</p>

<p>请注意：你的app仅仅会在所有UI组件的被隐藏的时候接收到onTrimMemory()的回调并带有参数TRIM_MEMORY_UI_HIDDEN。这与onStop()的回调是不同的，onStop会在activity的实例隐藏时会执行，例如当用户从你的app的某个activity跳转到另外一个activity时onStop会被执行。因此你应该实现onStop回调，并且在此回调里面释放activity的资源，例如网络连接，unregister广播接收者。除非接收到<a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int">onTrimMemory(TRIM_MEMORY_UI_HIDDEN)</a>)的回调，否者你不应该释放你的UI资源。这确保了用户从其他activity切回来时，你的UI资源仍然可用，并且可以迅速恢复activity。</p>

<h3>3)当内存紧张时释放部分内存</h3>

<p>在你的app生命周期的任何阶段，onTrimMemory回调方法同样可以告诉你整个设备的内存资源已经开始紧张。你应该根据onTrimMemory方法中的内存级别来进一步决定释放哪些资源。</p>

<ul>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_RUNNING_MODERATE">TRIM_MEMORY_RUNNING_MODERATE</a>:你的app正在运行并且不会被列为可杀死的。但是设备正运行于低内存状态下，系统开始开始激活杀死LRU Cache中的Process的机制。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_RUNNING_LOW">TRIM_MEMORY_RUNNING_LOW</a>:你的app正在运行且没有被列为可杀死的。但是设备正运行于更低内存的状态下，你应该释放不用的资源用来提升系统性能，这会直接影响了你的app的性能。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_RUNNING_CRITICAL">TRIM_MEMORY_RUNNING_CRITICAL</a>:你的app仍在运行，但是系统已经把LRU Cache中的大多数进程都已经杀死，因此你应该立即释放所有非必须的资源。如果系统不能回收到足够的RAM数量，系统将会清除所有的LRU缓存中的进程，并且开始杀死那些之前被认为不应该杀死的进程，例如那个进程包含了一个运行中的Service。</li>
</ul>


<p>同样，当你的app进程正在被cached时，你可能会接受到从onTrimMemory()中返回的下面的值之一:</p>

<ul>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_BACKGROUND">TRIM_MEMORY_BACKGROUND</a>: 系统正运行于低内存状态并且你的进程正处于LRU缓存名单中<strong>最不容易杀掉的位置</strong>。尽管你的app进程并不是处于被杀掉的高危险状态，系统可能已经开始杀掉LRU缓存中的其他进程了。你应该释放那些容易恢复的资源，以便于你的进程可以保留下来，这样当用户回退到你的app的时候才能够迅速恢复。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_MODERATE">TRIM_MEMORY_MODERATE</a>: 系统正运行于低内存状态并且你的进程已经已经接近LRU名单的<strong>中部位置</strong>。如果系统开始变得更加内存紧张，你的进程是有可能被杀死的。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_COMPLETE">TRIM_MEMORY_COMPLETE</a>: 系统正运行与低内存的状态并且你的进程正处于LRU名单中<strong>最容易被杀掉的位置</strong>。你应该释放任何不影响你的app恢复状态的资源。</li>
</ul>


<p>因为onTrimMemory()的回调是在<strong>API 14</strong>才被加进来的，对于老的版本，你可以使用<a href="http://developer.android.com/reference/android/content/ComponentCallbacks.html#onLowMemory(">onLowMemory</a>)回调来进行兼容。onLowMemory相当与TRIM_MEMORY_COMPLETE。</p>

<p><strong>Note:</strong> 当系统开始清除LRU缓存中的进程时，尽管它首先按照LRU的顺序来操作，但是它同样会考虑进程的内存使用量。因此消耗越少的进程则越容易被留下来。</p>

<h3>4)检查你应该使用多少的内存</h3>

<p>正如前面提到的，每一个Android设备都会有不同的RAM总大小与可用空间，因此不同设备为app提供了不同大小的heap限制。你可以通过调用<a href="http://developer.android.com/reference/android/app/ActivityManager.html#getMemoryClass(">getMemoryClass()</a>)来获取你的app的可用heap大小。如果你的app尝试申请更多的内存，会出现OutOfMemory的错误。</p>

<p>在一些特殊的情景下，你可以通过在manifest的application标签下添加largeHeap=true的属性来声明一个更大的heap空间。如果你这样做，你可以通过<a href="http://developer.android.com/reference/android/app/ActivityManager.html#getLargeMemoryClass(">getLargeMemoryClass()</a>)来获取到一个更大的heap size。</p>

<p>然而，能够获取更大heap的设计本意是为了一小部分会消耗大量RAM的应用(例如一个大图片的编辑应用)。不要轻易的因为你需要使用大量的内存而去请求一个大的heap size。只有当你清楚的知道哪里会使用大量的内存并且为什么这些内存必须被保留时才去使用large heap. 因此请尽量少使用large heap。使用额外的内存会影响系统整体的用户体验，并且会使得GC的每次运行时间更长。在任务切换时，系统的性能会变得大打折扣。</p>

<p>另外, large heap并不一定能够获取到更大的heap。在某些有严格限制的机器上，large heap的大小和通常的heap size是一样的。因此即使你申请了large heap，你还是应该通过执行getMemoryClass()来检查实际获取到的heap大小。</p>

<h3>5)避免bitmaps的浪费</h3>

<p>当你加载一个bitmap时，仅仅需要保留适配当前屏幕设备分辨率的数据即可，如果原图高于你的设备分辨率，需要做缩小的动作。请记住，增加bitmap的尺寸会对内存呈现出2次方的增加，因为X与Y都在增加。</p>

<p><strong>Note:</strong>在Android 2.3.x (API level 10)及其以下, bitmap对象是的pixel data是存放在native内存中的，它不便于调试。然而，从Android 3.0(API level 11)开始，bitmap pixel data是分配在你的app的Dalvik heap中, 这提升了GC的工作并且更加容易Debug。因此如果你的app使用bitmap并在旧的机器上引发了一些内存问题，切换到3.0以上的机器上进行Debug。</p>

<h3>6)使用优化的数据容器</h3>

<p>利用Android Framework里面优化过的容器类，例如<a href="http://developer.android.com/reference/android/util/SparseArray.html">SparseArray</a>, SparseBooleanArray, 与 LongSparseArray. 通常的HashMap的实现方式更加消耗内存，因为它需要一个额外的实例对象来记录Mapping操作。另外，SparseArray更加高效在于他们避免了对key与value的autobox自动装箱，并且避免了装箱后的解箱。</p>

<h3>7)请注意内存开销</h3>

<p>对你所使用的语言与库的成本与开销有所了解，从开始到结束，在设计你的app时谨记这些信息。通常，表面上看起来无关痛痒(innocuous)的事情也许实际上会导致大量的开销。例如：</p>

<ul>
<li>Enums的内存消耗通常是static constants的2倍。你应该尽量避免在Android上使用enums。</li>
<li>在Java中的每一个类(包括匿名内部类)都会使用大概500 bytes。</li>
<li>每一个类的实例花销是12-16 bytes。</li>
<li>往HashMap添加一个entry需要额一个额外占用的32 bytes的entry对象。</li>
</ul>


<h3>8)请注意代码“抽象”</h3>

<p>通常, 开发者使用抽象简单的作为"好的编程实践",因为抽象能够提升代码的灵活性与可维护性。然而，抽象会导致一个显著的开销:通常他们需要同等量的代码用于可执行。那些代码会被map到内存中。因此如果你的抽象没有显著的提升效率，应该尽量避免他们。</p>

<h3>9)为序列化的数据使用nano protobufs</h3>

<p><a href="https://developers.google.com/protocol-buffers/docs/overview">Protocol buffers</a>是由Google为序列化结构数据而设计的，一种语言无关，平台无关，具有良好扩展性的协议。类似XML，却比XML更加轻量，快速，简单。如果你需要为你的数据实现协议化，你应该在客户端的代码中总是使用nano protobufs。通常的协议化操作会生成大量繁琐的代码，这容易给你的app带来许多问题:增加RAM的使用量，显著增加APK的大小，更慢的执行速度，更容易达到DEX的字符限制。</p>

<p>关于更多细节，请参考<a href="https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt">protobuf readme</a>的"Nano version"章节。</p>

<h3>10)Avoid dependency injection frameworks</h3>

<p>使用类似<a href="https://code.google.com/p/google-guice/">Guice</a>或者<a href="https://github.com/roboguice/roboguice">RoboGuice</a>等framework injection包是很有效的，因为他们能够简化你的代码。</p>

<blockquote><p>RoboGuice 2 smoothes out some of the wrinkles in your Android development experience and makes things simple and fun. Do you always forget to check for null when you getIntent().getExtras()? RoboGuice 2 will help you. Think casting findViewById() to a TextView shouldn’t be necessary? RoboGuice 2 is on it. RoboGuice 2 takes the guesswork out of development. Inject your View, Resource, System Service, or any other object, and let RoboGuice 2 take care of the details.</p></blockquote>

<p>然而，那些框架会通过扫描你的代码执行许多初始化的操作，这会导致你的代码需要大量的RAM来map代码。但是mapped pages会长时间的被保留在RAM中。</p>

<h3>11)谨慎使用external libraries</h3>

<p>很多External library的代码都不是为移动网络环境而编写的，在移动客户端则显示的效率不高。至少，当你决定使用一个external library的时候，你应该针对移动网络做繁琐的porting与maintenance的工作。</p>

<p>即使是针对Android而设计的library，也可能是很危险的，因为每一个library所做的事情都是不一样的。例如，其中一个lib使用的是nano protobufs, 而另外一个使用的是micro protobufs。那么这样，在你的app里面就有2种protobuf的实现方式。这样的冲突同样可能发生在输出日志，加载图片，缓存等等模块里面。</p>

<p>同样不要陷入为了1个或者2个功能而导入整个library的陷阱。如果没有一个合适的库与你的需求相吻合，你应该考虑自己去实现，而不是导入一个大而全的解决方案。</p>

<h3>12)优化整体性能</h3>

<p>官方有列出许多优化整个app性能的文章：<a href="http://developer.android.com/training/best-performance.html">Best Practices for Performance</a>. 这篇文章就是其中之一。有些文章是讲解如何优化app的CPU使用效率，有些是如何优化app的内存使用效率。</p>

<p>你还应该阅读<a href="http://developer.android.com/tools/debugging/debugging-ui.html">optimizing your UI</a>来为layout进行优化。同样还应该关注lint工具所提出的建议，进行优化。</p>

<h3>13)使用ProGuard来剔除不需要的代码</h3>

<p><a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>能够通过移除不需要的代码，重命名类，域与方法等方对代码进行压缩,优化与混淆。使用ProGuard可以是的你的代码更加紧凑，这样能够使用更少mapped代码所需要的RAM。</p>

<h3>14)对最终的APK使用zipalign</h3>

<p>在编写完所有代码，并通过编译系统生成APK之后，你需要使用<a href="http://developer.android.com/tools/help/zipalign.html">zipalign</a>对APK进行重新校准。如果你不做这个步骤，会导致你的APK需要更多的RAM，因为一些类似图片资源的东西不能被mapped。</p>

<p><strong>Notes::</strong>Google Play不接受没有经过zipalign的APK。</p>

<h3>15)分析你的RAM使用情况</h3>

<p>一旦你获取到一个相对稳定的版本后，需要分析你的app整个生命周期内使用的内存情况，并进行优化，更多细节请参考<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a>.</p>

<h3>16)使用多进程</h3>

<p>如果合适的话，有一个更高级的技术可以帮助你的app管理内存使用：通过把你的app组件切分成多个组件，运行在不同的进程中。这个技术必须谨慎使用，大多数app都不应该运行在多个进程中。因为如果使用不当，它会显著增加内存的使用，而不是减少。当你的app需要在后台运行与前台一样的大量的任务的时候，可以考虑使用这个技术。</p>

<p>一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个app运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的app可以切分成2个进程：一个用来操作UI，另外一个用来后台的Service.</p>

<p>你可以通过在manifest文件中声明'android:process'属性来实现某个组件运行在另外一个进程的操作。</p>

<p>```xml
&lt;service android:name=".PlaybackService"</p>

<pre><code>     android:process=":background" /&gt;
</code></pre>

<p>```
更多关于使用这个技术的细节，请参考原文，链接如下。</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/articles/memory.html">http://developer.android.com/training/articles/memory.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 4 - 优化Views)]]></title>
    <link href="http://hukai.me/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-4/"/>
    <updated>2013-08-18T17:30:00+08:00</updated>
    <id>http://hukai.me/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-4</id>
    <content type="html"><![CDATA[<p>前面的课程学习到了如何创建设计良好的View，并且能够使之在手势与状态切换时得到正确的反馈。下面要介绍的是如何使得view能够执行更快。为了避免UI显得卡顿，你必须确保动画能够保持在60fps以上。</p>

<!-- more -->


<h2>Do Less, Less Frequently</h2>

<p>为了加速你的view，对于频繁调用的方法，需要尽量减少不必要的代码。先从onDraw开始，需要特别注意不应该在这里做内存分配的事情，因为它会导致GC，从而导致卡顿。在初始化或者动画间隙期间做分配内存的动作。不要在动画正在执行的时候做内存分配的事情。</p>

<p>你还需要尽可能的减少onDraw被调用的次数，大多数时候导致onDraw都是因为调用了invalidate().因此请尽量减少调用invaildate()的次数。如果可能的话，尽量调用含有4个参数的invalidate()方法而不是没有参数的invalidate()。没有参数的invalidate会强制重绘整个view。</p>

<p>另外一个非常耗时的操作是请求layout。任何时候执行requestLayout()，会使得Android UI系统去遍历整个View的层级来计算出每一个view的大小。如果找到有冲突的值，它会需要重新计算好几次。另外需要尽量保持View的层级是扁平化的，这样对提高效率很有帮助。</p>

<p>如果你有一个复杂的UI，你应该考虑写一个自定义的ViewGroup来执行他的layout操作。与内置的view不同，自定义的view可以使得程序仅仅测量这一部分，这避免了遍历整个view的层级结构来计算大小。</p>

<h2>Use Hardware Acceleration</h2>

<p>从Android 3.0开始，Android的2D图像系统可以通过GPU来加速。GPU硬件加速可以提高许多程序的性能。但是这并不是说它适合所有的程序。</p>

<p>参考<a href="http://developer.android.com/guide/topics/graphics/hardware-accel.html">Hardware Acceleration</a> 来学习如何在程序中启用加速。</p>

<p>一旦你开启了硬件加速，性能的提示并不一定可以明显察觉到。移动GPU在某些例如scaling,rotating与translating的操作中表现良好。但是对其他一些任务则表现不佳。</p>

<p>在下面的例子中，绘制pie是相对来说比较费时的。解决方案是把pie放到一个子view中，并设置View使用LAYER_TYPE_HARDWARE来进行加速,。
```java
   private class PieView extends View {</p>

<pre><code>   public PieView(Context context) {
       super(context);
       if (!isInEditMode()) {
           setLayerType(View.LAYER_TYPE_HARDWARE, null);
       }
   }

   @Override
   protected void onDraw(Canvas canvas) {
       super.onDraw(canvas);

       for (Item it : mData) {
           mPiePaint.setShader(it.mShader);
           canvas.drawArc(mBounds,
                   360 - it.mEndAngle,
                   it.mEndAngle - it.mStartAngle,
                   true, mPiePaint);
       }
   }

   @Override
   protected void onSizeChanged(int w, int h, int oldw, int oldh) {
       mBounds = new RectF(0, 0, w, h);
   }

   RectF mBounds;
</code></pre>

<p>   }
```
通过这样的修改以后，PieChart.PieView.onDraw()只会在第一次现实的时候被调用。之后，pie chart会被缓存为一张图片，并通过GPU来进行重画不同的角度。</p>

<p>缓存图片到hardware layer会消耗video memory，而video memory又是有限的。基于这样的考虑，仅仅在用户触发scrolling的时候使用LAYER_TYPE_HARDWARE，在其他时候，使用LAYER_TYPE_NONE。</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/optimizing-view.html">http://developer.android.com/training/custom-views/optimizing-view.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 3 - 处理View的交互性)]]></title>
    <link href="http://hukai.me/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-3/"/>
    <updated>2013-08-18T15:01:00+08:00</updated>
    <id>http://hukai.me/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-3</id>
    <content type="html"><![CDATA[<p>绘制UI仅仅是创建自定义View的一部分。你还需要使得你的View能够以模拟现实世界的方式来进行反馈。Objects应该总是与现实情景能够保持一致。例如，图片不应该突然消失又从另外一个地方出现，因为在现实世界里面不会发生那样的事情。正确的应该是，图片从一个地方移动到另外一个地方。</p>

<p>用户应该可以感受到UI上的微小变化，并对这些变化反馈到现实世界中。例如，当用户做fling(迅速滑动)的动作，应该再滑动开始与结束的时候给用户一定的反馈。</p>

<p>这节课会演示如何使用Android framework的功能来为自定义的View添加那些现实世界中的行为。</p>

<!-- more -->


<h2>Handle Input Gestures</h2>

<p>像许多其他UI框架一样，Android提供一个输入事件模型。用户的动作会转换成触发一些回调函数的事件，你可以重写这些回调方法来定制你的程序应该如何响应用户的输入事件。在Android中最常用的输入事件是touch，它会触发<a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent">onTouchEvent(android.view.MotionEvent)</a>)的回调。重写这个方法来处理touch事件：</p>

<p><code>java
@Override
public boolean onTouchEvent(MotionEvent event) {
  return super.onTouchEvent(event);
}
</code></p>

<p>Touch事件本身并不是特别有用。如今的touch UI定义了touch事件之间的相互作用，叫做gentures。例如tapping,pulling,flinging与zooming。为了把那些touch的源事件转换成gestures, Android提供了<a href="http://developer.android.com/reference/android/view/GestureDetector.html">GestureDetector</a>。</p>

<p>下面演示了如何构造一个GestureDetector。</p>

<p>```java
class mListener extends GestureDetector.SimpleOnGestureListener {
   @Override
   public boolean onDown(MotionEvent e) {</p>

<pre><code>   return true;
</code></pre>

<p>   }
}
mDetector = new GestureDetector(PieChart.this.getContext(), new mListener());
```</p>

<p>不管你是否使用GestureDetector.SimpleOnGestureListener, 你必须总是实现onDown()方法，并返回true。这一步是必须的，因为所有的gestures都是从onDown()开始的。如果你再onDown()里面返回false，系统会认为你想要忽略后续的gesture,那么GestureDetector.OnGestureListener的其他回调方法就不会被执行到了。一旦你实现了GestureDetector.OnGestureListener并且创建了GestureDetector的实例, 你可以使用你的GestureDetector来中止你在onTouchEvent里面收到的touch事件。</p>

<p>```java
@Override
public boolean onTouchEvent(MotionEvent event) {
   boolean result = mDetector.onTouchEvent(event);
   if (!result) {</p>

<pre><code>   if (event.getAction() == MotionEvent.ACTION_UP) {
       stopScrolling();
       result = true;
   }
</code></pre>

<p>   }
   return result;
}
```</p>

<p>当你传递一个touch事件到onTouchEvent()时，若这个个事件没有被认为是gesture中的一部分，它会返回false。你可以执行自定义的gesture-decection代码。</p>

<h2>Create Physically Plausible(貌似可信的) Motion</h2>

<p>Gestures是控制触摸设备的一种强有力的方式，但是除非你能够产出一个合理的触摸反馈，否则将是违反用户直觉的。一个很好的例子是fling手势，用户迅速的在屏幕上移动手指然后抬手离开屏幕。这个手势应该使得UI迅速的按照fling的方向进行滑动，然后慢慢停下来，就像是用户旋转一个飞轮一样。</p>

<p>幸运的是，Android有提供帮助类来模拟这些物理行为。</p>

<p><code>java
@Override
public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
   mScroller.fling(currentX, currentY, velocityX / SCALE, velocityY / SCALE, minX, minY, maxX, maxY);
   postInvalidate();
}
</code></p>

<p><strong>Note:</strong> 尽管速率是通过GestureDetector来计算的，许多开发者感觉使用这个值使得fling动画太快。通常把x与y设置为4到8倍的关系。</p>

<p>```java
if (!mScroller.isFinished()) {</p>

<pre><code>mScroller.computeScrollOffset();
setPieRotation(mScroller.getCurrY());
</code></pre>

<p>}
```</p>

<p><a href="http://developer.android.com/reference/android/widget/Scroller.html">Scroller</a> 类会为你计算滚动位置，但是他不会自动把哪些位置运用到你的view上面。你有责任确保View获取并运用到新的坐标。你有两种方法来实现这件事情：</p>

<ul>
<li>在调用fling()之后执行postInvalidate(), 这是为了确保能强制进行重画。这个技术需要每次在onDraw里面计算过scroll offsets(滚动偏移量)之后调用postInvalidate()。</li>
<li>使用<a href="http://developer.android.com/reference/android/animation/ValueAnimator.html">ValueAnimator</a></li>
</ul>


<p>第二个方法使用起来会稍微复杂一点，但是它更有效率并且避免了不必要的重画的view进行重绘。缺点是ValueAnimator是从API Level 11才有的。因此他不能运用到3.0的系统之前的版本上。</p>

<p><strong> Note: </strong> ValueAnimator虽然是API 11才有的，但是你还是可以在最低版本低于3.0的系统上使用它，做法是在运行时判断当前的API Level，如果低于11则跳过。</p>

<p>```java
 mScroller = new Scroller(getContext(), null, true);
 mScrollAnimator = ValueAnimator.ofFloat(0,1);
 mScrollAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {</p>

<pre><code> @Override
 public void onAnimationUpdate(ValueAnimator valueAnimator) {
     if (!mScroller.isFinished()) {
         mScroller.computeScrollOffset();
         setPieRotation(mScroller.getCurrY());
     } else {
         mScrollAnimator.cancel();
         onScrollFinished();
     }
 }
</code></pre>

<p> });
```</p>

<h2>Make Your Transitions Smooth</h2>

<p>用户期待一个UI之间的切换是能够平滑过渡的。UI元素需要做到渐入淡出来取代突然出现与消失。Android从3.0开始有提供<a href="http://developer.android.com/guide/topics/graphics/prop-animation.html">property animation framework</a>,用来使得平滑过渡变得更加容易。</p>

<p>如果你不想改变View的属性，只是做一些动画的话，你可以使用ObjectAnimator.
<code>java
mAutoCenterAnimator = ObjectAnimator.ofInt(PieChart.this, "PieRotation", 0);
mAutoCenterAnimator.setIntValues(targetAngle);
mAutoCenterAnimator.setDuration(AUTOCENTER_ANIM_DURATION);
mAutoCenterAnimator.start();
</code></p>

<p>如果你想改变的是view的某些基础属性，你可以使用<a href="http://developer.android.com/reference/android/view/ViewPropertyAnimator.html">ViewPropertyAnimator</a> ,它能够同时执行多个属性的动画。
<code>java
animate().rotation(targetAngle).setDuration(ANIM_DURATION).start();
</code></p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/making-interactive.html">http://developer.android.com/training/custom-views/making-interactive.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 2 - 自定义Drawing)]]></title>
    <link href="http://hukai.me/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-2/"/>
    <updated>2013-06-30T20:15:00+08:00</updated>
    <id>http://hukai.me/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-2</id>
    <content type="html"><![CDATA[<p>自定义view的最重要的一个部分是自定义它的外观。根据你的程序的需求，自定义绘制动作可能简单也可能很复杂。这节课会演示一些最常见的操作。</p>

<h2>Override onDraw()</h2>

<p>重绘一个自定义的view的最重要的步骤是重写onDraw()方法。onDraw()的参数是一个Canvas对象。Canvas类定义了绘制文本，线条，图像与许多其他图形的方法。你可以在onDraw方法里面使用那些方法来创建你的UI。</p>

<p>在你调用任何绘制方法之前，你需要创建一个Paint对象。</p>

<!-- more -->


<h2>Create Drawing Objects</h2>

<p>android.graphics framework把绘制定义为下面两类:</p>

<ul>
<li>绘制什么，由Canvas控制</li>
<li>如何绘制，由Paint控制</li>
</ul>


<p>例如Canvas提供绘制一条直线的方法，Paint提供直线颜色。所以在绘制之前，你需要创建一个或者多个Paint对象。
```java
private void init() {
   mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   mTextPaint.setColor(mTextColor);
   if (mTextHeight == 0) {</p>

<pre><code>   mTextHeight = mTextPaint.getTextSize();
</code></pre>

<p>   } else {</p>

<pre><code>   mTextPaint.setTextSize(mTextHeight);
</code></pre>

<p>   }</p>

<p>   mPiePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   mPiePaint.setStyle(Paint.Style.FILL);
   mPiePaint.setTextSize(mTextHeight);</p>

<p>   mShadowPaint = new Paint(0);
   mShadowPaint.setColor(0xff101010);
   mShadowPaint.setMaskFilter(new BlurMaskFilter(8, BlurMaskFilter.Blur.NORMAL));</p>

<p>   ...
```
刚开始就创建对象是一个重要的优化技巧。Views会被频繁的重新绘制，初始化许多绘制对象需要花费昂贵的代价。在onDraw方法里面创建绘制对象会严重影响到性能并使得你的UI显得卡顿。</p>

<h2>Handle Layout Events</h2>

<p>为了正确的绘制你的view，你需要知道view的大小。复杂的自定义view通常需要根据在屏幕上的大小与形状执行多次layout计算。你不应该去估算这个view在屏幕上的显示大小。即使只有一个程序会使用你的view，仍然是需要处理屏幕大小不同，密度不同，方向不同所带来的影响。</p>

<p>尽管view有许多方法是用来计算大小的，但是大多数是不需要重写的。如果你的view不需要特别的控制它的大小，唯一需要重写的方法是<a href="http://developer.android.com/reference/android/view/View.html#onSizeChanged(int,%20int,%20int,%20int">onSizeChanged()</a>).</p>

<p>onSizeChanged()，当你的view第一次被赋予一个大小时，或者你的view大小被更改时会被执行。在onSizeChanged方法里面计算位置，间距等其他与你的view大小值。
```java</p>

<pre><code>   // Account for padding
   float xpad = (float)(getPaddingLeft() + getPaddingRight());
   float ypad = (float)(getPaddingTop() + getPaddingBottom());

   // Account for the label
   if (mShowText) xpad += mTextWidth;

   float ww = (float)w - xpad;
   float hh = (float)h - ypad;

   // Figure out how big we can make the pie.
   float diameter = Math.min(ww, hh);
</code></pre>

<p><code>
如果你想更加精确的控制你的view的大小，需要重写[onMeasure()](http://developer.android.com/reference/android/view/View.html#onMeasure(int, int))方法。这个方法的参数是View.MeasureSpec，它会告诉你的view的夫控件的大小。那些值被包装成int类型，你可以使用静态方法来获取其中的信息。
</code>java
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
   // Try for a width based on our minimum
   int minw = getPaddingLeft() + getPaddingRight() + getSuggestedMinimumWidth();
   int w = resolveSizeAndState(minw, widthMeasureSpec, 1);</p>

<p>   // Whatever the width ends up being, ask for a height that would let the pie
   // get as big as it can
   int minh = MeasureSpec.getSize(w) - (int)mTextWidth + getPaddingBottom() + getPaddingTop();
   int h = resolveSizeAndState(MeasureSpec.getSize(w) - (int)mTextWidth, heightMeasureSpec, 0);</p>

<p>   setMeasuredDimension(w, h);
}
```
上面的代码有三个重要的事情需要注意:</p>

<ul>
<li>计算的过程有把view的padding考虑进去。这个在后面会提到，这部分是view所控制的。</li>
<li>帮助方法resolveSizeAndState()是用来创建最终的宽高值的。这个方法会通过比较view的需求大小与spec值返回一个合适的View.MeasureSpec值，并传递到onMeasure方法中。</li>
<li>onMeasure()没有返回值。它通过调用setMeasuredDimension()来获取结果。调用这个方法是强制执行的，如果你遗漏了这个方法，会出现运行时异常。</li>
</ul>


<h2>Draw!</h2>

<p>每个view的onDraw都是不同的，但是有下面一些常见的操作：</p>

<ul>
<li>绘制文字使用drawText()。指定字体通过调用setTypeface(), 通过setColor()来设置文字颜色.</li>
<li>绘制基本图形使用drawRect(), drawOval(), drawArc(). 通过setStyle()来指定形状是否需要filled, outlined.</li>
<li>绘制一些复杂的图形，使用Path类. 通过给Path对象添加直线与曲线, 然后使用drawPath()来绘制图形. 和基本图形一样，paths也可以通过setStyle来设置是outlined, filled, both.</li>
<li>通过创建LinearGradient对象来定义渐变。调用setShader()来使用LinearGradient。</li>
<li>通过使用drawBitmap来绘制图片.</li>
</ul>


<p>```java
protected void onDraw(Canvas canvas) {
   super.onDraw(canvas);</p>

<p>   // Draw the shadow
   canvas.drawOval(</p>

<pre><code>       mShadowBounds,
       mShadowPaint
</code></pre>

<p>   );</p>

<p>   // Draw the label text
   canvas.drawText(mData.get(mCurrentItem).mLabel, mTextX, mTextY, mTextPaint);</p>

<p>   // Draw the pie slices
   for (int i = 0; i &lt; mData.size(); ++i) {</p>

<pre><code>   Item it = mData.get(i);
   mPiePaint.setShader(it.mShader);
   canvas.drawArc(mBounds,
           360 - it.mEndAngle,
           it.mEndAngle - it.mStartAngle,
           true, mPiePaint);
</code></pre>

<p>   }</p>

<p>   // Draw the pointer
   canvas.drawLine(mTextX, mPointerY, mPointerX, mPointerY, mTextPaint);
   canvas.drawCircle(mPointerX, mPointerY, mPointerSize, mTextPaint);
}
```</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/custom-drawing.html">http://developer.android.com/training/custom-views/custom-drawing.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 1 - 创建一个View类)]]></title>
    <link href="http://hukai.me/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-1/"/>
    <updated>2013-06-30T18:47:00+08:00</updated>
    <id>http://hukai.me/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-1</id>
    <content type="html"><![CDATA[<p>设计良好的类总是相似的。它使用一个好用的接口来封装一个特定的功能，它有效的使用CPU与内存，等等。为了成为一个设计良好的类，自定义的view应该:</p>

<ul>
<li>遵守Android标准规则。</li>
<li>提供自定义的风格属性值并能够被Android XML Layout所识别。</li>
<li>发出可访问的事件。</li>
<li>能够兼容Android的不同平台。</li>
</ul>


<p>Android的framework提供了许多基类与XML标签用来帮助你创建一个符合上面要求的View。这节课会介绍如何使用Android framework来创建一个view的核心功能。</p>

<!-- more -->


<h2>Subclass a View</h2>

<p>Android framework里面定义的view类都继承自View。你自定义的view也可以直接继承View，或者你可以通过继承既有的一个子类(例如Button)来节约一点时间。</p>

<p>为了允许Android Developer Tools能够识别你的view，你必须至少提供一个constructor，它包含一个Contenx与一个AttributeSet对象作为参数。这个constructor允许layout editor创建并编辑你的view的实例。
```java
class PieChart extends View {</p>

<pre><code>public PieChart(Context context, AttributeSet attrs) {
    super(context, attrs);
}
</code></pre>

<p>}
```</p>

<h2>Define Custom Attributes</h2>

<p>为了添加一个内置的View到你的UI上，你需要通过XML属性来指定它的样式与行为。为了实现自定义的view的行为，你应该:</p>

<ul>
<li>为你的view在<declare-styleable>资源标签下定义自设的属性</li>
<li>在你的XML layout中指定属性值</li>
<li>在运行时获取属性值</li>
<li>把获取到的属性值应用在你的view上</li>
</ul>


<p>为了定义自设的属性，添加 <declare-styleable> 资源到你的项目中。放置于res/values/attrs.xml文件中。下面是一个attrs.xml文件的示例:
```xml
<resources>
   <declare-styleable name="PieChart"></p>

<pre><code>   &lt;attr name="showText" format="boolean" /&gt;
   &lt;attr name="labelPosition" format="enum"&gt;
       &lt;enum name="left" value="0"/&gt;
       &lt;enum name="right" value="1"/&gt;
   &lt;/attr&gt;
</code></pre>

<p>   </declare-styleable>
</resources>
```
上面的代码声明了2个自设的属性，<strong>showText</strong>与<strong>labelPosition</strong>，它们都归属于PieChart的项目下的styleable实例。styleable实例的名字，通常与自定义的view名字一致。尽管这并没有严格规定要遵守这个convention，但是许多流行的代码编辑器都依靠这个命名规则来提供statement completion。</p>

<p>一旦你定义了自设的属性，你可以在layout XML文件中使用它们。唯一不同的是你自设的属性是归属于不同的命名空间。不是属于http://schemas.android.com/apk/res/android的命名空间，它们归属于http://schemas.android.com/apk/res/[your package name]。例如，下面演示了如何为PieChart使用上面定义的属性：
```xml
&lt;?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:custom="http://schemas.android.com/apk/res/com.example.customviews">
 &lt;com.example.customviews.charting.PieChart</p>

<pre><code> custom:showText="true"
 custom:labelPosition="left" /&gt;
</code></pre>

<p></LinearLayout>
```
为了避免输入长串的namespace名字，示例上面使用了:custom作为别名，你也可以选择其他的名称所为你的namespace。</p>

<p>请注意，如果你的view是一个inner class，你必须指定这个view的outer class。同样的，如果PieChart有一个inner class叫做PieView。为了使用这个类中自设的属性，你应该使用com.example.customviews.charting.PieChart$PieView.</p>

<h2>Apply Custom Attributes</h2>

<p>当view从XML layout被创建的时候，在xml标签下的属性值都是从resource下读取出来并传递到view的constructor作为一个AttributeSet参数。尽管可以从AttributeSet中直接读取数值，可是这样做有些弊端（<em>没有看懂下面的两个原因</em>）：</p>

<ul>
<li>拥有属性的资源并没有经过分解</li>
<li>Styles并没有运用上</li>
</ul>


<p>取而代之的是，通过obtainStyledAttributes()来获取属性值。这个方法会传递一个<a href="http://developer.android.com/reference/android/content/res/TypedArray.html">TypedArray</a>对象，它是间接referenced并且styled的。</p>

<p>请看下面的示例：
```java
public PieChart(Context context, AttributeSet attrs) {
   super(context, attrs);
   TypedArray a = context.getTheme().obtainStyledAttributes(</p>

<pre><code>    attrs,
    R.styleable.PieChart,
    0, 0);
</code></pre>

<p>   try {</p>

<pre><code>   mShowText = a.getBoolean(R.styleable.PieChart_showText, false);
   mTextPos = a.getInteger(R.styleable.PieChart_labelPosition, 0);
</code></pre>

<p>   } finally {</p>

<pre><code>   a.recycle();
</code></pre>

<p>   }
}
```
清注意TypedArray对象是一个shared资源，必须被在使用后进行回收。</p>

<h2>Add Properties and Events</h2>

<p>Attributes是一个强大的控制view的行为与外观的方法，但是他们仅仅能够在view被初始化的时候被读取到。为了提供一个动态的行为，需要暴露出一些合适的getter 与setter方法。下面的代码演示了如何使用这个技巧:
```java
public boolean isShowText() {
   return mShowText;
}</p>

<p>public void setShowText(boolean showText) {
   mShowText = showText;
   invalidate();
   requestLayout();
}
```
请注意，在setShowText方法里面有调用<a href="http://developer.android.com/reference/android/view/View.html#invalidate(">invalidate()</a>) and <a href="http://developer.android.com/reference/android/view/View.html#requestLayout(">requestLayout()</a>). 当view的某些内容发生变化的时候，需要调用invalidate来通知系统对这个view进行redraw，当某些元素变化会引起组件大小变化时，需要调用requestLayout方法。</p>

<p>自定义的view也需要能够支持响应事件的监听器。例如，PieChart暴露了一个自设的事件OnCurrentItemChanged来通知监听器，用户已经切换了焦点到一个新的组件上。</p>

<p>我们很容易忘记了暴露属性与事件，特别是当你是这个view的唯一用户时。请花费一些时间来仔细定义你的view的交互。一个好的规则是总是暴露任何属性与事件。</p>

<h2>Design For Accessibility</h2>

<p>Your custom view should support the widest range of users. This includes users with disabilities that prevent them from seeing or using a touchscreen. To support users with disabilities, you should:</p>

<ul>
<li>Label your input fields using the android:contentDescription attribute</li>
<li>Send accessibility events by calling sendAccessibilityEvent() when appropriate.</li>
<li>Support alternate controllers, such as D-pad and trackball</li>
</ul>


<p>For more information on creating accessible views, see <a href="http://developer.android.com/guide/topics/ui/accessibility/apps.html#custom-views">Making Applications Accessible</a> in the Android Developers Guide.</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/create-view.html">http://developer.android.com/training/custom-views/create-view.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
</feed>
