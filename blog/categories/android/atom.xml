<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 胡凯]]></title>
  <link href="http://hukai.me/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://hukai.me/"/>
  <updated>2014-10-19T13:07:00+08:00</updated>
  <id>http://hukai.me/</id>
  <author>
    <name><![CDATA[Kesen Hoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android APK安装包瘦身]]></title>
    <link href="http://hukai.me/android-tips-for-reduce-apk-size/"/>
    <updated>2014-09-13T20:24:00+08:00</updated>
    <id>http://hukai.me/android-tips-for-reduce-apk-size</id>
    <content type="html"><![CDATA[<p>很显然，APK安装包越小越好。下面从代码，资源文件，使用策略几个方面简要介绍下：</p>

<h3>代码</h3>

<ul>
<li>保持良好的编程习惯，不要重复或者不用的代码，谨慎添加libs，移除使用不到的libs。</li>
<li>使用proguard混淆代码，它会对不用的代码做优化，并且混淆后也能够减少安装包的大小。</li>
<li>native code的部分，大多数情况下只需要支持armabi与x86的架构即可。如果非必须，可以考虑拿掉x86的部分。</li>
</ul>


<h3>资源</h3>

<ul>
<li>使用Lint工具查找没有使用到的资源。去除不使用的图片，String，XML等等。</li>
<li>assets目录下的资源请确保没有用不上的文件。</li>
<li>生成APK的时候，aapt工具本身会对png做优化，但是在此之前还可以使用其他工具如tinypng对图片进行进一步的压缩预处理。</li>
<li>jpeg还是png，根据需要做选择，在某些时候jpeg可以减少图片的体积。</li>
<li>对于9.png的图片，可拉伸区域尽量切小，另外可以通过使用9.png拉伸达到大图效果的时候尽量不要使用整张大图。</li>
</ul>


<!-- More -->


<h3>策略</h3>

<ul>
<li>有选择性的提供hdpi，xhdpi，xxhdpi的图片资源。建议优先提供xhdpi的图片，对于mdpi，ldpi与xxxhdpi根据需要提供有差异的部分即可。</li>
<li>尽可能的重用已有的图片资源。例如对称的图片，只需要提供一张，另外一张图片可以通过代码旋转的方式实现。</li>
<li>能用代码绘制实现的功能，尽量不要使用大量的图片。例如减少使用多张图片组成animate-list的AnimationDrawable，这种方式提供了多张图片很占空间。</li>
</ul>


<h3>总结</h3>

<p>一个好的应用，需要具备很多优点，尽可能提供小的安装包是其中一个重要的方面。以上的小技巧，需要综合考虑，结合实际情况进行取舍。当然我们还可以采取一些按需加载的策略来减少安装包的体积，最好提一点，砍掉不必要的功能才是安装包瘦身的终极奥秘。O(∩_∩)O哈！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Notes - Activity生命周期中的onSaveInstanceState]]></title>
    <link href="http://hukai.me/android-activitylifecycle-onsaveinstancestate/"/>
    <updated>2014-08-31T17:01:00+08:00</updated>
    <id>http://hukai.me/android-activitylifecycle-onsaveinstancestate</id>
    <content type="html"><![CDATA[<p>记录下Activity生命周期中的<a href="http://developer.android.com/reference/android/app/Activity.html">onSaveInstanceState(Bundle outState)</a></p>

<h2>onSaveInstanceState与onRestoreInstanceState的作用：</h2>

<p>在资源紧张的情况下，系统会选择杀死一些处于非栈顶的Activity来回收资源。
为了能够让这些可能被杀死的Activity能够在恢复显示的时候状态不丢失，所以需要在Activity从栈顶往下压的时候提供onSaveInstanceState的回调用来提前保存状态信息。</p>

<p>而onRestoreInstanceState则是在这个Activity真的回收掉之后的恢复显示阶段用来恢复之前保存的数据。</p>

<h2>onSaveInstanceState与onRestoreInstanceState的调用时机：</h2>

<p>只要某个Activity是做入栈并且非栈顶时（启动跳转其他Activity或者点击Home按钮），此Activity是需要调用onSaveInstanceState的，
如果Activity是做出栈的动作（点击back或者执行finish），是不会调用onSaveInstanceState的。</p>

<p>只有在Activity真的被系统非正常杀死过，恢复显示Activity的时候，就会调用onRestoreInstanceState。</p>

<h2><a href="https://github.com/kesenhoo/ActivityLifeCycle">Sample Code</a></h2>

<ul>
<li>从ActivityA启动ActivityB执行顺序是：A：onCreate -> A：onStart -> A：onResume -> B：onCreate -> B：onStart -> B：onResume -> A：onSaveInstanceState –> A：onStop。</li>
<li>正常流程从ActivityB点击Back按钮或者是触发finish方法回退到ActivityA，执行顺序是：B：finish –> B：onPause –> A： onRestart –> A：onStart  -> A：onResume -> B： onStop –> B：onDestroy。</li>
<li>若启动ActivityB之后，选择点击Home按钮，程序退到后台，那么执行顺序是：B：onPause -> B：onSaveInstanceState -> B：onStop。</li>
<li>程序在后台的时候，选择主动杀死程序进程，然后再从桌面点击应用启动，会显示之前的ActivityB，执行顺序是：B：onCreate -> B：onStart –> B：onRestoreInstanceState - > B：onResume。</li>
<li>点击Back按钮或者是执行Activity B里面提供的finish方法：B：finish –> B：onPause –> A：onCreate  -> A：onStart -> A：onRestoreInstanceState -> A：onResume -> B：onStop -> B：onDestory。</li>
<li>最后再点击Back按钮或是执行Activity A里面的finish方法退出程序：A：finish -> A：onPause –> A：onStop -> A：onDestory。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(5 - 通过蓝牙进行调试)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-bt-debug/"/>
    <updated>2014-07-15T00:23:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-bt-debug</id>
    <content type="html"><![CDATA[<p>你可以通过蓝牙来调试你的可穿戴应用，通过蓝牙把调试数据输出到手持设备上，手持设备是有连接到开发电脑上的。</p>

<h2>搭建好设备用来调试</h2>

<ul>
<li>开启手持设备的USB调试：

<ul>
<li>打开设置应用并滑动到底部。</li>
<li>如果在设置里面没有开发者选项，点击关于手机，滑动到底部，点击build number 7次。</li>
<li>返回并点击开发者选项。</li>
<li>开启USB调试。</li>
</ul>
</li>
<li>开启可穿戴设备的蓝牙调试：

<ul>
<li>点击主界面2次，来到Wear菜单界面。</li>
<li>滑动到底部，点击设置。</li>
<li>滑动到底部，如果没有开发者选项，点击Build Number 7次。</li>
<li>点击开发者选项。</li>
<li>开启蓝牙调试。</li>
</ul>
</li>
</ul>


<!-- More -->


<h2>建立调试会话</h2>

<ol>
<li>在手持设备上，打开<code>Android Wear</code>这个伴侣应用。</li>
<li>点击右上角的菜单，选择设置。</li>
<li>开启蓝牙调试。你将会在选项下面看到一个小的状态信息：
<code>xml
Host: disconnected
Target: connected
</code></li>
<li>通过USB连接手持设备到你的电脑上，并执行下面的命令：
<code>xml
adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444
</code>

<blockquote><p><strong>Note:</strong> 你可以使用任何可用的端口。</p></blockquote></li>
</ol>


<p>在<code>Android Wear</code>伴侣应用上，你将会看到状态变为：
<code>xml
Host: connected
Target: connected
</code></p>

<h2>调试你的应用</h2>

<p>当运行abd devices的命令时，你的可穿戴设备是作为localhost:4444的。执行任何的adb命令，需要使用下面的格式：
<code>xml
adb -s localhost:4444 &lt;command&gt;
</code>
如果没有任何其他的设备通过TCP/IP连接到手持设备，你可以使用下面的简短命令：
<code>xml
adb -e &lt;command&gt;
</code>
例如：
<code>xml
adb -e logcat
adb -e shell
adb -e bugreport
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(4 - 打包可穿戴应用)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-packaging/"/>
    <updated>2014-07-14T23:32:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-packaging</id>
    <content type="html"><![CDATA[<p>当发布应用给用户之前，你必须把可穿戴应用打包到手持应用内。因为不能直接在可穿戴设备上浏览并安装应用。如果打包正确，当用户下载手持应用时，系统会自动下发可穿戴应用到匹对的可穿戴设备上。</p>

<blockquote><p><strong>Note:</strong> 如果开发时签名用的是debug key，这个特性是无法正常工作的。在开发时，需要使用<code>adb install</code>的命令或者Android Studio来安装可穿戴应用。</p></blockquote>

<h2>使用Android Studio打包</h2>

<p>在Android Studio中打包可穿戴应用有下面几个步骤：</p>

<ol>
<li>在手持应用的buidl.gradle文件中把可穿戴应用声明为依赖：
<code>xml
dependencies {
compile 'com.google.android.gms:play-services:5.0.+@aar'
compile 'com.android.support:support-v4:20.0.+''
wearApp project(':wearable')
}
</code></li>
</ol>


<!-- More -->


<ol>
<li>点击<strong>Build</strong> > <strong>Generate Signed APK</strong>... 安装屏幕上的指示来制定你的release key并为你的app进行签名。Android Studio导出签名好的手持应用，他内置了可穿戴应用。
或者，你可以在可穿戴应用与手持应用的build.gradle文件里面建立一个签名规则。为了能够正常自动推送可穿戴应用，这两个应用都必须签名。
<code>xml
android {
...
signingConfigs {
 release {
   keyAlias 'myAlias'
   keyPassword 'myPw'
   storeFile file('path/to/release.keystore')
   storePassword 'myPw'
 }
}
buildTypes {
 release {
   ...
   signingConfig signingConfigs.release
 }d
}
...
}
</code>
通过点击Android Studio右边的Gradle按钮来建立手持应用，并执行<strong>assembleRelease</strong>任务。这个任务放在<strong>Project name</strong> > <strong>Handheld module name</strong> > <strong>assembleRelease.</strong></li>
</ol>


<blockquote><p><strong>Note:</strong>这个例子中把密码写在了Gradle文件中，这应该不是期待的写法。请参考<a href="http://developer.android.com/sdk/installing/studio-build.html#configureSigning">Configure signing settings</a>学习如何为密码创建环境变量。</p></blockquote>

<h3>分别为可穿戴应用与手持应用进行签名</h3>

<p>如果你的Build任务需要为可穿戴应用与手持应用签不同的Key，你可以像下面一样在手持应用的build.gradle文件中声明规则。
<code>xml
dependencies {
  ...
  wearApp files('/path/to/wearable_app.apk')
}
</code>
你可以为手持应用手动进行签任何形式的Key (可以是Android Studio Build > Generate Signed APK...的方式，也可以是Gradle signingConfig规则的方式)</p>

<h2>手动打包</h2>

<p>如果你使用的是其他IDE，你仍然可以把可穿戴应用打包到手持应用中。</p>

<ol>
<li>把签好名的可穿戴应用放到手持应用的<code>res/raw</code>目录下。 我们把这个应用作为<code>wearable_app.apk</code>。</li>
<li>创建<code>res/xml/wearable_app_desc.xml</code>文件，里面包含可穿戴设备的版本信息与路径。例如:
<code>xml
&lt;wearableApp package="wearable.app.package.name"&gt;
&lt;versionCode&gt;1&lt;/versionCode&gt;
&lt;versionName&gt;1.0&lt;/versionName&gt;
&lt;rawPathResId&gt;wearable_app&lt;/rawPathResId&gt;
&lt;/wearableApp&gt;
</code>
package, versionCode, 与 versionName需要和可穿戴应用的AndroidManifest.xml里面的信息一致。<code>rawPathResId</code>是一个static的变量表示APK的名称。。</li>
<li>添加<code>meta-data</code>标签到你的手持应用的<code>&lt;application&gt;</code>标签下，指明引用wearable_app_desc.xml文件
```xml
&lt;meta-data android:name="com.google.android.wearable.beta.app"

<pre><code>          android:resource="@xml/wearable_app_desc"/&gt;
</code></pre>

<p>```</p></li>
<li>构建并签名手持应用。</li>
</ol>


<h2>关闭资源压缩</h2>

<p>许多构建工具会自动压缩放在res/raw目录下的文件。因为可穿戴APK已经被压缩过了，那些压缩工作再次压缩会导致应用无法正常安装。</p>

<p>这样的话，安装失败。在手持应用上，<code>PackageUpdateService</code>会输出如下的错误日志："this file cannot be opened as a file descriptor; it is probably compressed."</p>

<p>Android Studio 默认不会压缩你的APK，如果你使用另外一个构建流程，需要确保不会发生重复压缩可穿戴应用的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training - 创建可穿戴应用(3 - 添加语音能力)]]></title>
    <link href="http://hukai.me/android-training-wearable-app-voice-input/"/>
    <updated>2014-07-14T21:43:00+08:00</updated>
    <id>http://hukai.me/android-training-wearable-app-voice-input</id>
    <content type="html"><![CDATA[<p>语音指令是可穿戴体验的一个重要的部分。这使得用户可以释放双手，快速发出指令。穿戴提供了2种类型的语音操作：</p>

<ul>
<li><p><strong>系统提供的</strong></p>

<p>这些语音指令都是基于任务的，并且内置在Wear的平台内。你在activity中过滤你想要接收的指令。例如包含"Take a note" 或者 "Set an alarm"的指令。</p></li>
<li><p><strong>应用提供的</strong></p>

<p>这些语音指令都是基于应用的，你需要像声明一个Launcher Icon一样定义这些指令。用户通过说"Start XXX"来使用那些语音指令，然后会启动你指定启动的activity。</p></li>
</ul>


<h2>声明系统提供的语音指令</h2>

<p>Android Wear平台基于用户的操作提供了一些语音指令，例如"Take a note" 或者 "Set an alarm"。用户发出想要做的操作指令，让系统寻找应该启动最合适的activity。</p>

<p>当用户说出语音指令时，你的应用能够被过滤出来启动一个activity。如果你想要启动一个service在后台执行任务，需要显示一个activity呈现作为线索。当你想要废弃这个可见的线索时，需要确保执行了finish()。</p>

<!-- More -->


<p>例如，对于"Take a note"的指令，定义一个MyNoteActivity来接收这个指令:</p>

<p>```java
<activity android:name="MyNoteActivity"></p>

<pre><code>  &lt;intent-filter&gt;
      &lt;action android:name="android.intent.action.SEND" /&gt;
      &lt;category android:name="com.google.android.voicesearch.SELF_NOTE" /&gt;
  &lt;/intent-filter&gt;
</code></pre>

<p>  </activity>
```</p>

<p>下面列出了Wear平台支持的语音指令：</p>

<p><img src="/images/voice_intent_1.png" alt="voice_intent_1" />
<img src="/images/voice_intent_2.png" alt="voice_intent_2" />
<img src="/images/voice_intent_3.png" alt="voice_intent_3" /></p>

<p>关于注册intent与获取intent extra的信息，请参考<a href="http://developer.android.com/guide/components/intents-common.html">Common intents</a>.</p>

<h2>声明应用提供的语音指令</h2>

<p>如果系统提供的语音指令无法满足你的需求，你可以使用"Start MyActivityName"的指令来直接启动你的应用。</p>

<p>注册一个"Start"指令和注册手持应用上得Launcher是一样的。</p>

<p>在"Start"指令的后面需要指定的文字, 这个文字需要注册在activity的label属性上。例如，下面的设置能够识别"Start MyRunningApp"的语音指令并启动StartRunActivity.</p>

<p>```xml
<application>
  <activity android:name="StartRunActivity" android:label="MyRunningApp"></p>

<pre><code>  &lt;intent-filter&gt;
      &lt;action android:name="android.intent.action.MAIN" /&gt;
      &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
  &lt;/intent-filter&gt;
</code></pre>

<p>  </activity>
</application>
```</p>

<h2>获取输入的自由语音</h2>

<p>除了使用语音指令来启动activity之外，你也可以执行系统内置的语言识别activity来获取用户的语音输入。这对于获取用户的输入信息非常有帮助，例如执行搜索或者发送一个消息。</p>

<p>在你的应用中，startActivityForResult()使用<code>ACTION_RECOGNIZE_SPEECH</code>启动系统语音识别应用。在onActivityResult()中处理返回的结果：</p>

<p>```java
private static final int SPEECH_REQUEST_CODE = 0;</p>

<p>// Create an intent that can start the Speech Recognizer activity
private void displaySpeechRecognizer() {</p>

<pre><code>Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
</code></pre>

<p>// Start the activity, the intent will be populated with the speech text</p>

<pre><code>startActivityForResult(intent, SPEECH_REQUEST_CODE);
</code></pre>

<p>}</p>

<p>// This callback is invoked when the Speech Recognizer returns.
// This is where you process the intent and extract the speech text from the intent.
@Override
protected void onActivityResult(int requestCode, int resultCode,</p>

<pre><code>    Intent data) {
if (requestCode == SPEECH_REQUEST &amp;&amp; resultCode == RESULT_OK) {
    List&lt;String&gt; results = data.getStringArrayListExtra(
            RecognizerIntent.EXTRA_RESULTS);
    String spokenText = results.get(0);
    // Do something with spokenText
}
super.onActivityResult(requestCode, resultCode, data);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
