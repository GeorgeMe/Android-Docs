<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 四方城]]></title>
  <link href="http://kesenhoo.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://kesenhoo.github.com/"/>
  <updated>2013-08-31T14:43:33+08:00</updated>
  <id>http://kesenhoo.github.com/</id>
  <author>
    <name><![CDATA[Kesen Hoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Training UI - 创建自定义的Views(Lesson 4 - 优化Views)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-4/"/>
    <updated>2013-08-18T17:30:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-4</id>
    <content type="html"><![CDATA[<p>前面的课程学习到了如何创建设计良好的View，并且能够使之在手势与状态切换时得到正确的反馈。下面要介绍的是如何使得view能够执行更快。为了避免UI显得卡顿，你必须确保动画能够保持在60fps以上。</p>

<!-- more -->


<h2>Do Less, Less Frequently</h2>

<p>为了加速你的view，对于频繁调用的方法，需要尽量减少不必要的代码。先从onDraw开始，需要特别注意不应该在这里做内存分配的事情，因为它会导致GC，从而导致卡顿。在初始化或者动画间隙期间做分配内存的动作。不要在动画正在执行的时候做内存分配的事情。</p>

<p>你还需要尽可能的减少onDraw被调用的次数，大多数时候导致onDraw都是因为调用了invalidate().因此请尽量减少调用invaildate()的次数。如果可能的话，尽量调用含有4个参数的invalidate()方法而不是没有参数的invalidate()。没有参数的invalidate会强制重绘整个view。</p>

<p>另外一个非常耗时的操作是请求layout。任何时候执行requestLayout()，会使得Android UI系统去遍历整个View的层级来计算出每一个view的大小。如果找到有冲突的值，它会需要重新计算好几次。另外需要尽量保持View的层级是扁平化的，这样对提高效率很有帮助。</p>

<p>如果你有一个复杂的UI，你应该考虑写一个自定义的ViewGroup来执行他的layout操作。与内置的view不同，自定义的view可以使得程序仅仅测量这一部分，这避免了遍历整个view的层级结构来计算大小。</p>

<h2>Use Hardware Acceleration</h2>

<p>从Android 3.0开始，Android的2D图像系统可以通过GPU来加速。GPU硬件加速可以提高许多程序的性能。但是这并不是说它适合所有的程序。</p>

<p>参考<a href="http://developer.android.com/guide/topics/graphics/hardware-accel.html">Hardware Acceleration</a> 来学习如何在程序中启用加速。</p>

<p>一旦你开启了硬件加速，性能的提示并不一定可以明显察觉到。移动GPU在某些例如scaling,rotating与translating的操作中表现良好。但是对其他一些任务则表现不佳。</p>

<p>在下面的例子中，绘制pie是相对来说比较费时的。解决方案是把pie放到一个子view中，并设置View使用LAYER_TYPE_HARDWARE来进行加速,。
```java
   private class PieView extends View {</p>

<pre><code>   public PieView(Context context) {
       super(context);
       if (!isInEditMode()) {
           setLayerType(View.LAYER_TYPE_HARDWARE, null);
       }
   }

   @Override
   protected void onDraw(Canvas canvas) {
       super.onDraw(canvas);

       for (Item it : mData) {
           mPiePaint.setShader(it.mShader);
           canvas.drawArc(mBounds,
                   360 - it.mEndAngle,
                   it.mEndAngle - it.mStartAngle,
                   true, mPiePaint);
       }
   }

   @Override
   protected void onSizeChanged(int w, int h, int oldw, int oldh) {
       mBounds = new RectF(0, 0, w, h);
   }

   RectF mBounds;
</code></pre>

<p>   }
```
通过这样的修改以后，PieChart.PieView.onDraw()只会在第一次现实的时候被调用。之后，pie chart会被缓存为一张图片，并通过GPU来进行重画不同的角度。</p>

<p>缓存图片到hardware layer会消耗video memory，而video memory又是有限的。基于这样的考虑，仅仅在用户触发scrolling的时候使用LAYER_TYPE_HARDWARE，在其他时候，使用LAYER_TYPE_NONE。</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/optimizing-view.html">http://developer.android.com/training/custom-views/optimizing-view.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training UI - 创建自定义的Views(Lesson 3 - 处理View的交互性)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-3/"/>
    <updated>2013-08-18T15:01:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-3</id>
    <content type="html"><![CDATA[<p>绘制UI仅仅是创建自定义View的一部分。你还需要使得你的View能够以模拟现实世界的方式来进行反馈。Objects应该总是与现实情景能够保持一致。例如，图片不应该突然消失又从另外一个地方出现，因为在现实世界里面不会发生那样的事情。正确的应该是，图片从一个地方移动到另外一个地方。</p>

<p>用户应该可以感受到UI上的微小变化，并对这些变化反馈到现实世界中。例如，当用户做fling(迅速滑动)的动作，应该再滑动开始与结束的时候给用户一定的反馈。</p>

<p>这节课会演示如何使用Android framework的功能来为自定义的View添加那些现实世界中的行为。</p>

<!-- more -->


<h2>Handle Input Gestures</h2>

<p>像许多其他UI框架一样，Android提供一个输入事件模型。用户的动作会转换成触发一些回调函数的事件，你可以重写这些回调方法来定制你的程序应该如何响应用户的输入事件。在Android中最常用的输入事件是touch，它会触发<a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent">onTouchEvent(android.view.MotionEvent)</a>)的回调。重写这个方法来处理touch事件：</p>

<p><code>java
@Override
public boolean onTouchEvent(MotionEvent event) {
  return super.onTouchEvent(event);
}
</code></p>

<p>Touch事件本身并不是特别有用。如今的touch UI定义了touch事件之间的相互作用，叫做gentures。例如tapping,pulling,flinging与zooming。为了把那些touch的源事件转换成gestures, Android提供了<a href="http://developer.android.com/reference/android/view/GestureDetector.html">GestureDetector</a>。</p>

<p>下面演示了如何构造一个GestureDetector。</p>

<p>```java
class mListener extends GestureDetector.SimpleOnGestureListener {
   @Override
   public boolean onDown(MotionEvent e) {</p>

<pre><code>   return true;
</code></pre>

<p>   }
}
mDetector = new GestureDetector(PieChart.this.getContext(), new mListener());
```</p>

<p>不管你是否使用GestureDetector.SimpleOnGestureListener, 你必须总是实现onDown()方法，并返回true。这一步是必须的，因为所有的gestures都是从onDown()开始的。如果你再onDown()里面返回false，系统会认为你想要忽略后续的gesture,那么GestureDetector.OnGestureListener的其他回调方法就不会被执行到了。一旦你实现了GestureDetector.OnGestureListener并且创建了GestureDetector的实例, 你可以使用你的GestureDetector来中止你在onTouchEvent里面收到的touch事件。</p>

<p>```java
@Override
public boolean onTouchEvent(MotionEvent event) {
   boolean result = mDetector.onTouchEvent(event);
   if (!result) {</p>

<pre><code>   if (event.getAction() == MotionEvent.ACTION_UP) {
       stopScrolling();
       result = true;
   }
</code></pre>

<p>   }
   return result;
}
```</p>

<p>当你传递一个touch事件到onTouchEvent()时，若这个个事件没有被认为是gesture中的一部分，它会返回false。你可以执行自定义的gesture-decection代码。</p>

<h2>Create Physically Plausible(貌似可信的) Motion</h2>

<p>Gestures是控制触摸设备的一种强有力的方式，但是除非你能够产出一个合理的触摸反馈，否则将是违反用户直觉的。一个很好的例子是fling手势，用户迅速的在屏幕上移动手指然后抬手离开屏幕。这个手势应该使得UI迅速的按照fling的方向进行滑动，然后慢慢停下来，就像是用户旋转一个飞轮一样。</p>

<p>幸运的是，Android有提供帮助类来模拟这些物理行为。</p>

<p><code>java
@Override
public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
   mScroller.fling(currentX, currentY, velocityX / SCALE, velocityY / SCALE, minX, minY, maxX, maxY);
   postInvalidate();
}
</code></p>

<p><strong>Note:</strong> 尽管速率是通过GestureDetector来计算的，许多开发者感觉使用这个值使得fling动画太快。通常把x与y设置为4到8倍的关系。</p>

<p>```java
if (!mScroller.isFinished()) {</p>

<pre><code>mScroller.computeScrollOffset();
setPieRotation(mScroller.getCurrY());
</code></pre>

<p>}
```</p>

<p><a href="http://developer.android.com/reference/android/widget/Scroller.html">Scroller</a> 类会为你计算滚动位置，但是他不会自动把哪些位置运用到你的view上面。你有责任确保View获取并运用到新的坐标。你有两种方法来实现这件事情：</p>

<ul>
<li>在调用fling()之后执行postInvalidate(), 这是为了确保能强制进行重画。这个技术需要每次在onDraw里面计算过scroll offsets(滚动偏移量)之后调用postInvalidate()。</li>
<li>使用<a href="http://developer.android.com/reference/android/animation/ValueAnimator.html">ValueAnimator</a></li>
</ul>


<p>第二个方法使用起来会稍微复杂一点，但是它更有效率并且避免了不必要的重画的view进行重绘。缺点是ValueAnimator是从API Level 11才有的。因此他不能运用到3.0的系统之前的版本上。</p>

<p><strong> Note: </strong> ValueAnimator虽然是API 11才有的，但是你还是可以在最低版本低于3.0的系统上使用它，做法是在运行时判断当前的API Level，如果低于11则跳过。</p>

<p>```java
 mScroller = new Scroller(getContext(), null, true);
 mScrollAnimator = ValueAnimator.ofFloat(0,1);
 mScrollAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {</p>

<pre><code> @Override
 public void onAnimationUpdate(ValueAnimator valueAnimator) {
     if (!mScroller.isFinished()) {
         mScroller.computeScrollOffset();
         setPieRotation(mScroller.getCurrY());
     } else {
         mScrollAnimator.cancel();
         onScrollFinished();
     }
 }
</code></pre>

<p> });
```</p>

<h2>Make Your Transitions Smooth</h2>

<p>用户期待一个UI之间的切换是能够平滑过渡的。UI元素需要做到渐入淡出来取代突然出现与消失。Android从3.0开始有提供<a href="http://developer.android.com/guide/topics/graphics/prop-animation.html">property animation framework</a>,用来使得平滑过渡变得更加容易。</p>

<p>如果你不想改变View的属性，只是做一些动画的话，你可以使用ObjectAnimator.
<code>java
mAutoCenterAnimator = ObjectAnimator.ofInt(PieChart.this, "PieRotation", 0);
mAutoCenterAnimator.setIntValues(targetAngle);
mAutoCenterAnimator.setDuration(AUTOCENTER_ANIM_DURATION);
mAutoCenterAnimator.start();
</code></p>

<p>如果你想改变的是view的某些基础属性，你可以使用<a href="http://developer.android.com/reference/android/view/ViewPropertyAnimator.html">ViewPropertyAnimator</a> ,它能够同时执行多个属性的动画。
<code>java
animate().rotation(targetAngle).setDuration(ANIM_DURATION).start();
</code></p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/making-interactive.html">http://developer.android.com/training/custom-views/making-interactive.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training UI - 创建自定义的Views(Lesson 2 - 自定义Drawing)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-2/"/>
    <updated>2013-06-30T20:15:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-2</id>
    <content type="html"><![CDATA[<p>自定义view的最重要的一个部分是自定义它的外观。根据你的程序的需求，自定义绘制动作可能简单也可能很复杂。这节课会演示一些最常见的操作。</p>

<h2>Override onDraw()</h2>

<p>重绘一个自定义的view的最重要的步骤是重写onDraw()方法。onDraw()的参数是一个Canvas对象。Canvas类定义了绘制文本，线条，图像与许多其他图形的方法。你可以在onDraw方法里面使用那些方法来创建你的UI。</p>

<p>在你调用任何绘制方法之前，你需要创建一个Paint对象。</p>

<!-- more -->


<h2>Create Drawing Objects</h2>

<p>android.graphics framework把绘制定义为下面两类:</p>

<ul>
<li>绘制什么，由Canvas控制</li>
<li>如何绘制，由Paint控制</li>
</ul>


<p>例如Canvas提供绘制一条直线的方法，Paint提供直线颜色。所以在绘制之前，你需要创建一个或者多个Paint对象。
```java
private void init() {
   mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   mTextPaint.setColor(mTextColor);
   if (mTextHeight == 0) {</p>

<pre><code>   mTextHeight = mTextPaint.getTextSize();
</code></pre>

<p>   } else {</p>

<pre><code>   mTextPaint.setTextSize(mTextHeight);
</code></pre>

<p>   }</p>

<p>   mPiePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   mPiePaint.setStyle(Paint.Style.FILL);
   mPiePaint.setTextSize(mTextHeight);</p>

<p>   mShadowPaint = new Paint(0);
   mShadowPaint.setColor(0xff101010);
   mShadowPaint.setMaskFilter(new BlurMaskFilter(8, BlurMaskFilter.Blur.NORMAL));</p>

<p>   ...
```
刚开始就创建对象是一个重要的优化技巧。Views会被频繁的重新绘制，初始化许多绘制对象需要花费昂贵的代价。在onDraw方法里面创建绘制对象会严重影响到性能并使得你的UI显得卡顿。</p>

<h2>Handle Layout Events</h2>

<p>为了正确的绘制你的view，你需要知道view的大小。复杂的自定义view通常需要根据在屏幕上的大小与形状执行多次layout计算。你不应该去估算这个view在屏幕上的显示大小。即使只有一个程序会使用你的view，仍然是需要处理屏幕大小不同，密度不同，方向不同所带来的影响。</p>

<p>尽管view有许多方法是用来计算大小的，但是大多数是不需要重写的。如果你的view不需要特别的控制它的大小，唯一需要重写的方法是<a href="http://developer.android.com/reference/android/view/View.html#onSizeChanged(int,%20int,%20int,%20int">onSizeChanged()</a>).</p>

<p>onSizeChanged()，当你的view第一次被赋予一个大小时，或者你的view大小被更改时会被执行。在onSizeChanged方法里面计算位置，间距等其他与你的view大小值。
```java</p>

<pre><code>   // Account for padding
   float xpad = (float)(getPaddingLeft() + getPaddingRight());
   float ypad = (float)(getPaddingTop() + getPaddingBottom());

   // Account for the label
   if (mShowText) xpad += mTextWidth;

   float ww = (float)w - xpad;
   float hh = (float)h - ypad;

   // Figure out how big we can make the pie.
   float diameter = Math.min(ww, hh);
</code></pre>

<p><code>
如果你想更加精确的控制你的view的大小，需要重写[onMeasure()](http://developer.android.com/reference/android/view/View.html#onMeasure(int, int))方法。这个方法的参数是View.MeasureSpec，它会告诉你的view的夫控件的大小。那些值被包装成int类型，你可以使用静态方法来获取其中的信息。
</code>java
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
   // Try for a width based on our minimum
   int minw = getPaddingLeft() + getPaddingRight() + getSuggestedMinimumWidth();
   int w = resolveSizeAndState(minw, widthMeasureSpec, 1);</p>

<p>   // Whatever the width ends up being, ask for a height that would let the pie
   // get as big as it can
   int minh = MeasureSpec.getSize(w) - (int)mTextWidth + getPaddingBottom() + getPaddingTop();
   int h = resolveSizeAndState(MeasureSpec.getSize(w) - (int)mTextWidth, heightMeasureSpec, 0);</p>

<p>   setMeasuredDimension(w, h);
}
```
上面的代码有三个重要的事情需要注意:</p>

<ul>
<li>计算的过程有把view的padding考虑进去。这个在后面会提到，这部分是view所控制的。</li>
<li>帮助方法resolveSizeAndState()是用来创建最终的宽高值的。这个方法会通过比较view的需求大小与spec值返回一个合适的View.MeasureSpec值，并传递到onMeasure方法中。</li>
<li>onMeasure()没有返回值。它通过调用setMeasuredDimension()来获取结果。调用这个方法是强制执行的，如果你遗漏了这个方法，会出现运行时异常。</li>
</ul>


<h2>Draw!</h2>

<p>每个view的onDraw都是不同的，但是有下面一些常见的操作：</p>

<ul>
<li>绘制文字使用drawText()。指定字体通过调用setTypeface(), 通过setColor()来设置文字颜色.</li>
<li>绘制基本图形使用drawRect(), drawOval(), drawArc(). 通过setStyle()来指定形状是否需要filled, outlined.</li>
<li>绘制一些复杂的图形，使用Path类. 通过给Path对象添加直线与曲线, 然后使用drawPath()来绘制图形. 和基本图形一样，paths也可以通过setStyle来设置是outlined, filled, both.</li>
<li>通过创建LinearGradient对象来定义渐变。调用setShader()来使用LinearGradient。</li>
<li>通过使用drawBitmap来绘制图片.</li>
</ul>


<p>```java
protected void onDraw(Canvas canvas) {
   super.onDraw(canvas);</p>

<p>   // Draw the shadow
   canvas.drawOval(</p>

<pre><code>       mShadowBounds,
       mShadowPaint
</code></pre>

<p>   );</p>

<p>   // Draw the label text
   canvas.drawText(mData.get(mCurrentItem).mLabel, mTextX, mTextY, mTextPaint);</p>

<p>   // Draw the pie slices
   for (int i = 0; i &lt; mData.size(); ++i) {</p>

<pre><code>   Item it = mData.get(i);
   mPiePaint.setShader(it.mShader);
   canvas.drawArc(mBounds,
           360 - it.mEndAngle,
           it.mEndAngle - it.mStartAngle,
           true, mPiePaint);
</code></pre>

<p>   }</p>

<p>   // Draw the pointer
   canvas.drawLine(mTextX, mPointerY, mPointerX, mPointerY, mTextPaint);
   canvas.drawCircle(mPointerX, mPointerY, mPointerSize, mTextPaint);
}
```</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/custom-drawing.html">http://developer.android.com/training/custom-views/custom-drawing.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training UI - 创建自定义的Views(Lesson 1 - 创建一个View类)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-1/"/>
    <updated>2013-06-30T18:47:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-1</id>
    <content type="html"><![CDATA[<p>设计良好的类总是相似的。它使用一个好用的接口来封装一个特定的功能，它有效的使用CPU与内存，等等。为了成为一个设计良好的类，自定义的view应该:</p>

<ul>
<li>遵守Android标准规则。</li>
<li>提供自定义的风格属性值并能够被Android XML Layout所识别。</li>
<li>发出可访问的事件。</li>
<li>能够兼容Android的不同平台。</li>
</ul>


<p>Android的framework提供了许多基类与XML标签用来帮助你创建一个符合上面要求的View。这节课会介绍如何使用Android framework来创建一个view的核心功能。</p>

<!-- more -->


<h2>Subclass a View</h2>

<p>Android framework里面定义的view类都继承自View。你自定义的view也可以直接继承View，或者你可以通过继承既有的一个子类(例如Button)来节约一点时间。</p>

<p>为了允许Android Developer Tools能够识别你的view，你必须至少提供一个constructor，它包含一个Contenx与一个AttributeSet对象作为参数。这个constructor允许layout editor创建并编辑你的view的实例。
```java
class PieChart extends View {</p>

<pre><code>public PieChart(Context context, AttributeSet attrs) {
    super(context, attrs);
}
</code></pre>

<p>}
```</p>

<h2>Define Custom Attributes</h2>

<p>为了添加一个内置的View到你的UI上，你需要通过XML属性来指定它的样式与行为。为了实现自定义的view的行为，你应该:</p>

<ul>
<li>为你的view在<declare-styleable>资源标签下定义自设的属性</li>
<li>在你的XML layout中指定属性值</li>
<li>在运行时获取属性值</li>
<li>把获取到的属性值应用在你的view上</li>
</ul>


<p>为了定义自设的属性，添加 <declare-styleable> 资源到你的项目中。放置于res/values/attrs.xml文件中。下面是一个attrs.xml文件的示例:
```xml
<resources>
   <declare-styleable name="PieChart"></p>

<pre><code>   &lt;attr name="showText" format="boolean" /&gt;
   &lt;attr name="labelPosition" format="enum"&gt;
       &lt;enum name="left" value="0"/&gt;
       &lt;enum name="right" value="1"/&gt;
   &lt;/attr&gt;
</code></pre>

<p>   </declare-styleable>
</resources>
```
上面的代码声明了2个自设的属性，<strong>showText</strong>与<strong>labelPosition</strong>，它们都归属于PieChart的项目下的styleable实例。styleable实例的名字，通常与自定义的view名字一致。尽管这并没有严格规定要遵守这个convention，但是许多流行的代码编辑器都依靠这个命名规则来提供statement completion。</p>

<p>一旦你定义了自设的属性，你可以在layout XML文件中使用它们。唯一不同的是你自设的属性是归属于不同的命名空间。不是属于http://schemas.android.com/apk/res/android的命名空间，它们归属于http://schemas.android.com/apk/res/[your package name]。例如，下面演示了如何为PieChart使用上面定义的属性：
```xml
&lt;?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:custom="http://schemas.android.com/apk/res/com.example.customviews">
 &lt;com.example.customviews.charting.PieChart</p>

<pre><code> custom:showText="true"
 custom:labelPosition="left" /&gt;
</code></pre>

<p></LinearLayout>
```
为了避免输入长串的namespace名字，示例上面使用了:custom作为别名，你也可以选择其他的名称所为你的namespace。</p>

<p>请注意，如果你的view是一个inner class，你必须指定这个view的outer class。同样的，如果PieChart有一个inner class叫做PieView。为了使用这个类中自设的属性，你应该使用com.example.customviews.charting.PieChart$PieView.</p>

<h2>Apply Custom Attributes</h2>

<p>当view从XML layout被创建的时候，在xml标签下的属性值都是从resource下读取出来并传递到view的constructor作为一个AttributeSet参数。尽管可以从AttributeSet中直接读取数值，可是这样做有些弊端（<em>没有看懂下面的两个原因</em>）：</p>

<ul>
<li>拥有属性的资源并没有经过分解</li>
<li>Styles并没有运用上</li>
</ul>


<p>取而代之的是，通过obtainStyledAttributes()来获取属性值。这个方法会传递一个<a href="http://developer.android.com/reference/android/content/res/TypedArray.html">TypedArray</a>对象，它是间接referenced并且styled的。</p>

<p>请看下面的示例：
```java
public PieChart(Context context, AttributeSet attrs) {
   super(context, attrs);
   TypedArray a = context.getTheme().obtainStyledAttributes(</p>

<pre><code>    attrs,
    R.styleable.PieChart,
    0, 0);
</code></pre>

<p>   try {</p>

<pre><code>   mShowText = a.getBoolean(R.styleable.PieChart_showText, false);
   mTextPos = a.getInteger(R.styleable.PieChart_labelPosition, 0);
</code></pre>

<p>   } finally {</p>

<pre><code>   a.recycle();
</code></pre>

<p>   }
}
```
清注意TypedArray对象是一个shared资源，必须被在使用后进行回收。</p>

<h2>Add Properties and Events</h2>

<p>Attributes是一个强大的控制view的行为与外观的方法，但是他们仅仅能够在view被初始化的时候被读取到。为了提供一个动态的行为，需要暴露出一些合适的getter 与setter方法。下面的代码演示了如何使用这个技巧:
```java
public boolean isShowText() {
   return mShowText;
}</p>

<p>public void setShowText(boolean showText) {
   mShowText = showText;
   invalidate();
   requestLayout();
}
```
请注意，在setShowText方法里面有调用<a href="http://developer.android.com/reference/android/view/View.html#invalidate(">invalidate()</a>) and <a href="http://developer.android.com/reference/android/view/View.html#requestLayout(">requestLayout()</a>). 当view的某些内容发生变化的时候，需要调用invalidate来通知系统对这个view进行redraw，当某些元素变化会引起组件大小变化时，需要调用requestLayout方法。</p>

<p>自定义的view也需要能够支持响应事件的监听器。例如，PieChart暴露了一个自设的事件OnCurrentItemChanged来通知监听器，用户已经切换了焦点到一个新的组件上。</p>

<p>我们很容易忘记了暴露属性与事件，特别是当你是这个view的唯一用户时。请花费一些时间来仔细定义你的view的交互。一个好的规则是总是暴露任何属性与事件。</p>

<h2>Design For Accessibility</h2>

<p>Your custom view should support the widest range of users. This includes users with disabilities that prevent them from seeing or using a touchscreen. To support users with disabilities, you should:</p>

<ul>
<li>Label your input fields using the android:contentDescription attribute</li>
<li>Send accessibility events by calling sendAccessibilityEvent() when appropriate.</li>
<li>Support alternate controllers, such as D-pad and trackball</li>
</ul>


<p>For more information on creating accessible views, see <a href="http://developer.android.com/guide/topics/ui/accessibility/apps.html#custom-views">Making Applications Accessible</a> in the Android Developers Guide.</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/create-view.html">http://developer.android.com/training/custom-views/create-view.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training UI - 创建自定义的Views(Lesson 0 - 章节概览)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-0/"/>
    <updated>2013-06-30T18:23:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-0</id>
    <content type="html"><![CDATA[<p>Android的framework有大量的Views用来与用户进行交互并显示不同种类的数据。但是有时候你的程序有个特殊的需求，而Android内置的views组件并不能实现。这一章节会演示如何创建你自己的views，并使得它们是robust与reusable的。</p>

<p><strong>Dependencies and Prerequisites</strong></p>

<p>Android 2.1 (API level 7) or higher</p>

<p><strong>YOU should also read</strong></p>

<ul>
<li><a href="http://developer.android.com/guide/topics/ui/custom-components.html">Custom Components</a></li>
<li><a href="http://developer.android.com/guide/topics/ui/ui-events.html">Input Events</a></li>
<li><a href="http://developer.android.com/guide/topics/graphics/prop-animation.html">Property Animation</a></li>
<li><a href="http://developer.android.com/guide/topics/graphics/hardware-accel.html">Hardware Acceleration</a></li>
<li><a href="http://developer.android.com/guide/topics/ui/accessibility/index.html">Accessibility</a> developer guide</li>
</ul>


<p><strong>Try it out</strong></p>

<p>Download the sample<br/>
<a href="http://developer.android.com/shareables/training/CustomView.zip">CustomView.zip</a></p>

<!-- more -->


<h2>Lesson</h2>

<p><strong>(1)创建一个View类</strong></p>

<p>Create a class that acts like a built-in view, with custom attributes and support from the ADT layout editor.</p>

<p><strong>(2)自定义Drawing</strong></p>

<p>Make your view visually distinctive using the Android graphics system.</p>

<p><strong>(3)使得View是可交互的</strong></p>

<p>Users expect a view to react smoothly and naturally to input gestures. This lesson discusses how to use gesture detection, physics, and animation to give your user interface a professional feel.</p>

<p><strong>(4)优化View</strong></p>

<p>No matter how beautiful your UI is, users won't love it if it doesn't run at a consistently high frame rate. Learn how to avoid common performance problems, and how to use hardware acceleration to make your custom drawings run faster.</p>

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/index.html">http://developer.android.com/training/custom-views/index.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
</feed>
