<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android:Training:Performance | 四方城]]></title>
  <link href="http://kesenhoo.github.com/blog/categories/android-training-performance/atom.xml" rel="self"/>
  <link href="http://kesenhoo.github.com/"/>
  <updated>2013-09-01T20:15:37+08:00</updated>
  <id>http://kesenhoo.github.com/</id>
  <author>
    <name><![CDATA[Kesen Hoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Training Performance - 代码性能优化小技巧]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/04/06/android-training-performance-tips/"/>
    <updated>2013-04-06T18:27:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/04/06/android-training-performance-tips</id>
    <content type="html"><![CDATA[<h2>Performance Tips</h2>

<p><img src="/images/articles/performance_improve.jpg"></p>

<p>这篇文章主要是介绍了一些小细节的优化技巧，当这些小技巧综合使用起来的时候，对于整个App的性能提升还是有作用的，只是不能较大幅度的提升性能而已。选择合适的算法与数据结构才应该是你首要考虑的因素，在这篇文章中不会涉及这方面。你应该使用这篇文章中的小技巧作为平时写代码的习惯，这样能够提升代码的效率。</p>

<!-- more -->


<p>通常来说，高效的代码需要满足下面两个规则：</p>

<ul>
<li>不要做冗余的动作</li>
<li>如果能避免，尽量不要分配内存</li>
</ul>


<p>代码的执行效果会受到设备CPU,设备内存,系统版本等诸多因素的影响。为了确保代码能够在不同设备上都运行良好，需要最大化代码的效率。</p>

<h3>避免创建不必要的对象</h3>

<p>虽然GC可以回收不用的对象，可是为这些对象分配内存，并回收它们同样是需要耗费资源的。<br/>
因此请尽量避免创建不必要的对象，有下面一些例子来说明这个问题：</p>

<ul>
<li>如果你需要返回一个String对象，并且你知道它最终会需要连接到一个StringBuffer，请修改你的实现方式，避免直接进行连接操作，应该采用创建一个临时对象来做这个操作.</li>
<li>当从输入的数据集中抽取出Strings的时候，尝试返回原数据的substring对象，而不是创建一个重复的对象。</li>
</ul>


<p>一个稍微激进点的做法是把所有多维的数据分解成1维的数组:</p>

<ul>
<li>一组int数据要比一组Integer对象要好很多。可以得知，两组1维数组要比一个2维数组更加的有效率。同样的，这个道理可以推广至其他原始数据类型。</li>
<li>如果你需要实现一个数组用来存放(Foo,Bar)的对象，尝试分解为Foo[]与Bar[]要比(Foo,Bar)好很多。(当然，为了某些好的API的设计，可以适当做一些妥协。但是在自己的代码内部，你应该多多使用分解后的容易。</li>
</ul>


<p>通常来说，需要避免创建更多的对象。更少的对象意味者更少的GC动作，GC会对用户体验有比较直接的影响。</p>

<h3>选择Static而不是Virtual</h3>

<p>如果你不需要访问一个对象的值域,请保证这个方法是static类型的,这样方法调用将快15%-20%。这是一个好的习惯，因为你可以从方法声明中得知调用无法改变这个对象的状态。</p>

<h3>常量声明为Static Final</h3>

<p>先看下面这种声明的方式
<code>java
static int intVal = 42;
static String strVal = "Hello, world!";
</code>
编译器会使用<clinit>方法来初始化上面的值，之后访问的时候会需要先到它那里查找，然后才返回数据。我们可以使用static final来提升性能：
<code>java
static final int intVal = 42;
static final String strVal = "Hello, world!";
</code>
这时再也不需要上面的那个方法来做多余的查找动作了。<br/>
<strong> 所以，请尽可能的为常量声明为static final类型的。</strong></p>

<h3>避免内部的Getters/Setters</h3>

<p>像C++等native language,通常使用getters(i = getCount())而不是直接访问变量(i = mCount).这是编写C++的一种优秀习惯，而且通常也被其他面向对象的语言所采用，例如C#与Java，因为编译器通常会做inline访问，而且你需要限制或者调试变量，你可以在任何时候在getter/setter里面添加代码。<br/>
然而，在Android上，这是一个糟糕的写法。Virtual method的调用比起直接访问变量要耗费更多。那么合理的做法是：在面向对象的设计当中应该使用getter/setter，但是在类的内部你应该直接访问变量.<br/>
没有JIT(Just In Time Compiler)时，直接访问变量的速度是调用getter的3倍。有JIT时,直接访问变量的速度是通过getter访问的7倍。<br/>
请注意，如果你使用<a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>, 你可以获得同样的效果，因为ProGuard可以为你inline accessors.</p>

<h3>使用增强的For循环</h3>

<p>请比较下面三种循环的方法：</p>

<p>```java
static class Foo {</p>

<pre><code>int mSplat;
</code></pre>

<p>}</p>

<p>Foo[] mArray = ...</p>

<p>public void zero() {</p>

<pre><code>int sum = 0;
for (int i = 0; i &lt; mArray.length; ++i) {
    sum += mArray[i].mSplat;
}
</code></pre>

<p>}</p>

<p>public void one() {</p>

<pre><code>int sum = 0;
Foo[] localArray = mArray;
int len = localArray.length;

for (int i = 0; i &lt; len; ++i) {
    sum += localArray[i].mSplat;
}
</code></pre>

<p>}</p>

<p>public void two() {</p>

<pre><code>int sum = 0;
for (Foo a : mArray) {
    sum += a.mSplat;
}
</code></pre>

<p>}
```</p>

<ul>
<li>zero()是最慢的，因为JIT没有办法对它进行优化。</li>
<li>one()稍微快些。</li>
<li>two() 在没有做JIT时是最快的，可是如果经过JIT之后，与方法one()是差不多一样快的。它使用了增强的循环方法for-each。</li>
</ul>


<p>所以请尽量使用for-each的方法，但是对于ArrayList，请使用方法one()。</p>

<h3>使用包级访问而不是内部类的私有访问</h3>

<p>参考下面一段代码</p>

<p>```java
public class Foo {</p>

<pre><code>private class Inner {
    void stuff() {
        Foo.this.doStuff(Foo.this.mValue);
    }
}

private int mValue;

public void run() {
    Inner in = new Inner();
    mValue = 27;
    in.stuff();
}

private void doStuff(int value) {
    System.out.println("Value is " + value);
}
</code></pre>

<p>}
```
Foo$Inner里面有访问外部类的一个变量。这样的做法会给系统造成额外的麻烦，请尽量避免。</p>

<h3>避免使用float类型</h3>

<p>Android系统中float类型的数据存取速度是int类型的一半，尽量优先采用int类型。</p>

<h3>使用库函数</h3>

<p>尽量使用System.arraycopy()等一些封装好的库函数，它的效率是手动编写copy实现的9倍多。</p>

<p><strong> Tip: Also see Josh Bloch's Effective Java, item 47. </strong></p>

<h3>谨慎使用native函数</h3>

<p>当你需要把已经存在的native code迁移到Android，请谨慎使用JNI。如果你要使用JNI,请学习<a href="http://developer.android.com/guide/practices/jni.html">JNI Tips</a></p>

<h3>关于性能的误区</h3>

<p>在没有做JIT之前，使用一种确切的数据类型确实要比抽象的数据类型速度要更有效率。(例如，使用HashMap要比Map效率更高。) 有误传效率要高一倍，实际上只是6%左右。而且，在JIT之后，他们直接并没有大多差异。</p>

<h3>关于测量</h3>

<p>上面文档中出现的数据是Android的实际运行效果。我们可以用<a href="http://developer.android.com/tools/debugging/debugging-tracing.html">Traceview</a> 来测量，但是测量的数据是没有经过JIT优化的，所以实际的效果应该是要比测量的数据稍微好些。</p>

<p>关于如何测量与调试，还可以参考下面两篇文章：</p>

<ul>
<li><a href="http://developer.android.com/tools/debugging/debugging-tracing.html">Profiling with Traceview and dmtracedump</a></li>
<li><a href="http://developer.android.com/tools/debugging/systrace.html">Analysing Display and Performance with Systrace</a></li>
</ul>


<hr />

<p><strong>文章学习自http://developer.android.com/guide/components/processes-and-threads.html</strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training Performance - 优化电池续航能力(Lesson 4 - 判断并监测网络连接状态)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/24/android-training-performance-optimiizing-battery-life-lesson-4/"/>
    <updated>2012-03-24T16:37:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/24/android-training-performance-optimiizing-battery-life-lesson-4</id>
    <content type="html"><![CDATA[<h2>Manipulating Broadcast Receivers On Demand[按需操控广播接收者]</h2>

<p>简单的方法是为我们监测的状态创建一个BroadcastReceiver，并在manifest中为每一个状态进行注册监听。然后，每一个Receiver根据当前设备的状态来简单重新安排下一步执行的任务。[这句话感觉理解有点问题]</p>

<p>上面那个方法的副作用是，设备会在每次收到广播都被唤醒，这有点超出期望，因为有些广播是不希望唤醒设备的。</p>

<p>更好的方法是根据程序运行情况开启或者关闭广播接收者。这样的话，那些在manifest中注册的receivers仅仅会在需要的时候才被激活。</p>

<!-- More -->


<h2>1)Toggle and Cascade State Change Receivers to Improve Efficiency[切换是否开启这些状态Receivers来提高效率]</h2>

<p>我们可以使用PackageManager来切换任何一个在mainfest里面定义好的组件的开启状态。
可以使用下面的方法来开启或者关闭任何一个broadcast receiver:
```java
ComponentName receiver = new ComponentName(context, myReceiver.class);</p>

<p>PackageManager pm = context.getPackageManager();</p>

<p>pm.setComponentEnabledSetting(receiver,</p>

<pre><code>    PackageManager.COMPONENT_ENABLED_STATE_ENABLED,  
    PackageManager.DONT_KILL_APP)  
</code></pre>

<p>```</p>

<p>使用这种技术，如果我们判断到网络链接已经断开，那么可以在这个时候关闭除了connectivity-change的之外的所有Receivers。</p>

<p>相反的，一旦重新建立网络连接，我们可以停止监听网络链接的改变。而仅仅在执行需要联网的操作之前判断当前网络是否可以用即可。</p>

<p>你可以使用上面同样的技术来暂缓一个需要带宽的下载操作。可以开启receiver来监听是否连接上Wi-Fi来重新开启下载的操作。</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/monitoring-device-state/manifest-receivers.html">http://developer.android.com/training/monitoring-device-state/manifest-receivers.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training Performance - 优化电池续航能力(Lesson 3 - 判断并监测网络连接状态)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-3/"/>
    <updated>2012-03-23T21:09:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-3</id>
    <content type="html"><![CDATA[<h2>Determining and Monitoring the Connectivity Status[判断并监测网络连接状态]</h2>

<p>通常我们会有一些计划的任务，比如重复闹钟，后台定时启动的任务等。但是如果我们的网络没有连接上，那么就没有必要启动那些需要连接网络的任务。我们可以使用ConnectivityManager来检查是否连接上网络，是何种网络。[通过网络的连接状况改变，相应的改变app的行为，减少无谓的操作，从而延长设备的续航能力]</p>

<h2>1)Determine if You Have an Internet Connection[判断当前是否有网络连接]</h2>

<p>显然如果没有网络连接，那么就没有必要做那些需要联网的事情。下面是一个检查是否有网络连接的例子：</p>

<!-- More -->


<p>```java
ConnectivityManager cm =</p>

<pre><code>    (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  
</code></pre>

<p>NetworkInfo activeNetwork = cm.getActiveNetworkInfo();<br/>
boolean isConnected = activeNetwork.isConnectedOrConnecting();<br/>
```</p>

<h2>2)Determine the Type of your Internet Connection[判断连接网络的类型]</h2>

<p>设备通常可以有移动网络，WiMax,Wi-Fi与以太网连接等类型。通过查询当前活动的网络类型，可以根据网络的带宽做适合的事情。
<code>java
boolean isWiFi = activeNetwork.getType() == ConnectivityManager.TYPE_WIFI;  
</code>
使用移动网络会比Wi-Fi花费代价更大，所以多数情况下，在移动网络情况下减少一些数据的获取操作，同样，一些像下载文件等操作需要等有Wi-Fi的情况下才开始。
如果已经关闭了更新操作，那么需要监听网络切换，当有比较好的网络时重新启动之前取消的操作。</p>

<h2>3)Monitor for Changes in Connectivity[监测网络连接的切换]</h2>

<p>当网络连接被改变的时候， ConnectivityManager会broadcast CONNECTIVITY_ACTION ("android.net.conn.CONNECTIVITY_CHANGE") 的动作消息。
我们需要在manifest文件里面注册一个带有像下面action一样的Receiver:
<code>xml
&lt;action android:name="android.net.conn.CONNECTIVITY_CHANGE"/&gt;  
</code>
通常网络的改变会比较频繁，我们没有必要不间断的注册监听网络的改变。通常我们会在有Wi-Fi的时候进行下载动作，若是网络切换到移动网络则通常会暂停当前下载，监听到恢复到Wi-Fi的情况则开始恢复下载。[也就是说为了完成某个单元操作而进行监测]</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/monitoring-device-state/connectivity-monitoring.html">http://developer.android.com/training/monitoring-device-state/connectivity-monitoring.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training Performance - 优化电池续航能力(Lesson 2 - 判断设备的停驻模式)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-2/"/>
    <updated>2012-03-23T19:53:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-2</id>
    <content type="html"><![CDATA[<h2>Determining and Monitoring the Docking State and Type[判断并监测设备的停驻状态与类型]</h2>

<p>在上一课中有这样一句话：In many cases, the act of charging a device is coincident with putting it into a dock.</p>

<p>在很多情况下，为设备充电也是一种设备停驻方式</p>

<p>Android设备能够有好几种停驻状态。包括车载模式，家庭模式与数字对战模拟模式[这个有点奇怪]。停驻状态通常与充电状态是非常密切关联的。</p>

<p>停驻模式会如何影响更新频率这完全取决于app的设置。我们可以选择在桌面模式下频繁的更新数据也可以选择在车载模式下关闭更新操作。相反的，你也可以选择在车载模式下最大化更新交通数据频率。</p>

<!-- More -->


<p>停驻状态也是以sticky intent方式来广播的，这样可以通过查询intent里面的数据来判断是否目前处于停驻状态，处于哪种停驻状态。[上面的这些操作都可以一定程度上优化电池的使用，提升设备的续航能力]</p>

<h2>1)Determine the Current Docking State[判断当前停驻状态]</h2>

<p>因为停驻状态的广播内容也是sticky intent(<code>ACTION_DOCK_EVENT</code>)，所以不需要注册BroadcastReceiver。
```java
IntentFilter ifilter = new IntentFilter(Intent.ACTION_DOCK_EVENT);<br/>
Intent dockStatus = context.registerReceiver(null, ifilter);</p>

<p>int dockState = battery.getIntExtra(EXTRA_DOCK_STATE, -1);<br/>
boolean isDocked = dockState != Intent.EXTRA_DOCK_STATE_UNDOCKED;<br/>
```</p>

<h2>2)Determine the Current Dock Type[判断当前停驻类型]</h2>

<p>一共有下面4中停驻类型：</p>

<ul>
<li>Car</li>
<li>Desk</li>
<li>Low-End (Analog) Desk：API level 11开始才有</li>
<li>High-End (Digital) Desk：API level 11开始才有</li>
</ul>


<p>通常仅仅需要像下面一样检查当前停驻类型：
```java
boolean isCar = dockState == EXTRA_DOCK_STATE_CAR;<br/>
boolean isDesk = dockState == EXTRA_DOCK_STATE_DESK ||</p>

<pre><code>             dockState == EXTRA_DOCK_STATE_LE_DESK ||  
             dockState == EXTRA_DOCK_STATE_HE_DESK;  
</code></pre>

<p>```</p>

<h2>3)Monitor for Changes in the Dock State or Type[监测停驻状态或者类型的改变]</h2>

<p>只需要像下面一样注册一个监听器：
<code>xml
&lt;action android:name="android.intent.action.ACTION_DOCK_EVENT"/&gt;
</code>
Receiver获取到信息后可以像上面那样检查需要的数据。</p>

<p><strong>Ps:这一课主要是强调了需要在车载模式等停驻状态下的处理电量优化的情况。某些特定的停驻模式下，意味这其他一些操作可以停止，这样来获取更长的续航能力。</strong></p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/monitoring-device-state/docking-monitoring.html">http://developer.android.com/training/monitoring-device-state/docking-monitoring.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training Performance - 优化电池续航能力(Lesson 1 - 监测设备的电量与充电状态)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-1/"/>
    <updated>2012-03-23T18:28:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-1</id>
    <content type="html"><![CDATA[<p>显然，手持设备的电量需要引起很大的重视。通过这一系列的课程，可以学会如何根据设备电池状态来改变App的某些行为与功能。</p>

<p>通过在断开连接时关闭后台服务，在电量减少时减少更新数据的频率等等操作可以在不影响用户体验的前提下，确保App对电池寿命的影响减到最小。</p>

<h2>Monitoring the Battery Level and Charging State[监测电池的电量与充电状态]</h2>

<p>当你想通过改变后台更新操作的频率来减少对电池寿命的影响，那么先手需要检查当前电量与充电状态。</p>

<p>电池的电量与是否在充电状态会影响到一个程序去执行更新的操作。当设备在进行AC充电时，程序做任何操作都不太会受到电量的影响，所以在大多数时候，我们可以在设备充电时做很多想做的事情（刷新数据，下载文件等），相反的，如果设备没有在充电状态，那么我们就需要尽量减少设备的更新操作等来延长电池的续航能力。</p>

<p>同样的，我们可以通过检查电池目前的电量来减少甚至停止一些更新操作。</p>

<!-- More -->


<h2>1)Determine the Current Charging State[判断当前充电状态]</h2>

<p><a href="http://developer.android.com/reference/android/os/BatteryManager.html">BatteryManager</a>会广播一个带有电池与充电详情的Sticky Intent。【关于Sticky intent有不清楚的，请参考http://developer.android.com/guide/topics/fundamentals/services.html中对带有sticky的service是如何解释的】</p>

<p>因为广播的是一个sticky intent，那么不需要注册BroadcastReceiver。仅仅只需要简单的call一个参null参数的regiserReceiver()方法。
<code>java
IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);  
Intent batteryStatus = context.registerReceiver(null, ifilter);  
</code>
我们可以从intent里面提取出当前的充电状态与是否通过USB或者AC充电器来充电。
```java
// Are we charging / charged?<br/>
int status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);<br/>
boolean isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||</p>

<pre><code>                 status == BatteryManager.BATTERY_STATUS_FULL;  
</code></pre>

<p>// How are we charging?<br/>
int chargePlug = battery.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);<br/>
boolean usbCharge = chargePlug == BATTERY_PLUGGED_USB;<br/>
boolean acCharge = chargePlug == BATTERY_PLUGGED_AC;<br/>
```
我们可以从intent里面提取出当前的充电状态与是否通过USB或者AC充电器来充电。通常的做法是在使用AC充电时最大化后台更新操作，在使用USB充电时降低更新操作，不在充电状态时，最小化更新操作。</p>

<h2>2)Monitor Changes in Charging State[监测充电状态的改变]</h2>

<p>充电状态随时可能改变，显然，需要通过检查充电状态的改变来通知App改变某些行为。</p>

<p>BatteryManager会在设备连接或者断开充电器的时候广播一个action。接收到这个广播是很重要的，即使我们的app没有在运行。特别是在是否接收这个广播会对app决定后台更新频率产生影响的前提下。因此很有必要在manifest文件里面注册一个监听来接收ACTION_POWER_CONNECTED and ACTION_POWER_DISCONNECTED的intent。
```xml
<receiver android:name=".PowerConnectionReceiver"><br/>
  <intent-filter></p>

<pre><code>&lt;action android:name="android.intent.action.ACTION_POWER_CONNECTED"/&gt;  
&lt;action android:name="android.intent.action.ACTION_POWER_DISCONNECTED"/&gt;  
</code></pre>

<p>  </intent-filter><br/>
</receiver><br/>
<code>
</code>java
public class PowerConnectionReceiver extends BroadcastReceiver {</p>

<pre><code>@Override  
public void onReceive(Context context, Intent intent) {   
    int status = intent.getIntExtra(BatteryManager.EXTRA_STATUS, -1);  
    boolean isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||  
                        status == BatteryManager.BATTERY_STATUS_FULL;  

    int chargePlug = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);  
    boolean usbCharge = chargePlug == BATTERY_PLUGGED_USB;  
    boolean acCharge = chargePlug == BATTERY_PLUGGED_AC;  
}  
</code></pre>

<p>}<br/>
```</p>

<h2>3)Determine the Current Battery Level[判断当前电池电量]</h2>

<p>在一些情况下，获取到当前电池电量也是很有帮助的。我们可以在获知电量少于某个级别的时候减少某些后台操作。
我们可以从获取到电池状态的intent中提取出电池电量与容量等信息。
<code>java
int level = battery.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);  
int scale = battery.getIntExtra(BatteryManager.EXTRA_SCALE, -1);  
float batteryPct = level / (float)scale;  
</code></p>

<h2>4)Monitor Significant Changes in Battery Level[检测电量的有效改变]</h2>

<p>虽然我们可以轻易的不间断的检测电池状态，但是这并不是必须的。通常来说，我们只需要检测电量的某些有效改变，特别是设备在进入或者离开低电量状态的时候。下面的例子，电量监听器只会在设备电量进入低电量或者离开低电量的时候才会触发，仅仅需要监听ACTION_BATTERY_LOW与ACTION_BATTERY_OKAY.
<code>xml
&lt;receiver android:name=".BatteryLevelReceiver"&gt;  
&lt;intent-filter&gt;  
  &lt;action android:name="android.intent.action.ACTION_BATTERY_LOW"/&gt;  
  &lt;action android:name="android.intent.action.ACTION_BATTERY_OKAY"/&gt;  
  &lt;/intent-filter&gt;  
&lt;/receiver&gt;
</code><br/>
通常我们都需要在进入低电量的情况下，关闭所有后台程序来维持设备的续航，因为这个时候做任何的更新等操作都是无谓的，很可能在你还没有来的及操作刚才更新的内容的时候就自动关机了。
In many cases, the act of charging a device is coincident with putting it into a dock. The next lesson shows you how to determine the current dock state and monitor for changes in device docking.</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/monitoring-device-state/battery-monitoring.html">http://developer.android.com/training/monitoring-device-state/battery-monitoring.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
</feed>
