<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android:Training:Performance | 四方城]]></title>
  <link href="http://kesenhoo.github.com/blog/categories/android-training-performance/atom.xml" rel="self"/>
  <link href="http://kesenhoo.github.com/"/>
  <updated>2013-12-01T14:19:42+08:00</updated>
  <id>http://kesenhoo.github.com/</id>
  <author>
    <name><![CDATA[Kesen Hoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 管理应用的内存]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/10/19/android-training-performance-managing_your_app_memory/"/>
    <updated>2013-10-19T15:18:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/10/19/android-training-performance-managing_your_app_memory</id>
    <content type="html"><![CDATA[<p>Random Access Memory(RAM)在任何软件开发环境中都是一个很宝贵的资源。这一点在物理内存通常很有限的移动操作系统上，显得尤为突出。尽管Android的Dalvik虚拟机扮演了常规的垃圾回收的角色，但这并不意味着你可以忽视app的内存分配与释放的时机与地点。</p>

<p>为了GC能够从你的app中及时回收内存，你需要避免Memory Leaks(这通常由引用的不能释放而导致)并且在适当的时机(下面会讲到的lifecycle callbacks)来释放引用。对于大多数apps来说，Dalvik的GC会自动把离开活动线程的对象进行回收。</p>

<p>这篇文章会解释Android如何管理app的进程与内存分配，并且你可以在开发Android应用的时候主动的减少内存的使用。关于Java的资源管理机制，请参加其它书籍或者线上材料。如果你正在寻找如何分析你的内存使用情况的文章，请参考这里<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a>。</p>

<!-- More -->


<h2>第1部分:Android是如何管理内存的</h2>

<p>Android并没有提供内存的交换区(Swap space)，但是它有使用<a href="http://en.wikipedia.org/wiki/Paging">paging</a>与<a href="http://en.wikipedia.org/wiki/Memory-mapped_files">memory-mapping(mmapping)</a>的机制来管理内存。这意味着任何你修改的内存(无论是通过分配新的对象还是访问到mmaped pages的内容)都会贮存在RAM中，而且不能被paged out。因此唯一完整释放内存的方法是释放那些你可能hold住的对象的引用，这样使得它能够被GC回收。只有一种例外是：如果系统想要在其他地方进行reuse。</p>

<h3>1)共享内存</h3>

<p>Android通过下面几个方式在不同的Process中来共享RAM:</p>

<ul>
<li>每一个app的process都是从同一个被叫做Zygote的进程中fork出来的。Zygote进程在系统启动并且载入通用的framework的代码与资源之后开始启动。为了启动一个新的程序进程，系统会fork Zygote进程生成一个新的process，然后在新的process中加载并运行app的代码。这使得大多数的RAM pages被用来分配给framework的代码与资源，并在应用的所有进程中进行共享。</li>
<li>大多数static的数据被mmapped到一个进程中。这不仅仅使得同样的数据能够在进程间进行共享，而且使得它能够在需要的时候被paged out。例如下面几种static的数据:

<ul>
<li>Dalvik code (by placing it in a pre-linked .odex file for direct mmapping</li>
<li>App resources (by designing the resource table to be a structure that can be mmapped and by aligning the zip entries of the APK)</li>
<li>Traditional project elements like native code in .so files.</li>
</ul>
</li>
<li>在许多地方，Android通过显式的分配共享内存区域(例如ashmem或者gralloc)来实现一些动态RAM区域的能够在不同进程间的共享。例如，window surfaces在app与screen compositor之间使用共享的内存，cursor buffers在content provider与client之间使用共享的内存。</li>
</ul>


<p>关于如何查看app所使用的共享内存，请查看<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></p>

<h3>2)分配与回收内存</h3>

<p>这里有下面几点关于Android如何分配与回收内存的事实：</p>

<ul>
<li>每一个进程的Dalvik heap都有一个限制的虚拟内存范围。这就是逻辑上讲的heap size，它可以随着需要进行增长，但是会有一个系统为它所定义的上限。</li>
<li>逻辑上讲的heap size和实际物理上使用的内存数量是不等的，Android会计算一个叫做Proportional Set Size(PSS)的值，它记录了那些和其他进程进行共享的内存大小。（假设共享内存大小是10M，一共有20个Process在共享使用，根据权重，可能认为其中有0.3M才能真正算是你的进程所使用的）</li>
<li>Dalvik heap与逻辑上的heap size不吻合，这意味着Android并不会去做heap中的碎片整理用来关闭空闲区域。Android仅仅会在heap的尾端出现不使用的空间时才会做收缩逻辑heap size大小的动作。但是这并不是意味着被heap所使用的物理内存大小不能被收缩。在垃圾回收之后，Dalvik会遍历heap并找出不使用的pages，然后使用madvise把那些pages返回给kernal。因此，成对的allocations与deallocations大块的数据可以使得物理内存能够被正常的回收。然而，回收碎片化的内存则会使得效率低下很多，因为那些碎片化的分配页面也许会被其他地方所共享到。</li>
</ul>


<h3>3)限制应用的内存</h3>

<p>为了维持多任务的功能环境，Android为每一个app都设置了一个硬性的heap size限制。准确的heap size限制随着不同设备的不同RAM大小而各有差异。如果你的app已经到了heap的限制大小并且再尝试分配内存的话，会引起OutOfMemoryError的错误。</p>

<p>在一些情况下，你也许想要查询当前设备的heap size限制大小是多少，然后决定cache的大小。可以通过getMemoryClass()来查询。这个方法会返回一个整数，表明你的app heap size限制是多少megabates。</p>

<h3>4)切换应用</h3>

<p>当用户在不同应用之间进行切换的时候，不是使用交换空间的办法。Android会把那些不包含foreground组件的进程放到LRU cache中。例如，当用户刚开始启动了一个应用，这个时候为它创建了一个进程，但是当用户离开这个应用，这个进程并没有离开。系统会把这个进程放到cache中，如果用户后来回到这个应用，这个进程能够被resued，从而实现app的快速切换。</p>

<p>如果你的应用有一个被缓存的进程，它被保留在内存中，并且当前不再需要它了，这会对系统的整个性能有影响。因此当系统开始进入低内存状态时，它会由系统根据LRU的规则与其他因素选择杀掉某些进程，为了保持你的进程能够尽可能长久的被cached，请参考下面的章节学习何时释放你的引用。</p>

<p>更对关于不在foreground的进程是Android是如何决定kill掉哪一类进程的问题，请参考<a href="http://developer.android.com/guide/components/processes-and-threads.html">Processes and Threads</a>.</p>

<h2>第2部分:你的应用该如何管理内存</h2>

<p>你应该在开发过程的每一个阶段都考虑到RAM的有限性，甚至包括在开发开始之前的设计阶段。有许多种设计与实现方式，他们有着不同的效率，尽管是对同样一种技术的不断组合与演变。</p>

<p>为了使得你的应用效率更高，你应该在设计与实现代码时，遵循下面的技术要点。</p>

<h3>1)珍惜Services资源</h3>

<p>如果你的app需要在后台使用service，除非它被触发执行一个任务，否则其他时候都应该是非运行状态。同样需要注意当这个service已经完成任务后停止service失败引起的泄漏。</p>

<p>当你启动一个service，系统会倾向为了这个Service而一直保留它的Process。这使得process的运行代价很高，因为系统没有办法把Service所占用的RAM让给其他组件或者被Paged out。这减少了系统能够存放到LRU缓存当中的process数量，它会影响app之间的切换效率。它甚至会导致系统内存使用不稳定，从而无法继续Hold住
所有目前正在运行的Service。</p>

<p>限制你的service的最好办法是使用<a href="http://developer.android.com/reference/android/app/IntentService.html">IntentService</a>, 它会在处理完扔给它的intent任务之后尽快结束自己。更多信息，请阅读<a href="http://developer.android.com/training/run-background-service/index.html">Running in a Background Service</a>.</p>

<p>当一个service已经不需要的时候还继续保留它，这对Android应用的内存管理来说是<strong>最糟糕的错误之一</strong>。因此千万不要贪婪的使得一个Service持续保留。不仅仅是因为它会使得你的app因RAM的限制而性能糟糕，而且用户会发现那些行为奇怪的app并且卸载它。</p>

<h3>2)当你的UI隐藏时释放内存</h3>

<p>当用户切换到其它app并且你的app UI不再可见时，你应该释放你的UI上占用的任何资源。在这个时候释放UI资源可以显著的增加系统cached process的能力，它会对用户的质量体验有着直接的影响。</p>

<p>为了能够接收到用户离开你的UI时的通知，你需要实现Activtiy类里面的<a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int">onTrimMemory()</a>)回调方法。你应该使用这个方法来监听到<a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_UI_HIDDEN">TRIM_MEMORY_UI_HIDDEN</a>级别, 它意味着你的UI已经隐藏，你应该释放那些仅仅被你的UI使用的资源。</p>

<p>请注意：你的app仅仅会在所有UI组件的被隐藏的时候接收到onTrimMemory()的回调并带有参数TRIM_MEMORY_UI_HIDDEN。这与onStop()的回调是不同的，onStop会在activity的实例隐藏时会执行，例如当用户从你的app的某个activity跳转到另外一个activity时onStop会被执行。因此你应该实现onStop回调，并且在此回调里面释放activity的资源，例如网络连接，unregister广播接收者。除非接收到<a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int">onTrimMemory(TRIM_MEMORY_UI_HIDDEN)</a>)的回调，否者你不应该释放你的UI资源。这确保了用户从其他activity切回来时，你的UI资源仍然可用，并且可以迅速恢复activity。</p>

<h3>3)当内存紧张时释放部分内存</h3>

<p>在你的app生命周期的任何阶段，onTrimMemory回调方法同样可以告诉你整个设备的内存资源已经开始紧张。你应该根据onTrimMemory方法中的内存级别来进一步决定释放哪些资源。</p>

<ul>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_RUNNING_MODERATE">TRIM_MEMORY_RUNNING_MODERATE</a>:你的app正在运行并且不会被列为可杀死的。但是设备正运行于低内存状态下，系统开始开始激活杀死LRU Cache中的Process的机制。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_RUNNING_LOW">TRIM_MEMORY_RUNNING_LOW</a>:你的app正在运行且没有被列为可杀死的。但是设备正运行于更低内存的状态下，你应该释放不用的资源用来提升系统性能，这会直接影响了你的app的性能。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_RUNNING_CRITICAL">TRIM_MEMORY_RUNNING_CRITICAL</a>:你的app仍在运行，但是系统已经把LRU Cache中的大多数进程都已经杀死，因此你应该立即释放所有非必须的资源。如果系统不能回收到足够的RAM数量，系统将会清除所有的LRU缓存中的进程，并且开始杀死那些之前被认为不应该杀死的进程，例如那个进程包含了一个运行中的Service。</li>
</ul>


<p>同样，当你的app进程正在被cached时，你可能会接受到从onTrimMemory()中返回的下面的值之一:</p>

<ul>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_BACKGROUND">TRIM_MEMORY_BACKGROUND</a>: 系统正运行于低内存状态并且你的进程正处于LRU缓存名单中<strong>最不容易杀掉的位置</strong>。尽管你的app进程并不是处于被杀掉的高危险状态，系统可能已经开始杀掉LRU缓存中的其他进程了。你应该释放那些容易恢复的资源，以便于你的进程可以保留下来，这样当用户回退到你的app的时候才能够迅速恢复。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_MODERATE">TRIM_MEMORY_MODERATE</a>: 系统正运行于低内存状态并且你的进程已经已经接近LRU名单的<strong>中部位置</strong>。如果系统开始变得更加内存紧张，你的进程是有可能被杀死的。</li>
<li><a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_COMPLETE">TRIM_MEMORY_COMPLETE</a>: 系统正运行与低内存的状态并且你的进程正处于LRU名单中<strong>最容易被杀掉的位置</strong>。你应该释放任何不影响你的app恢复状态的资源。</li>
</ul>


<p>因为onTrimMemory()的回调是在<strong>API 14</strong>才被加进来的，对于老的版本，你可以使用<a href="http://developer.android.com/reference/android/content/ComponentCallbacks.html#onLowMemory(">onLowMemory</a>)回调来进行兼容。onLowMemory相当与TRIM_MEMORY_COMPLETE。</p>

<p><strong>Note:</strong> 当系统开始清除LRU缓存中的进程时，尽管它首先按照LRU的顺序来操作，但是它同样会考虑进程的内存使用量。因此消耗越少的进程则越容易被留下来。</p>

<h3>4)检查你应该使用多少的内存</h3>

<p>正如前面提到的，每一个Android设备都会有不同的RAM总大小与可用空间，因此不同设备为app提供了不同大小的heap限制。你可以通过调用<a href="http://developer.android.com/reference/android/app/ActivityManager.html#getMemoryClass(">getMemoryClass()</a>)来获取你的app的可用heap大小。如果你的app尝试申请更多的内存，会出现OutOfMemory的错误。</p>

<p>在一些特殊的情景下，你可以通过在manifest的application标签下添加largeHeap=true的属性来声明一个更大的heap空间。如果你这样做，你可以通过<a href="http://developer.android.com/reference/android/app/ActivityManager.html#getLargeMemoryClass(">getLargeMemoryClass()</a>)来获取到一个更大的heap size。</p>

<p>然而，能够获取更大heap的设计本意是为了一小部分会消耗大量RAM的应用(例如一个大图片的编辑应用)。不要轻易的因为你需要使用大量的内存而去请求一个大的heap size。只有当你清楚的知道哪里会使用大量的内存并且为什么这些内存必须被保留时才去使用large heap. 因此请尽量少使用large heap。使用额外的内存会影响系统整体的用户体验，并且会使得GC的每次运行时间更长。在任务切换时，系统的性能会变得大打折扣。</p>

<p>另外, large heap并不一定能够获取到更大的heap。在某些有严格限制的机器上，large heap的大小和通常的heap size是一样的。因此即使你申请了large heap，你还是应该通过执行getMemoryClass()来检查实际获取到的heap大小。</p>

<h3>5)避免bitmaps的浪费</h3>

<p>当你加载一个bitmap时，仅仅需要保留适配当前屏幕设备分辨率的数据即可，如果原图高于你的设备分辨率，需要做缩小的动作。请记住，增加bitmap的尺寸会对内存呈现出2次方的增加，因为X与Y都在增加。</p>

<p><strong>Note:</strong>在Android 2.3.x (API level 10)及其以下, bitmap对象是的pixel data是存放在native内存中的，它不便于调试。然而，从Android 3.0(API level 11)开始，bitmap pixel data是分配在你的app的Dalvik heap中, 这提升了GC的工作并且更加容易Debug。因此如果你的app使用bitmap并在旧的机器上引发了一些内存问题，切换到3.0以上的机器上进行Debug。</p>

<h3>6)使用优化的数据容器</h3>

<p>利用Android Framework里面优化过的容器类，例如<a href="http://developer.android.com/reference/android/util/SparseArray.html">SparseArray</a>, SparseBooleanArray, 与 LongSparseArray. 通常的HashMap的实现方式更加消耗内存，因为它需要一个额外的实例对象来记录Mapping操作。另外，SparseArray更加高效在于他们避免了对key与value的autobox自动装箱，并且避免了装箱后的解箱。</p>

<h3>7)请注意内存开销</h3>

<p>对你所使用的语言与库的成本与开销有所了解，从开始到结束，在设计你的app时谨记这些信息。通常，表面上看起来无关痛痒(innocuous)的事情也许实际上会导致大量的开销。例如：</p>

<ul>
<li>Enums的内存消耗通常是static constants的2倍。你应该尽量避免在Android上使用enums。</li>
<li>在Java中的每一个类(包括匿名内部类)都会使用大概500 bytes。</li>
<li>每一个类的实例花销是12-16 bytes。</li>
<li>往HashMap添加一个entry需要额一个额外占用的32 bytes的entry对象。</li>
</ul>


<h3>8)请注意代码“抽象”</h3>

<p>通常, 开发者使用抽象简单的作为"好的编程实践",因为抽象能够提升代码的灵活性与可维护性。然而，抽象会导致一个显著的开销:通常他们需要同等量的代码用于可执行。那些代码会被map到内存中。因此如果你的抽象没有显著的提升效率，应该尽量避免他们。</p>

<h3>9)为序列化的数据使用nano protobufs</h3>

<p><a href="https://developers.google.com/protocol-buffers/docs/overview">Protocol buffers</a>是由Google为序列化结构数据而设计的，一种语言无关，平台无关，具有良好扩展性的协议。类似XML，却比XML更加轻量，快速，简单。如果你需要为你的数据实现协议化，你应该在客户端的代码中总是使用nano protobufs。通常的协议化操作会生成大量繁琐的代码，这容易给你的app带来许多问题:增加RAM的使用量，显著增加APK的大小，更慢的执行速度，更容易达到DEX的字符限制。</p>

<p>关于更多细节，请参考<a href="https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt">protobuf readme</a>的"Nano version"章节。</p>

<h3>10)Avoid dependency injection frameworks</h3>

<p>使用类似<a href="https://code.google.com/p/google-guice/">Guice</a>或者<a href="https://github.com/roboguice/roboguice">RoboGuice</a>等framework injection包是很有效的，因为他们能够简化你的代码。</p>

<blockquote><p>RoboGuice 2 smoothes out some of the wrinkles in your Android development experience and makes things simple and fun. Do you always forget to check for null when you getIntent().getExtras()? RoboGuice 2 will help you. Think casting findViewById() to a TextView shouldn’t be necessary? RoboGuice 2 is on it. RoboGuice 2 takes the guesswork out of development. Inject your View, Resource, System Service, or any other object, and let RoboGuice 2 take care of the details.</p></blockquote>

<p>然而，那些框架会通过扫描你的代码执行许多初始化的操作，这会导致你的代码需要大量的RAM来map代码。但是mapped pages会长时间的被保留在RAM中。</p>

<h3>11)谨慎使用external libraries</h3>

<p>很多External library的代码都不是为移动网络环境而编写的，在移动客户端则显示的效率不高。至少，当你决定使用一个external library的时候，你应该针对移动网络做繁琐的porting与maintenance的工作。</p>

<p>即使是针对Android而设计的library，也可能是很危险的，因为每一个library所做的事情都是不一样的。例如，其中一个lib使用的是nano protobufs, 而另外一个使用的是micro protobufs。那么这样，在你的app里面就有2种protobuf的实现方式。这样的冲突同样可能发生在输出日志，加载图片，缓存等等模块里面。</p>

<p>同样不要陷入为了1个或者2个功能而导入整个library的陷阱。如果没有一个合适的库与你的需求相吻合，你应该考虑自己去实现，而不是导入一个大而全的解决方案。</p>

<h3>12)优化整体性能</h3>

<p>官方有列出许多优化整个app性能的文章：<a href="http://developer.android.com/training/best-performance.html">Best Practices for Performance</a>. 这篇文章就是其中之一。有些文章是讲解如何优化app的CPU使用效率，有些是如何优化app的内存使用效率。</p>

<p>你还应该阅读<a href="http://developer.android.com/tools/debugging/debugging-ui.html">optimizing your UI</a>来为layout进行优化。同样还应该关注lint工具所提出的建议，进行优化。</p>

<h3>13)使用ProGuard来剔除不需要的代码</h3>

<p><a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>能够通过移除不需要的代码，重命名类，域与方法等方对代码进行压缩,优化与混淆。使用ProGuard可以是的你的代码更加紧凑，这样能够使用更少mapped代码所需要的RAM。</p>

<h3>14)对最终的APK使用zipalign</h3>

<p>在编写完所有代码，并通过编译系统生成APK之后，你需要使用<a href="http://developer.android.com/tools/help/zipalign.html">zipalign</a>对APK进行重新校准。如果你不做这个步骤，会导致你的APK需要更多的RAM，因为一些类似图片资源的东西不能被mapped。</p>

<p><strong>Notes::</strong>Google Play不接受没有经过zipalign的APK。</p>

<h3>15)分析你的RAM使用情况</h3>

<p>一旦你获取到一个相对稳定的版本后，需要分析你的app整个生命周期内使用的内存情况，并进行优化，更多细节请参考<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a>.</p>

<h3>16)使用多进程</h3>

<p>如果合适的话，有一个更高级的技术可以帮助你的app管理内存使用：通过把你的app组件切分成多个组件，运行在不同的进程中。这个技术必须谨慎使用，大多数app都不应该运行在多个进程中。因为如果使用不当，它会显著增加内存的使用，而不是减少。当你的app需要在后台运行与前台一样的大量的任务的时候，可以考虑使用这个技术。</p>

<p>一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个app运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的app可以切分成2个进程：一个用来操作UI，另外一个用来后台的Service.</p>

<p>你可以通过在manifest文件中声明'android:process'属性来实现某个组件运行在另外一个进程的操作。</p>

<p>```xml
&lt;service android:name=".PlaybackService"</p>

<pre><code>     android:process=":background" /&gt;
</code></pre>

<p>```
更多关于使用这个技术的细节，请参考原文，链接如下。</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/articles/memory.html">http://developer.android.com/training/articles/memory.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 代码性能优化小技巧]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/04/06/android-training-performance-tips/"/>
    <updated>2013-04-06T18:27:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/04/06/android-training-performance-tips</id>
    <content type="html"><![CDATA[<h2>Performance Tips</h2>

<p>{% img /images/articles/performance_improve.jpg %}</p>

<p>这篇文章主要是介绍了一些小细节的优化技巧，当这些小技巧综合使用起来的时候，对于整个App的性能提升还是有作用的，只是不能较大幅度的提升性能而已。选择合适的算法与数据结构才应该是你首要考虑的因素，在这篇文章中不会涉及这方面。你应该使用这篇文章中的小技巧作为平时写代码的习惯，这样能够提升代码的效率。</p>

<!-- more -->


<p>通常来说，高效的代码需要满足下面两个规则：</p>

<ul>
<li>不要做冗余的动作</li>
<li>如果能避免，尽量不要分配内存</li>
</ul>


<p>代码的执行效果会受到设备CPU,设备内存,系统版本等诸多因素的影响。为了确保代码能够在不同设备上都运行良好，需要最大化代码的效率。</p>

<h3>避免创建不必要的对象</h3>

<p>虽然GC可以回收不用的对象，可是为这些对象分配内存，并回收它们同样是需要耗费资源的。<br/>
因此请尽量避免创建不必要的对象，有下面一些例子来说明这个问题：</p>

<ul>
<li>如果你需要返回一个String对象，并且你知道它最终会需要连接到一个StringBuffer，请修改你的实现方式，避免直接进行连接操作，应该采用创建一个临时对象来做这个操作.</li>
<li>当从输入的数据集中抽取出Strings的时候，尝试返回原数据的substring对象，而不是创建一个重复的对象。</li>
</ul>


<p>一个稍微激进点的做法是把所有多维的数据分解成1维的数组:</p>

<ul>
<li>一组int数据要比一组Integer对象要好很多。可以得知，两组1维数组要比一个2维数组更加的有效率。同样的，这个道理可以推广至其他原始数据类型。</li>
<li>如果你需要实现一个数组用来存放(Foo,Bar)的对象，尝试分解为Foo[]与Bar[]要比(Foo,Bar)好很多。(当然，为了某些好的API的设计，可以适当做一些妥协。但是在自己的代码内部，你应该多多使用分解后的容易。</li>
</ul>


<p>通常来说，需要避免创建更多的对象。更少的对象意味者更少的GC动作，GC会对用户体验有比较直接的影响。</p>

<h3>选择Static而不是Virtual</h3>

<p>如果你不需要访问一个对象的值域,请保证这个方法是static类型的,这样方法调用将快15%-20%。这是一个好的习惯，因为你可以从方法声明中得知调用无法改变这个对象的状态。</p>

<h3>常量声明为Static Final</h3>

<p>先看下面这种声明的方式
<code>java
static int intVal = 42;
static String strVal = "Hello, world!";
</code>
编译器会使用<clinit>方法来初始化上面的值，之后访问的时候会需要先到它那里查找，然后才返回数据。我们可以使用static final来提升性能：
<code>java
static final int intVal = 42;
static final String strVal = "Hello, world!";
</code>
这时再也不需要上面的那个方法来做多余的查找动作了。<br/>
<strong> 所以，请尽可能的为常量声明为static final类型的。</strong></p>

<h3>避免内部的Getters/Setters</h3>

<p>像C++等native language,通常使用getters(i = getCount())而不是直接访问变量(i = mCount).这是编写C++的一种优秀习惯，而且通常也被其他面向对象的语言所采用，例如C#与Java，因为编译器通常会做inline访问，而且你需要限制或者调试变量，你可以在任何时候在getter/setter里面添加代码。<br/>
然而，在Android上，这是一个糟糕的写法。Virtual method的调用比起直接访问变量要耗费更多。那么合理的做法是：在面向对象的设计当中应该使用getter/setter，但是在类的内部你应该直接访问变量.<br/>
没有JIT(Just In Time Compiler)时，直接访问变量的速度是调用getter的3倍。有JIT时,直接访问变量的速度是通过getter访问的7倍。<br/>
请注意，如果你使用<a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>, 你可以获得同样的效果，因为ProGuard可以为你inline accessors.</p>

<h3>使用增强的For循环</h3>

<p>请比较下面三种循环的方法：</p>

<p>```java
static class Foo {</p>

<pre><code>int mSplat;
</code></pre>

<p>}</p>

<p>Foo[] mArray = ...</p>

<p>public void zero() {</p>

<pre><code>int sum = 0;
for (int i = 0; i &lt; mArray.length; ++i) {
    sum += mArray[i].mSplat;
}
</code></pre>

<p>}</p>

<p>public void one() {</p>

<pre><code>int sum = 0;
Foo[] localArray = mArray;
int len = localArray.length;

for (int i = 0; i &lt; len; ++i) {
    sum += localArray[i].mSplat;
}
</code></pre>

<p>}</p>

<p>public void two() {</p>

<pre><code>int sum = 0;
for (Foo a : mArray) {
    sum += a.mSplat;
}
</code></pre>

<p>}
```</p>

<ul>
<li>zero()是最慢的，因为JIT没有办法对它进行优化。</li>
<li>one()稍微快些。</li>
<li>two() 在没有做JIT时是最快的，可是如果经过JIT之后，与方法one()是差不多一样快的。它使用了增强的循环方法for-each。</li>
</ul>


<p>所以请尽量使用for-each的方法，但是对于ArrayList，请使用方法one()。</p>

<h3>使用包级访问而不是内部类的私有访问</h3>

<p>参考下面一段代码</p>

<p>```java
public class Foo {</p>

<pre><code>private class Inner {
    void stuff() {
        Foo.this.doStuff(Foo.this.mValue);
    }
}

private int mValue;

public void run() {
    Inner in = new Inner();
    mValue = 27;
    in.stuff();
}

private void doStuff(int value) {
    System.out.println("Value is " + value);
}
</code></pre>

<p>}
```
Foo$Inner里面有访问外部类的一个变量。这样的做法会给系统造成额外的麻烦，请尽量避免。</p>

<h3>避免使用float类型</h3>

<p>Android系统中float类型的数据存取速度是int类型的一半，尽量优先采用int类型。</p>

<h3>使用库函数</h3>

<p>尽量使用System.arraycopy()等一些封装好的库函数，它的效率是手动编写copy实现的9倍多。</p>

<p><strong> Tip: Also see Josh Bloch's Effective Java, item 47. </strong></p>

<h3>谨慎使用native函数</h3>

<p>当你需要把已经存在的native code迁移到Android，请谨慎使用JNI。如果你要使用JNI,请学习<a href="http://developer.android.com/guide/practices/jni.html">JNI Tips</a></p>

<h3>关于性能的误区</h3>

<p>在没有做JIT之前，使用一种确切的数据类型确实要比抽象的数据类型速度要更有效率。(例如，使用HashMap要比Map效率更高。) 有误传效率要高一倍，实际上只是6%左右。而且，在JIT之后，他们直接并没有大多差异。</p>

<h3>关于测量</h3>

<p>上面文档中出现的数据是Android的实际运行效果。我们可以用<a href="http://developer.android.com/tools/debugging/debugging-tracing.html">Traceview</a> 来测量，但是测量的数据是没有经过JIT优化的，所以实际的效果应该是要比测量的数据稍微好些。</p>

<p>关于如何测量与调试，还可以参考下面两篇文章：</p>

<ul>
<li><a href="http://developer.android.com/tools/debugging/debugging-tracing.html">Profiling with Traceview and dmtracedump</a></li>
<li><a href="http://developer.android.com/tools/debugging/systrace.html">Analysing Display and Performance with Systrace</a></li>
</ul>


<hr />

<p><strong>文章学习自http://developer.android.com/guide/components/processes-and-threads.html</strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 优化电池续航能力(Lesson 4 - 判断并监测网络连接状态)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/24/android-training-performance-optimiizing-battery-life-lesson-4/"/>
    <updated>2012-03-24T16:37:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/24/android-training-performance-optimiizing-battery-life-lesson-4</id>
    <content type="html"><![CDATA[<h2>Manipulating Broadcast Receivers On Demand[按需操控广播接收者]</h2>

<p>简单的方法是为我们监测的状态创建一个BroadcastReceiver，并在manifest中为每一个状态进行注册监听。然后，每一个Receiver根据当前设备的状态来简单重新安排下一步执行的任务。[这句话感觉理解有点问题]</p>

<p>上面那个方法的副作用是，设备会在每次收到广播都被唤醒，这有点超出期望，因为有些广播是不希望唤醒设备的。</p>

<p>更好的方法是根据程序运行情况开启或者关闭广播接收者。这样的话，那些在manifest中注册的receivers仅仅会在需要的时候才被激活。</p>

<!-- More -->


<h2>1)Toggle and Cascade State Change Receivers to Improve Efficiency[切换是否开启这些状态Receivers来提高效率]</h2>

<p>我们可以使用PackageManager来切换任何一个在mainfest里面定义好的组件的开启状态。
可以使用下面的方法来开启或者关闭任何一个broadcast receiver:
```java
ComponentName receiver = new ComponentName(context, myReceiver.class);</p>

<p>PackageManager pm = context.getPackageManager();</p>

<p>pm.setComponentEnabledSetting(receiver,</p>

<pre><code>    PackageManager.COMPONENT_ENABLED_STATE_ENABLED,  
    PackageManager.DONT_KILL_APP)  
</code></pre>

<p>```</p>

<p>使用这种技术，如果我们判断到网络链接已经断开，那么可以在这个时候关闭除了connectivity-change的之外的所有Receivers。</p>

<p>相反的，一旦重新建立网络连接，我们可以停止监听网络链接的改变。而仅仅在执行需要联网的操作之前判断当前网络是否可以用即可。</p>

<p>你可以使用上面同样的技术来暂缓一个需要带宽的下载操作。可以开启receiver来监听是否连接上Wi-Fi来重新开启下载的操作。</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/monitoring-device-state/manifest-receivers.html">http://developer.android.com/training/monitoring-device-state/manifest-receivers.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 优化电池续航能力(Lesson 3 - 判断并监测网络连接状态)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-3/"/>
    <updated>2012-03-23T21:09:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-3</id>
    <content type="html"><![CDATA[<h2>Determining and Monitoring the Connectivity Status[判断并监测网络连接状态]</h2>

<p>通常我们会有一些计划的任务，比如重复闹钟，后台定时启动的任务等。但是如果我们的网络没有连接上，那么就没有必要启动那些需要连接网络的任务。我们可以使用ConnectivityManager来检查是否连接上网络，是何种网络。[通过网络的连接状况改变，相应的改变app的行为，减少无谓的操作，从而延长设备的续航能力]</p>

<h2>1)Determine if You Have an Internet Connection[判断当前是否有网络连接]</h2>

<p>显然如果没有网络连接，那么就没有必要做那些需要联网的事情。下面是一个检查是否有网络连接的例子：</p>

<!-- More -->


<p>```java
ConnectivityManager cm =</p>

<pre><code>    (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  
</code></pre>

<p>NetworkInfo activeNetwork = cm.getActiveNetworkInfo();<br/>
boolean isConnected = activeNetwork.isConnectedOrConnecting();<br/>
```</p>

<h2>2)Determine the Type of your Internet Connection[判断连接网络的类型]</h2>

<p>设备通常可以有移动网络，WiMax,Wi-Fi与以太网连接等类型。通过查询当前活动的网络类型，可以根据网络的带宽做适合的事情。
<code>java
boolean isWiFi = activeNetwork.getType() == ConnectivityManager.TYPE_WIFI;  
</code>
使用移动网络会比Wi-Fi花费代价更大，所以多数情况下，在移动网络情况下减少一些数据的获取操作，同样，一些像下载文件等操作需要等有Wi-Fi的情况下才开始。
如果已经关闭了更新操作，那么需要监听网络切换，当有比较好的网络时重新启动之前取消的操作。</p>

<h2>3)Monitor for Changes in Connectivity[监测网络连接的切换]</h2>

<p>当网络连接被改变的时候， ConnectivityManager会broadcast CONNECTIVITY_ACTION ("android.net.conn.CONNECTIVITY_CHANGE") 的动作消息。
我们需要在manifest文件里面注册一个带有像下面action一样的Receiver:
<code>xml
&lt;action android:name="android.net.conn.CONNECTIVITY_CHANGE"/&gt;  
</code>
通常网络的改变会比较频繁，我们没有必要不间断的注册监听网络的改变。通常我们会在有Wi-Fi的时候进行下载动作，若是网络切换到移动网络则通常会暂停当前下载，监听到恢复到Wi-Fi的情况则开始恢复下载。[也就是说为了完成某个单元操作而进行监测]</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/monitoring-device-state/connectivity-monitoring.html">http://developer.android.com/training/monitoring-device-state/connectivity-monitoring.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 优化电池续航能力(Lesson 2 - 判断设备的停驻模式)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-2/"/>
    <updated>2012-03-23T19:53:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/03/23/android-training-performance-optimiizing-battery-life-lesson-2</id>
    <content type="html"><![CDATA[<h2>Determining and Monitoring the Docking State and Type[判断并监测设备的停驻状态与类型]</h2>

<p>在上一课中有这样一句话：In many cases, the act of charging a device is coincident with putting it into a dock.</p>

<p>在很多情况下，为设备充电也是一种设备停驻方式</p>

<p>Android设备能够有好几种停驻状态。包括车载模式，家庭模式与数字对战模拟模式[这个有点奇怪]。停驻状态通常与充电状态是非常密切关联的。</p>

<p>停驻模式会如何影响更新频率这完全取决于app的设置。我们可以选择在桌面模式下频繁的更新数据也可以选择在车载模式下关闭更新操作。相反的，你也可以选择在车载模式下最大化更新交通数据频率。</p>

<!-- More -->


<p>停驻状态也是以sticky intent方式来广播的，这样可以通过查询intent里面的数据来判断是否目前处于停驻状态，处于哪种停驻状态。[上面的这些操作都可以一定程度上优化电池的使用，提升设备的续航能力]</p>

<h2>1)Determine the Current Docking State[判断当前停驻状态]</h2>

<p>因为停驻状态的广播内容也是sticky intent(<code>ACTION_DOCK_EVENT</code>)，所以不需要注册BroadcastReceiver。
```java
IntentFilter ifilter = new IntentFilter(Intent.ACTION_DOCK_EVENT);<br/>
Intent dockStatus = context.registerReceiver(null, ifilter);</p>

<p>int dockState = battery.getIntExtra(EXTRA_DOCK_STATE, -1);<br/>
boolean isDocked = dockState != Intent.EXTRA_DOCK_STATE_UNDOCKED;<br/>
```</p>

<h2>2)Determine the Current Dock Type[判断当前停驻类型]</h2>

<p>一共有下面4中停驻类型：</p>

<ul>
<li>Car</li>
<li>Desk</li>
<li>Low-End (Analog) Desk：API level 11开始才有</li>
<li>High-End (Digital) Desk：API level 11开始才有</li>
</ul>


<p>通常仅仅需要像下面一样检查当前停驻类型：
```java
boolean isCar = dockState == EXTRA_DOCK_STATE_CAR;<br/>
boolean isDesk = dockState == EXTRA_DOCK_STATE_DESK ||</p>

<pre><code>             dockState == EXTRA_DOCK_STATE_LE_DESK ||  
             dockState == EXTRA_DOCK_STATE_HE_DESK;  
</code></pre>

<p>```</p>

<h2>3)Monitor for Changes in the Dock State or Type[监测停驻状态或者类型的改变]</h2>

<p>只需要像下面一样注册一个监听器：
<code>xml
&lt;action android:name="android.intent.action.ACTION_DOCK_EVENT"/&gt;
</code>
Receiver获取到信息后可以像上面那样检查需要的数据。</p>

<p><strong>Ps:这一课主要是强调了需要在车载模式等停驻状态下的处理电量优化的情况。某些特定的停驻模式下，意味这其他一些操作可以停止，这样来获取更长的续航能力。</strong></p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/monitoring-device-state/docking-monitoring.html">http://developer.android.com/training/monitoring-device-state/docking-monitoring.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
</feed>
