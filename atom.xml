<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[四方城]]></title>
  <link href="http://kesenhoo.github.com/atom.xml" rel="self"/>
  <link href="http://kesenhoo.github.com/"/>
  <updated>2013-11-24T12:23:12+08:00</updated>
  <id>http://kesenhoo.github.com/</id>
  <author>
    <name><![CDATA[Kesen Hoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Notes - Singleton Pattern(单例总结)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/11/17/java-notes-00-singleton-pattern/"/>
    <updated>2013-11-17T14:21:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/11/17/java-notes-00-singleton-pattern</id>
    <content type="html"><![CDATA[<p>这里不赘述单例模式的概念了，直接演示几种不同的实现方式。</p>

<h2>0)Eager initialization</h2>

<p>如果程序一开始就需要某个单例，并且创建这个单例并不那么费时，我们可以考虑用这种方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种实现方式有几个特点：</p>

<!-- More -->


<ul>
<li>实例一开始就被创建(Eager initialization)。</li>
<li><code>getInstance()</code>方法不需要加<code>synchronize</code>来解决多线程同步的问题。</li>
<li><code>final</code>关键字确保了实例不可变，并且只会存在一个。</li>
</ul>


<h2>1)Lazy initialization</h2>

<p>懒加载的方式使得单例会在第一次使用到时才会被创建.先看一种有隐患的写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">LazySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// private constructor</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">synchronized</span> <span class="o">(</span><span class="n">LazySingleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>请注意</strong>：上面的写法其实非线程安全的，假设两个Thread同时进入了getInstance方法，都判断到instance==null，然后会因为synchronized的原因，逐个执行，这样就得到了2个实例。解决这个问题，需要用到典型的<strong>double-check</strong>方式，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">LazySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{</span>       
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">LazySingleton</span> <span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span> <span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一个更简略直观的替代写法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">LazySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{</span>       
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span> <span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2)Static block initialization</h2>

<p>如果我们对程序的加载顺序有点了解的话，会知道Static block的初始化是执行在加载类之后，Constructor被执行之前。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticBlockSingleton</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">StaticBlockSingleton</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StaticBlockSingleton</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Error, You Know This, Haha!&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">StaticBlockSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">StaticBlockSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的写法有一个弊端，如果我们类有若干个static的变量，程序的初始化却只需要其中的1，2个的话，我们会做多余的static initialization。</p>

<h2>3)Bill Pugh solution</h2>

<p>University of Maryland Computer Science researcher Bill Pugh有写过一篇文章<a href="http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom">initialization on demand holder idiom</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Private constructor prevents instantiation from other classes</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">    * SingletonHolder is loaded on the first execution of Singleton.getInstance() </span>
</span><span class='line'><span class="cm">    * or the first access to SingletonHolder.INSTANCE, not before.</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingletonHolder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SingletonHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SingletonHolder类会在你需要的时候才会被初始化，而且它不影响Singleton类的其他static成员变量的使用。这个方法是线程安全的并且避免了使用volatile与synchronized。</p>

<h2>4)Using Enum</h2>

<p>这是最简便安全的方法。没有明显的缺点，并且避免了下面要讲到的序列化的隐患。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span> <span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// perform operation here </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Serialize and de-serialize</h2>

<p>在某些情况下，需要实现序列化的时候，普通的单例模式需要添加readResolve的方法，不然会出现异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoSingleton</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">static</span> <span class="n">DemoSingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">DemoSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DemoSingleton</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getI</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setI</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>仅仅有上面的还不够，我们需要添加serialVersionUID，例子详见下面的总结。</p>

<h2>Conclusion</h2>

<p>实现一个功能完善，性能更佳，不存在序列化等问题的单例，建议使用下面两个方式之一:</p>

<h3>Bill Pugh(Inner Holder)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoSingleton</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">DemoSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// private constructor</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DemoSingletonHolder</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">DemoSingleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DemoSingleton</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">DemoSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">DemoSingletonHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getInstance</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enum</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span> <span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// perform operation here </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>参考资料</strong></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton Pattern</a></li>
<li><a href="http://howtodoinjava.com/2012/10/22/singleton-design-pattern-in-java/">Singleton Pattern In Java</a></li>
</ul>


<p><strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 管理应用的内存]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/10/19/android-training-performance-managing_your_app_memory/"/>
    <updated>2013-10-19T15:18:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/10/19/android-training-performance-managing_your_app_memory</id>
    <content type="html"><![CDATA[<p>Random Access Memory(RAM)在任何软件开发环境中都是一个很宝贵的资源。这一点在物理内存通常很有限的移动操作系统上，显得尤为突出。尽管Android的Dalvik虚拟机扮演了常规的垃圾回收的角色，但这并不意味着你可以忽视app的内存分配与释放的时机与地点。</p>

<p>为了GC能够从你的app中及时回收内存，你需要避免Memory Leaks(这通常由引用的不能释放而导致)并且在适当的时机(下面会讲到的lifecycle callbacks)来释放引用。对于大多数apps来说，Dalvik的GC会自动把离开活动线程的对象进行回收。</p>

<p>这篇文章会解释Android如何管理app的进程与内存分配，并且你可以在开发Android应用的时候主动的减少内存的使用。关于Java的资源管理机制，请参加其它书籍或者线上材料。如果你正在寻找如何分析你的内存使用情况的文章，请参考这里<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a>。</p>

<!-- More -->


<h2>第1部分:Android是如何管理内存的</h2>

<p>Android并没有提供内存的交换区(Swap space)，但是它有使用<a href="http://en.wikipedia.org/wiki/Paging">paging</a>与<a href="http://en.wikipedia.org/wiki/Memory-mapped_files">memory-mapping(mmapping)</a>的机制来管理内存。这意味着任何你修改的内存(无论是通过分配新的对象还是访问到mmaped pages的内容)都会贮存在RAM中，而且不能被paged out。因此唯一完整释放内存的方法是释放那些你可能hold住的对象的引用，这样使得它能够被GC回收。只有一种例外是：如果系统想要在其他地方进行reuse。</p>

<h3>1)共享内存</h3>

<p>Android通过下面几个方式在不同的Process中来共享RAM:</p>

<ul>
<li>每一个app的process都是从同一个被叫做Zygote的进程中fork出来的。Zygote进程在系统启动并且载入通用的framework的代码与资源之后开始启动。为了启动一个新的程序进程，系统会fork Zygote进程生成一个新的process，然后在新的process中加载并运行app的代码。这使得大多数的RAM pages被用来分配给framework的代码与资源，并在应用的所有进程中进行共享。</li>
<li>大多数static的数据被mmapped到一个进程中。这不仅仅使得同样的数据能够在进程间进行共享，而且使得它能够在需要的时候被paged out。例如下面几种static的数据:

<ul>
<li>Dalvik code (by placing it in a pre-linked .odex file for direct mmapping</li>
<li>App resources (by designing the resource table to be a structure that can be mmapped and by aligning the zip entries of the APK)</li>
<li>Traditional project elements like native code in .so files.</li>
</ul>
</li>
<li>在许多地方，Android通过显式的分配共享内存区域(例如ashmem或者gralloc)来实现一些动态RAM区域的能够在不同进程间的共享。例如，window surfaces在app与screen compositor之间使用共享的内存，cursor buffers在content provider与client之间使用共享的内存。</li>
</ul>


<p>关于如何查看app所使用的共享内存，请查看<a href="http://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></p>

<h3>2)分配与回收内存</h3>

<p>这里有下面几点关于Android如何分配与回收内存的事实：</p>

<ul>
<li>每一个进程的Dalvik heap都有一个限制的虚拟内存范围。这就是逻辑上讲的heap size，它可以随着需要进行增长，但是会有一个系统为它所定义的上限。</li>
<li>逻辑上讲的heap size和实际物理上使用的内存数量是不等的，Android会计算一个叫做Proportional Set Size(PSS)的值，它记录了那些和其他进程进行共享的内存大小。（假设共享内存大小是10M，一共有20个Process在共享使用，根据权重，可能认为其中有0.3M才能真正算是你的进程所使用的）</li>
<li>Dalvik heap与逻辑上的heap size不吻合，这意味着Android并不会去做heap中的碎片整理用来关闭空闲区域。Android仅仅会在heap的尾端出现不使用的空间时才会做收缩逻辑heap size大小的动作。但是这并不是意味着被heap所使用的物理内存大小不能被收缩。在垃圾回收之后，Dalvik会遍历heap并找出不使用的pages，然后使用madvise把那些pages返回给kernal。因此，成对的allocations与deallocations大块的数据可以使得物理内存能够被正常的回收。然而，回收碎片化的内存则会使得效率低下很多，因为那些碎片化的分配页面也许会被其他地方所共享到。</li>
</ul>


<h3>3)限制应用的内存</h3>

<p>为了维持多任务的功能环境，Android为每一个app都设置了一个硬性的heap size限制。准确的heap size限制随着不同设备的不同RAM大小而各有差异。如果你的app已经到了heap的限制大小并且再尝试分配内存的话，会引起OutOfMemoryError的错误。</p>

<p>在一些情况下，你也许想要查询当前设备的heap size限制大小是多少，然后决定cache的大小。可以通过getMemoryClass()来查询。这个方法会返回一个整数，表明你的app heap size限制是多少megabates。</p>

<h3>4)切换应用</h3>

<p>当用户在不同应用之间进行切换的时候，不是使用交换空间的办法。Android会把那些不包含foreground组件的进程放到LRU cache中。例如，当用户刚开始启动了一个应用，这个时候为它创建了一个进程，但是当用户离开这个应用，这个进程并没有离开。系统会把这个进程放到cache中，如果用户后来回到这个应用，这个进程能够被resued，从而实现app的快速切换。</p>

<p>如果你的应用有一个被缓存的进程，它被保留在内存中，并且当前不再需要它了，这会对系统的整个性能有影响。因此当系统开始进入低内存状态时，它会由系统根据LRU的规则与其他因素选择杀掉某些进程，为了保持你的进程能够尽可能长久的被cached，请参考下面的章节学习何时释放你的引用。</p>

<p>更对关于不在foreground的进程是Android是如何决定kill掉哪一类进程的问题，请参考<a href="http://developer.android.com/guide/components/processes-and-threads.html">Processes and Threads</a>.</p>

<h2>第2部分:你的应用该如何管理内存</h2>

<p>待续……</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/training/articles/memory.html">http://developer.android.com/training/articles/memory.html</a></strong>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 4 - 优化Views)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-4/"/>
    <updated>2013-08-18T17:30:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-4</id>
    <content type="html"><![CDATA[<p>前面的课程学习到了如何创建设计良好的View，并且能够使之在手势与状态切换时得到正确的反馈。下面要介绍的是如何使得view能够执行更快。为了避免UI显得卡顿，你必须确保动画能够保持在60fps以上。</p>

<!-- more -->


<h2>Do Less, Less Frequently</h2>

<p>为了加速你的view，对于频繁调用的方法，需要尽量减少不必要的代码。先从onDraw开始，需要特别注意不应该在这里做内存分配的事情，因为它会导致GC，从而导致卡顿。在初始化或者动画间隙期间做分配内存的动作。不要在动画正在执行的时候做内存分配的事情。</p>

<p>你还需要尽可能的减少onDraw被调用的次数，大多数时候导致onDraw都是因为调用了invalidate().因此请尽量减少调用invaildate()的次数。如果可能的话，尽量调用含有4个参数的invalidate()方法而不是没有参数的invalidate()。没有参数的invalidate会强制重绘整个view。</p>

<p>另外一个非常耗时的操作是请求layout。任何时候执行requestLayout()，会使得Android UI系统去遍历整个View的层级来计算出每一个view的大小。如果找到有冲突的值，它会需要重新计算好几次。另外需要尽量保持View的层级是扁平化的，这样对提高效率很有帮助。</p>

<p>如果你有一个复杂的UI，你应该考虑写一个自定义的ViewGroup来执行他的layout操作。与内置的view不同，自定义的view可以使得程序仅仅测量这一部分，这避免了遍历整个view的层级结构来计算大小。</p>

<h2>Use Hardware Acceleration</h2>

<p>从Android 3.0开始，Android的2D图像系统可以通过GPU来加速。GPU硬件加速可以提高许多程序的性能。但是这并不是说它适合所有的程序。</p>

<p>参考<a href="http://developer.android.com/guide/topics/graphics/hardware-accel.html">Hardware Acceleration</a> 来学习如何在程序中启用加速。</p>

<p>一旦你开启了硬件加速，性能的提示并不一定可以明显察觉到。移动GPU在某些例如scaling,rotating与translating的操作中表现良好。但是对其他一些任务则表现不佳。</p>

<p>在下面的例子中，绘制pie是相对来说比较费时的。解决方案是把pie放到一个子view中，并设置View使用LAYER_TYPE_HARDWARE来进行加速,。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">private</span> <span class="kd">class</span> <span class="nc">PieView</span> <span class="kd">extends</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="kd">public</span> <span class="nf">PieView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(!</span><span class="n">isInEditMode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">setLayerType</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">LAYER_TYPE_HARDWARE</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="nd">@Override</span>
</span><span class='line'>       <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="kd">super</span><span class="o">.</span><span class="na">onDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">for</span> <span class="o">(</span><span class="n">Item</span> <span class="n">it</span> <span class="o">:</span> <span class="n">mData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">mPiePaint</span><span class="o">.</span><span class="na">setShader</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">mShader</span><span class="o">);</span>
</span><span class='line'>               <span class="n">canvas</span><span class="o">.</span><span class="na">drawArc</span><span class="o">(</span><span class="n">mBounds</span><span class="o">,</span>
</span><span class='line'>                       <span class="mi">360</span> <span class="o">-</span> <span class="n">it</span><span class="o">.</span><span class="na">mEndAngle</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">it</span><span class="o">.</span><span class="na">mEndAngle</span> <span class="o">-</span> <span class="n">it</span><span class="o">.</span><span class="na">mStartAngle</span><span class="o">,</span>
</span><span class='line'>                       <span class="kc">true</span><span class="o">,</span> <span class="n">mPiePaint</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="nd">@Override</span>
</span><span class='line'>       <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onSizeChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldw</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldh</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">mBounds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RectF</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">w</span><span class="o">,</span> <span class="n">h</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">RectF</span> <span class="n">mBounds</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这样的修改以后，PieChart.PieView.onDraw()只会在第一次现实的时候被调用。之后，pie chart会被缓存为一张图片，并通过GPU来进行重画不同的角度。</p>

<p>缓存图片到hardware layer会消耗video memory，而video memory又是有限的。基于这样的考虑，仅仅在用户触发scrolling的时候使用LAYER_TYPE_HARDWARE，在其他时候，使用LAYER_TYPE_NONE。</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/optimizing-view.html">http://developer.android.com/training/custom-views/optimizing-view.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 3 - 处理View的交互性)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-3/"/>
    <updated>2013-08-18T15:01:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/08/18/android-training-ui-creating-custom-views-lesson-3</id>
    <content type="html"><![CDATA[<p>绘制UI仅仅是创建自定义View的一部分。你还需要使得你的View能够以模拟现实世界的方式来进行反馈。Objects应该总是与现实情景能够保持一致。例如，图片不应该突然消失又从另外一个地方出现，因为在现实世界里面不会发生那样的事情。正确的应该是，图片从一个地方移动到另外一个地方。</p>

<p>用户应该可以感受到UI上的微小变化，并对这些变化反馈到现实世界中。例如，当用户做fling(迅速滑动)的动作，应该再滑动开始与结束的时候给用户一定的反馈。</p>

<p>这节课会演示如何使用Android framework的功能来为自定义的View添加那些现实世界中的行为。</p>

<!-- more -->


<h2>Handle Input Gestures</h2>

<p>像许多其他UI框架一样，Android提供一个输入事件模型。用户的动作会转换成触发一些回调函数的事件，你可以重写这些回调方法来定制你的程序应该如何响应用户的输入事件。在Android中最常用的输入事件是touch，它会触发<a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent">onTouchEvent(android.view.MotionEvent)</a>)的回调。重写这个方法来处理touch事件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Touch事件本身并不是特别有用。如今的touch UI定义了touch事件之间的相互作用，叫做gentures。例如tapping,pulling,flinging与zooming。为了把那些touch的源事件转换成gestures, Android提供了<a href="http://developer.android.com/reference/android/view/GestureDetector.html">GestureDetector</a>。</p>

<p>下面演示了如何构造一个GestureDetector。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">mListener</span> <span class="kd">extends</span> <span class="n">GestureDetector</span><span class="o">.</span><span class="na">SimpleOnGestureListener</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onDown</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">mDetector</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GestureDetector</span><span class="o">(</span><span class="n">PieChart</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">getContext</span><span class="o">(),</span> <span class="k">new</span> <span class="n">mListener</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>不管你是否使用GestureDetector.SimpleOnGestureListener, 你必须总是实现onDown()方法，并返回true。这一步是必须的，因为所有的gestures都是从onDown()开始的。如果你再onDown()里面返回false，系统会认为你想要忽略后续的gesture,那么GestureDetector.OnGestureListener的其他回调方法就不会被执行到了。一旦你实现了GestureDetector.OnGestureListener并且创建了GestureDetector的实例, 你可以使用你的GestureDetector来中止你在onTouchEvent里面收到的touch事件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mDetector</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(!</span><span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">stopScrolling</span><span class="o">();</span>
</span><span class='line'>           <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你传递一个touch事件到onTouchEvent()时，若这个个事件没有被认为是gesture中的一部分，它会返回false。你可以执行自定义的gesture-decection代码。</p>

<h2>Create Physically Plausible(貌似可信的) Motion</h2>

<p>Gestures是控制触摸设备的一种强有力的方式，但是除非你能够产出一个合理的触摸反馈，否则将是违反用户直觉的。一个很好的例子是fling手势，用户迅速的在屏幕上移动手指然后抬手离开屏幕。这个手势应该使得UI迅速的按照fling的方向进行滑动，然后慢慢停下来，就像是用户旋转一个飞轮一样。</p>

<p>幸运的是，Android有提供帮助类来模拟这些物理行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onFling</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">e1</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">e2</span><span class="o">,</span> <span class="kt">float</span> <span class="n">velocityX</span><span class="o">,</span> <span class="kt">float</span> <span class="n">velocityY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">mScroller</span><span class="o">.</span><span class="na">fling</span><span class="o">(</span><span class="n">currentX</span><span class="o">,</span> <span class="n">currentY</span><span class="o">,</span> <span class="n">velocityX</span> <span class="o">/</span> <span class="n">SCALE</span><span class="o">,</span> <span class="n">velocityY</span> <span class="o">/</span> <span class="n">SCALE</span><span class="o">,</span> <span class="n">minX</span><span class="o">,</span> <span class="n">minY</span><span class="o">,</span> <span class="n">maxX</span><span class="o">,</span> <span class="n">maxY</span><span class="o">);</span>
</span><span class='line'>   <span class="n">postInvalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> 尽管速率是通过GestureDetector来计算的，许多开发者感觉使用这个值使得fling动画太快。通常把x与y设置为4到8倍的关系。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">mScroller</span><span class="o">.</span><span class="na">isFinished</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mScroller</span><span class="o">.</span><span class="na">computeScrollOffset</span><span class="o">();</span>
</span><span class='line'>    <span class="n">setPieRotation</span><span class="o">(</span><span class="n">mScroller</span><span class="o">.</span><span class="na">getCurrY</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://developer.android.com/reference/android/widget/Scroller.html">Scroller</a> 类会为你计算滚动位置，但是他不会自动把哪些位置运用到你的view上面。你有责任确保View获取并运用到新的坐标。你有两种方法来实现这件事情：</p>

<ul>
<li>在调用fling()之后执行postInvalidate(), 这是为了确保能强制进行重画。这个技术需要每次在onDraw里面计算过scroll offsets(滚动偏移量)之后调用postInvalidate()。</li>
<li>使用<a href="http://developer.android.com/reference/android/animation/ValueAnimator.html">ValueAnimator</a></li>
</ul>


<p>第二个方法使用起来会稍微复杂一点，但是它更有效率并且避免了不必要的重画的view进行重绘。缺点是ValueAnimator是从API Level 11才有的。因此他不能运用到3.0的系统之前的版本上。</p>

<p><strong> Note: </strong> ValueAnimator虽然是API 11才有的，但是你还是可以在最低版本低于3.0的系统上使用它，做法是在运行时判断当前的API Level，如果低于11则跳过。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">mScroller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scroller</span><span class="o">(</span><span class="n">getContext</span><span class="o">(),</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'> <span class="n">mScrollAnimator</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'> <span class="n">mScrollAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="nd">@Override</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">valueAnimator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">if</span> <span class="o">(!</span><span class="n">mScroller</span><span class="o">.</span><span class="na">isFinished</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">mScroller</span><span class="o">.</span><span class="na">computeScrollOffset</span><span class="o">();</span>
</span><span class='line'>             <span class="n">setPieRotation</span><span class="o">(</span><span class="n">mScroller</span><span class="o">.</span><span class="na">getCurrY</span><span class="o">());</span>
</span><span class='line'>         <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">mScrollAnimator</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>             <span class="n">onScrollFinished</span><span class="o">();</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'> <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Make Your Transitions Smooth</h2>

<p>用户期待一个UI之间的切换是能够平滑过渡的。UI元素需要做到渐入淡出来取代突然出现与消失。Android从3.0开始有提供<a href="http://developer.android.com/guide/topics/graphics/prop-animation.html">property animation framework</a>,用来使得平滑过渡变得更加容易。</p>

<p>如果你不想改变View的属性，只是做一些动画的话，你可以使用ObjectAnimator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAutoCenterAnimator</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofInt</span><span class="o">(</span><span class="n">PieChart</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="s">&quot;PieRotation&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">mAutoCenterAnimator</span><span class="o">.</span><span class="na">setIntValues</span><span class="o">(</span><span class="n">targetAngle</span><span class="o">);</span>
</span><span class='line'><span class="n">mAutoCenterAnimator</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="n">AUTOCENTER_ANIM_DURATION</span><span class="o">);</span>
</span><span class='line'><span class="n">mAutoCenterAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想改变的是view的某些基础属性，你可以使用<a href="http://developer.android.com/reference/android/view/ViewPropertyAnimator.html">ViewPropertyAnimator</a> ,它能够同时执行多个属性的动画。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">animate</span><span class="o">().</span><span class="na">rotation</span><span class="o">(</span><span class="n">targetAngle</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="n">ANIM_DURATION</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/making-interactive.html">http://developer.android.com/training/custom-views/making-interactive.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 2 - 自定义Drawing)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-2/"/>
    <updated>2013-06-30T20:15:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-2</id>
    <content type="html"><![CDATA[<p>自定义view的最重要的一个部分是自定义它的外观。根据你的程序的需求，自定义绘制动作可能简单也可能很复杂。这节课会演示一些最常见的操作。</p>

<h2>Override onDraw()</h2>

<p>重绘一个自定义的view的最重要的步骤是重写onDraw()方法。onDraw()的参数是一个Canvas对象。Canvas类定义了绘制文本，线条，图像与许多其他图形的方法。你可以在onDraw方法里面使用那些方法来创建你的UI。</p>

<p>在你调用任何绘制方法之前，你需要创建一个Paint对象。</p>

<!-- more -->


<h2>Create Drawing Objects</h2>

<p>android.graphics framework把绘制定义为下面两类:</p>

<ul>
<li>绘制什么，由Canvas控制</li>
<li>如何绘制，由Paint控制</li>
</ul>


<p>例如Canvas提供绘制一条直线的方法，Paint提供直线颜色。所以在绘制之前，你需要创建一个或者多个Paint对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">mTextPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">ANTI_ALIAS_FLAG</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mTextPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">mTextColor</span><span class="o">);</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">mTextHeight</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">mTextHeight</span> <span class="o">=</span> <span class="n">mTextPaint</span><span class="o">.</span><span class="na">getTextSize</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">mTextPaint</span><span class="o">.</span><span class="na">setTextSize</span><span class="o">(</span><span class="n">mTextHeight</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">mPiePaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">ANTI_ALIAS_FLAG</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mPiePaint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">FILL</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mPiePaint</span><span class="o">.</span><span class="na">setTextSize</span><span class="o">(</span><span class="n">mTextHeight</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">mShadowPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mShadowPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="mh">0xff101010</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mShadowPaint</span><span class="o">.</span><span class="na">setMaskFilter</span><span class="o">(</span><span class="k">new</span> <span class="n">BlurMaskFilter</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="n">BlurMaskFilter</span><span class="o">.</span><span class="na">Blur</span><span class="o">.</span><span class="na">NORMAL</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>刚开始就创建对象是一个重要的优化技巧。Views会被频繁的重新绘制，初始化许多绘制对象需要花费昂贵的代价。在onDraw方法里面创建绘制对象会严重影响到性能并使得你的UI显得卡顿。</p>

<h2>Handle Layout Events</h2>

<p>为了正确的绘制你的view，你需要知道view的大小。复杂的自定义view通常需要根据在屏幕上的大小与形状执行多次layout计算。你不应该去估算这个view在屏幕上的显示大小。即使只有一个程序会使用你的view，仍然是需要处理屏幕大小不同，密度不同，方向不同所带来的影响。</p>

<p>尽管view有许多方法是用来计算大小的，但是大多数是不需要重写的。如果你的view不需要特别的控制它的大小，唯一需要重写的方法是<a href="http://developer.android.com/reference/android/view/View.html#onSizeChanged(int,%20int,%20int,%20int">onSizeChanged()</a>).</p>

<p>onSizeChanged()，当你的view第一次被赋予一个大小时，或者你的view大小被更改时会被执行。在onSizeChanged方法里面计算位置，间距等其他与你的view大小值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="c1">// Account for padding</span>
</span><span class='line'>   <span class="kt">float</span> <span class="n">xpad</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">getPaddingLeft</span><span class="o">()</span> <span class="o">+</span> <span class="n">getPaddingRight</span><span class="o">());</span>
</span><span class='line'>   <span class="kt">float</span> <span class="n">ypad</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">getPaddingTop</span><span class="o">()</span> <span class="o">+</span> <span class="n">getPaddingBottom</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Account for the label</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">mShowText</span><span class="o">)</span> <span class="n">xpad</span> <span class="o">+=</span> <span class="n">mTextWidth</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">float</span> <span class="n">ww</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">w</span> <span class="o">-</span> <span class="n">xpad</span><span class="o">;</span>
</span><span class='line'>   <span class="kt">float</span> <span class="n">hh</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">h</span> <span class="o">-</span> <span class="n">ypad</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Figure out how big we can make the pie.</span>
</span><span class='line'>   <span class="kt">float</span> <span class="n">diameter</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">ww</span><span class="o">,</span> <span class="n">hh</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想更加精确的控制你的view的大小，需要重写<a href="http://developer.android.com/reference/android/view/View.html#onMeasure(int,%20int">onMeasure()</a>)方法。这个方法的参数是View.MeasureSpec，它会告诉你的view的夫控件的大小。那些值被包装成int类型，你可以使用静态方法来获取其中的信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onMeasure</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// Try for a width based on our minimum</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">minw</span> <span class="o">=</span> <span class="n">getPaddingLeft</span><span class="o">()</span> <span class="o">+</span> <span class="n">getPaddingRight</span><span class="o">()</span> <span class="o">+</span> <span class="n">getSuggestedMinimumWidth</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">resolveSizeAndState</span><span class="o">(</span><span class="n">minw</span><span class="o">,</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Whatever the width ends up being, ask for a height that would let the pie</span>
</span><span class='line'>   <span class="c1">// get as big as it can</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">minh</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">w</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">mTextWidth</span> <span class="o">+</span> <span class="n">getPaddingBottom</span><span class="o">()</span> <span class="o">+</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">resolveSizeAndState</span><span class="o">(</span><span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">w</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">mTextWidth</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">setMeasuredDimension</span><span class="o">(</span><span class="n">w</span><span class="o">,</span> <span class="n">h</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码有三个重要的事情需要注意:</p>

<ul>
<li>计算的过程有把view的padding考虑进去。这个在后面会提到，这部分是view所控制的。</li>
<li>帮助方法resolveSizeAndState()是用来创建最终的宽高值的。这个方法会通过比较view的需求大小与spec值返回一个合适的View.MeasureSpec值，并传递到onMeasure方法中。</li>
<li>onMeasure()没有返回值。它通过调用setMeasuredDimension()来获取结果。调用这个方法是强制执行的，如果你遗漏了这个方法，会出现运行时异常。</li>
</ul>


<h2>Draw!</h2>

<p>每个view的onDraw都是不同的，但是有下面一些常见的操作：</p>

<ul>
<li>绘制文字使用drawText()。指定字体通过调用setTypeface(), 通过setColor()来设置文字颜色.</li>
<li>绘制基本图形使用drawRect(), drawOval(), drawArc(). 通过setStyle()来指定形状是否需要filled, outlined.</li>
<li>绘制一些复杂的图形，使用Path类. 通过给Path对象添加直线与曲线, 然后使用drawPath()来绘制图形. 和基本图形一样，paths也可以通过setStyle来设置是outlined, filled, both.</li>
<li>通过创建LinearGradient对象来定义渐变。调用setShader()来使用LinearGradient。</li>
<li>通过使用drawBitmap来绘制图片.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">super</span><span class="o">.</span><span class="na">onDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Draw the shadow</span>
</span><span class='line'>   <span class="n">canvas</span><span class="o">.</span><span class="na">drawOval</span><span class="o">(</span>
</span><span class='line'>           <span class="n">mShadowBounds</span><span class="o">,</span>
</span><span class='line'>           <span class="n">mShadowPaint</span>
</span><span class='line'>   <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Draw the label text</span>
</span><span class='line'>   <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">mData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">mCurrentItem</span><span class="o">).</span><span class="na">mLabel</span><span class="o">,</span> <span class="n">mTextX</span><span class="o">,</span> <span class="n">mTextY</span><span class="o">,</span> <span class="n">mTextPaint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Draw the pie slices</span>
</span><span class='line'>   <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mData</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">Item</span> <span class="n">it</span> <span class="o">=</span> <span class="n">mData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>       <span class="n">mPiePaint</span><span class="o">.</span><span class="na">setShader</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">mShader</span><span class="o">);</span>
</span><span class='line'>       <span class="n">canvas</span><span class="o">.</span><span class="na">drawArc</span><span class="o">(</span><span class="n">mBounds</span><span class="o">,</span>
</span><span class='line'>               <span class="mi">360</span> <span class="o">-</span> <span class="n">it</span><span class="o">.</span><span class="na">mEndAngle</span><span class="o">,</span>
</span><span class='line'>               <span class="n">it</span><span class="o">.</span><span class="na">mEndAngle</span> <span class="o">-</span> <span class="n">it</span><span class="o">.</span><span class="na">mStartAngle</span><span class="o">,</span>
</span><span class='line'>               <span class="kc">true</span><span class="o">,</span> <span class="n">mPiePaint</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Draw the pointer</span>
</span><span class='line'>   <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="n">mTextX</span><span class="o">,</span> <span class="n">mPointerY</span><span class="o">,</span> <span class="n">mPointerX</span><span class="o">,</span> <span class="n">mPointerY</span><span class="o">,</span> <span class="n">mTextPaint</span><span class="o">);</span>
</span><span class='line'>   <span class="n">canvas</span><span class="o">.</span><span class="na">drawCircle</span><span class="o">(</span><span class="n">mPointerX</span><span class="o">,</span> <span class="n">mPointerY</span><span class="o">,</span> <span class="n">mPointerSize</span><span class="o">,</span> <span class="n">mTextPaint</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/custom-drawing.html">http://developer.android.com/training/custom-views/custom-drawing.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 1 - 创建一个View类)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-1/"/>
    <updated>2013-06-30T18:47:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-1</id>
    <content type="html"><![CDATA[<p>设计良好的类总是相似的。它使用一个好用的接口来封装一个特定的功能，它有效的使用CPU与内存，等等。为了成为一个设计良好的类，自定义的view应该:</p>

<ul>
<li>遵守Android标准规则。</li>
<li>提供自定义的风格属性值并能够被Android XML Layout所识别。</li>
<li>发出可访问的事件。</li>
<li>能够兼容Android的不同平台。</li>
</ul>


<p>Android的framework提供了许多基类与XML标签用来帮助你创建一个符合上面要求的View。这节课会介绍如何使用Android framework来创建一个view的核心功能。</p>

<!-- more -->


<h2>Subclass a View</h2>

<p>Android framework里面定义的view类都继承自View。你自定义的view也可以直接继承View，或者你可以通过继承既有的一个子类(例如Button)来节约一点时间。</p>

<p>为了允许Android Developer Tools能够识别你的view，你必须至少提供一个constructor，它包含一个Contenx与一个AttributeSet对象作为参数。这个constructor允许layout editor创建并编辑你的view的实例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PieChart</span> <span class="kd">extends</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PieChart</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Define Custom Attributes</h2>

<p>为了添加一个内置的View到你的UI上，你需要通过XML属性来指定它的样式与行为。为了实现自定义的view的行为，你应该:</p>

<ul>
<li>为你的view在<declare-styleable>资源标签下定义自设的属性</li>
<li>在你的XML layout中指定属性值</li>
<li>在运行时获取属性值</li>
<li>把获取到的属性值应用在你的view上</li>
</ul>


<p>为了定义自设的属性，添加 <declare-styleable> 资源到你的项目中。放置于res/values/attrs.xml文件中。下面是一个attrs.xml文件的示例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;resources&gt;</span>
</span><span class='line'>   <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;PieChart&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>       <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;showText&quot;</span> <span class="na">format=</span><span class="s">&quot;boolean&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;labelPosition&quot;</span> <span class="na">format=</span><span class="s">&quot;enum&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>           <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&quot;left&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>           <span class="nt">&lt;enum</span> <span class="na">name=</span><span class="s">&quot;right&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/attr&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/declare-styleable&gt;</span>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码声明了2个自设的属性，<strong>showText</strong>与<strong>labelPosition</strong>，它们都归属于PieChart的项目下的styleable实例。styleable实例的名字，通常与自定义的view名字一致。尽管这并没有严格规定要遵守这个convention，但是许多流行的代码编辑器都依靠这个命名规则来提供statement completion。</p>

<p>一旦你定义了自设的属性，你可以在layout XML文件中使用它们。唯一不同的是你自设的属性是归属于不同的命名空间。不是属于http://schemas.android.com/apk/res/android的命名空间，它们归属于http://schemas.android.com/apk/res/[your package name]。例如，下面演示了如何为PieChart使用上面定义的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>   <span class="na">xmlns:custom=</span><span class="s">&quot;http://schemas.android.com/apk/res/com.example.customviews&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;com.example.customviews.charting.PieChart</span>
</span><span class='line'>     <span class="na">custom:showText=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>     <span class="na">custom:labelPosition=</span><span class="s">&quot;left&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了避免输入长串的namespace名字，示例上面使用了:custom作为别名，你也可以选择其他的名称所为你的namespace。</p>

<p>请注意，如果你的view是一个inner class，你必须指定这个view的outer class。同样的，如果PieChart有一个inner class叫做PieView。为了使用这个类中自设的属性，你应该使用com.example.customviews.charting.PieChart$PieView.</p>

<h2>Apply Custom Attributes</h2>

<p>当view从XML layout被创建的时候，在xml标签下的属性值都是从resource下读取出来并传递到view的constructor作为一个AttributeSet参数。尽管可以从AttributeSet中直接读取数值，可是这样做有些弊端（<em>没有看懂下面的两个原因</em>）：</p>

<ul>
<li>拥有属性的资源并没有经过分解</li>
<li>Styles并没有运用上</li>
</ul>


<p>取而代之的是，通过obtainStyledAttributes()来获取属性值。这个方法会传递一个<a href="http://developer.android.com/reference/android/content/res/TypedArray.html">TypedArray</a>对象，它是间接referenced并且styled的。</p>

<p>请看下面的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">PieChart</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>   <span class="n">TypedArray</span> <span class="n">a</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getTheme</span><span class="o">().</span><span class="na">obtainStyledAttributes</span><span class="o">(</span>
</span><span class='line'>        <span class="n">attrs</span><span class="o">,</span>
</span><span class='line'>        <span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">PieChart</span><span class="o">,</span>
</span><span class='line'>        <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">mShowText</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">PieChart_showText</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>       <span class="n">mTextPos</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">PieChart_labelPosition</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">a</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>清注意TypedArray对象是一个shared资源，必须被在使用后进行回收。</p>

<h2>Add Properties and Events</h2>

<p>Attributes是一个强大的控制view的行为与外观的方法，但是他们仅仅能够在view被初始化的时候被读取到。为了提供一个动态的行为，需要暴露出一些合适的getter 与setter方法。下面的代码演示了如何使用这个技巧:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isShowText</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">mShowText</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setShowText</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">showText</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">mShowText</span> <span class="o">=</span> <span class="n">showText</span><span class="o">;</span>
</span><span class='line'>   <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'>   <span class="n">requestLayout</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意，在setShowText方法里面有调用<a href="http://developer.android.com/reference/android/view/View.html#invalidate(">invalidate()</a>) and <a href="http://developer.android.com/reference/android/view/View.html#requestLayout(">requestLayout()</a>). 当view的某些内容发生变化的时候，需要调用invalidate来通知系统对这个view进行redraw，当某些元素变化会引起组件大小变化时，需要调用requestLayout方法。</p>

<p>自定义的view也需要能够支持响应事件的监听器。例如，PieChart暴露了一个自设的事件OnCurrentItemChanged来通知监听器，用户已经切换了焦点到一个新的组件上。</p>

<p>我们很容易忘记了暴露属性与事件，特别是当你是这个view的唯一用户时。请花费一些时间来仔细定义你的view的交互。一个好的规则是总是暴露任何属性与事件。</p>

<h2>Design For Accessibility</h2>

<p>Your custom view should support the widest range of users. This includes users with disabilities that prevent them from seeing or using a touchscreen. To support users with disabilities, you should:</p>

<ul>
<li>Label your input fields using the android:contentDescription attribute</li>
<li>Send accessibility events by calling sendAccessibilityEvent() when appropriate.</li>
<li>Support alternate controllers, such as D-pad and trackball</li>
</ul>


<p>For more information on creating accessible views, see <a href="http://developer.android.com/guide/topics/ui/accessibility/apps.html#custom-views">Making Applications Accessible</a> in the Android Developers Guide.</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/create-view.html">http://developer.android.com/training/custom-views/create-view.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[UI] - 创建自定义的Views(Lesson 0 - 章节概览)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-0/"/>
    <updated>2013-06-30T18:23:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/06/30/android-training-ui-creating-custom-views-lesson-0</id>
    <content type="html"><![CDATA[<p>Android的framework有大量的Views用来与用户进行交互并显示不同种类的数据。但是有时候你的程序有个特殊的需求，而Android内置的views组件并不能实现。这一章节会演示如何创建你自己的views，并使得它们是robust与reusable的。</p>

<p><strong>Dependencies and Prerequisites</strong></p>

<p>Android 2.1 (API level 7) or higher</p>

<p><strong>YOU should also read</strong></p>

<ul>
<li><a href="http://developer.android.com/guide/topics/ui/custom-components.html">Custom Components</a></li>
<li><a href="http://developer.android.com/guide/topics/ui/ui-events.html">Input Events</a></li>
<li><a href="http://developer.android.com/guide/topics/graphics/prop-animation.html">Property Animation</a></li>
<li><a href="http://developer.android.com/guide/topics/graphics/hardware-accel.html">Hardware Acceleration</a></li>
<li><a href="http://developer.android.com/guide/topics/ui/accessibility/index.html">Accessibility</a> developer guide</li>
</ul>


<p><strong>Try it out</strong></p>

<p>Download the sample<br/>
<a href="http://developer.android.com/shareables/training/CustomView.zip">CustomView.zip</a></p>

<!-- more -->


<h2>Lesson</h2>

<p><strong>(1)创建一个View类</strong></p>

<p>Create a class that acts like a built-in view, with custom attributes and support from the ADT layout editor.</p>

<p><strong>(2)自定义Drawing</strong></p>

<p>Make your view visually distinctive using the Android graphics system.</p>

<p><strong>(3)使得View是可交互的</strong></p>

<p>Users expect a view to react smoothly and naturally to input gestures. This lesson discusses how to use gesture detection, physics, and animation to give your user interface a professional feel.</p>

<p><strong>(4)优化View</strong></p>

<p>No matter how beautiful your UI is, users won&#8217;t love it if it doesn&#8217;t run at a consistently high frame rate. Learn how to avoid common performance problems, and how to use hardware acceleration to make your custom drawings run faster.</p>

<p><strong>学习自：<a href="http://developer.android.com/training/custom-views/index.html">http://developer.android.com/training/custom-views/index.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Graphics] - 高效地显示Bitmap(Lesson 4 - 优化Bitmap的内存使用)]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/05/19/android-training-graphics-displaying-bitmaps-efficiently-lesson-4/"/>
    <updated>2013-05-19T14:43:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/05/19/android-training-graphics-displaying-bitmaps-efficiently-lesson-4</id>
    <content type="html"><![CDATA[<p>作为缓存Bitmaps的进一步延伸, 为了促进GC与bitmap的重用，你还有一些特定的事情可以做. 推荐的策略会根据Android的版本不同而有所差异. <a href="http://developer.android.com/shareables/training/BitmapFun.zip">BitmapFun</a>的示例程序会演示如何设计你的程序使得能够在不同的Android平台上高效的运行.</p>

<p>我们首先要知道Android管理bitmap memory的演变进程:</p>

<ul>
<li>在Android 2.2 (API level 8)以及之前, 当GC发生时, 你的应用的线程是会stopped的. 这导致了一个滞后，它会降低效率. <strong>在Android 2.3上，添加了并发GC的机制, 这意味着在一个bitmap不再被引用到之后，内存会被立即reclaimed.</strong></li>
<li>在Android 2.3.3 (API level 10)已经之后, 一个bitmap的像素级数据是存放在native内存中的. 这些数据与bitmap本身是隔离的, bitmap本身是被存放在Dalvik heap中. 在native内存中的pixel数据不是以可以预测的方式去释放的, 这意味着有可能导致一个程序容易超过它的内存限制并Crash. <strong>在Android 3.0 (API Level 11), pixel数据则是与bitmap本身一起存放在dalvik heap中.</strong></li>
</ul>


<p>下面会介绍如何在不同的Android版本上优化bitmap内存使用.</p>

<!-- more -->


<h2>Manage Memory on Android 2.3.3 and Lower</h2>

<p>在Android 2.3.3 (API level 10) 以及更低版本上，推荐使用<a href="http://developer.android.com/reference/android/graphics/Bitmap.html#recycle(">recycle()</a>). 如果在你的程序中显示了大量的bitmap数据，你很可能会遇到OutOfMemoryError错误. recycle()方法可以使得程序尽快的reclaim memory.<br/>
<strong>Caution:</strong>只有你确保这个bitmap不再需要用到的时候才应该使用recycle(). 如果你执行recycle()，然后尝试绘画这个bitmap, 你将得到错误:&#8221;Canvas: trying to use a recycled bitmap&#8221;.</p>

<p>下面的例子演示了使用recycle()的例子. 它使用了引用计数的方法(mDisplayRefCount 与 mCacheRefCount)来追踪一个bitmap目前是否有被显示或者是在缓存中. 当下面条件满足时回收bitmap:</p>

<ul>
<li>mDisplayRefCount 与 mCacheRefCount 的引用计数均为 0.</li>
<li>bitmap不为null, 并且它还没有被回收.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">mCacheRefCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">mDisplayRefCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">// Notify the drawable that the displayed state has changed.</span>
</span><span class='line'><span class="c1">// Keep a count to determine when the drawable is no longer displayed.</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIsDisplayed</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isDisplayed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isDisplayed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDisplayRefCount</span><span class="o">++;</span>
</span><span class='line'>            <span class="n">mHasBeenDisplayed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDisplayRefCount</span><span class="o">--;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// Check to see if recycle() can be called.</span>
</span><span class='line'>    <span class="n">checkState</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notify the drawable that the cache state has changed.</span>
</span><span class='line'><span class="c1">// Keep a count to determine when the drawable is no longer being cached.</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIsCached</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isCached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isCached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mCacheRefCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mCacheRefCount</span><span class="o">--;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// Check to see if recycle() can be called.</span>
</span><span class='line'>    <span class="n">checkState</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">checkState</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// If the drawable cache and display ref counts = 0, and this drawable</span>
</span><span class='line'>    <span class="c1">// has been displayed, then recycle.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mCacheRefCount</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mDisplayRefCount</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mHasBeenDisplayed</span>
</span><span class='line'>            <span class="o">&amp;&amp;</span> <span class="n">hasValidBitmap</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">getBitmap</span><span class="o">().</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">synchronized</span> <span class="kt">boolean</span> <span class="nf">hasValidBitmap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">getBitmap</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bitmap</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">bitmap</span><span class="o">.</span><span class="na">isRecycled</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Manage Memory on Android 3.0 and Higher</h2>

<p>在Android 3.0 (API Level 11) 介绍了<a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inBitmap">BitmapFactory.Options.inBitmap</a>. 如果这个值被设置了，decode方法会在加载内容的时候去reuse已经存在的bitmap. 这意味着bitmap的内存是被reused的，这样可以提升性能, 并且减少了内存的allocation与de-allocation. 在使用inBitmap时有几个注意点(caveats):</p>

<ul>
<li>reused的bitmap必须和原数据内容大小一致, 并且是JPEG 或者 PNG 的格式 (或者是某个resource 与 stream).</li>
<li>reused的bitmap的<a href="http://developer.android.com/reference/android/graphics/Bitmap.Config.html">configuration</a>值如果有设置，则会覆盖掉<a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inPreferredConfig">inPreferredConfig</a>值.</li>
<li>你应该总是使用decode方法返回的bitmap, 因为你不可以假设reusing的bitmap是可用的(例如，大小不对).</li>
</ul>


<h3>Save a bitmap for later use</h3>

<p>下面演示了一个已经存在的bitmap是如何被存放起来以便后续使用的. 当一个应用运行在Android 3.0或者更高的平台上并且bitmap被从LruCache中移除时, bitmap的一个soft reference会被存放在Hashset中，这样便于之后有可能被inBitmap进行reuse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashSet</span><span class="o">&lt;</span><span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;&gt;</span> <span class="n">mReusableBitmaps</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">LruCache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">BitmapDrawable</span><span class="o">&gt;</span> <span class="n">mMemoryCache</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you&#39;re running on Honeycomb or newer, create</span>
</span><span class='line'><span class="c1">// a HashSet of references to reusable bitmaps.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">hasHoneycomb</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mReusableBitmaps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;&gt;();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">mMemoryCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LruCache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">BitmapDrawable</span><span class="o">&gt;(</span><span class="n">mCacheParams</span><span class="o">.</span><span class="na">memCacheSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Notify the removed entry that is no longer being cached.</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">entryRemoved</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">evicted</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">,</span>
</span><span class='line'>            <span class="n">BitmapDrawable</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">BitmapDrawable</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">RecyclingBitmapDrawable</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isInstance</span><span class="o">(</span><span class="n">oldValue</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// The removed entry is a recycling drawable, so notify it</span>
</span><span class='line'>            <span class="c1">// that it has been removed from the memory cache.</span>
</span><span class='line'>            <span class="o">((</span><span class="n">RecyclingBitmapDrawable</span><span class="o">)</span> <span class="n">oldValue</span><span class="o">).</span><span class="na">setIsCached</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// The removed entry is a standard BitmapDrawable.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">hasHoneycomb</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// We&#39;re running on Honeycomb or later, so add the bitmap</span>
</span><span class='line'>                <span class="c1">// to a SoftReference set for possible use with inBitmap later.</span>
</span><span class='line'>                <span class="n">mReusableBitmaps</span><span class="o">.</span><span class="na">add</span>
</span><span class='line'>                        <span class="o">(</span><span class="k">new</span> <span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;(</span><span class="n">oldValue</span><span class="o">.</span><span class="na">getBitmap</span><span class="o">()));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Use an existing bitmap</h3>

<p>在运行的程序中，decoder方法会去做检查看是否有可用的bitmap. 例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Bitmap</span> <span class="nf">decodeSampledBitmapFromFile</span><span class="o">(</span><span class="n">String</span> <span class="n">filename</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">reqWidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">reqHeight</span><span class="o">,</span> <span class="n">ImageCache</span> <span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span><span class="o">();</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">filename</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If we&#39;re running on Honeycomb or newer, try to use inBitmap.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Utils</span><span class="o">.</span><span class="na">hasHoneycomb</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">addInBitmapOptions</span><span class="o">(</span><span class="n">options</span><span class="o">,</span> <span class="n">cache</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">filename</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的代码演示了上面被执行的addInBitmapOptions()方法. 它会为inBitmap查找一个已经存在的bitmap设置为value. 注意这个方法只是去为inBitmap尝试寻找合适的值，但是并不一定能够找到:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addInBitmapOptions</span><span class="o">(</span><span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ImageCache</span> <span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// inBitmap only works with mutable bitmaps, so force the decoder to</span>
</span><span class='line'>    <span class="c1">// return mutable bitmaps.</span>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="na">inMutable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Try to find a bitmap to use for inBitmap.</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">inBitmap</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">getBitmapFromReusableSet</span><span class="o">(</span><span class="n">options</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">inBitmap</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// If a suitable bitmap has been found, set it as the value of</span>
</span><span class='line'>            <span class="c1">// inBitmap.</span>
</span><span class='line'>            <span class="n">options</span><span class="o">.</span><span class="na">inBitmap</span> <span class="o">=</span> <span class="n">inBitmap</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This method iterates through the reusable bitmaps, looking for one </span>
</span><span class='line'><span class="c1">// to use for inBitmap:</span>
</span><span class='line'><span class="kd">protected</span> <span class="n">Bitmap</span> <span class="nf">getBitmapFromReusableSet</span><span class="o">(</span><span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mReusableBitmaps</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mReusableBitmaps</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;&gt;</span> <span class="n">iterator</span>
</span><span class='line'>                <span class="o">=</span> <span class="n">mReusableBitmaps</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">item</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">item</span> <span class="o">&amp;&amp;</span> <span class="n">item</span><span class="o">.</span><span class="na">isMutable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Check to see it the item can be used for inBitmap.</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">canUseForInBitmap</span><span class="o">(</span><span class="n">item</span><span class="o">,</span> <span class="n">options</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">bitmap</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// Remove from reusable set so it can&#39;t be used again.</span>
</span><span class='line'>                    <span class="n">iterator</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Remove from the set if the reference has been cleared.</span>
</span><span class='line'>                <span class="n">iterator</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，下面这个方法去判断候选bitmap是否满足inBitmap的大小条件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">canUseForInBitmap</span><span class="o">(</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">candidate</span><span class="o">,</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">targetOptions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">targetOptions</span><span class="o">.</span><span class="na">outWidth</span> <span class="o">/</span> <span class="n">targetOptions</span><span class="o">.</span><span class="na">inSampleSize</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">targetOptions</span><span class="o">.</span><span class="na">outHeight</span> <span class="o">/</span> <span class="n">targetOptions</span><span class="o">.</span><span class="na">inSampleSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Returns true if &quot;candidate&quot; can be used for inBitmap re-use with</span>
</span><span class='line'>    <span class="c1">// &quot;targetOptions&quot;.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">candidate</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">==</span> <span class="n">width</span> <span class="o">&amp;&amp;</span> <span class="n">candidate</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">==</span> <span class="n">height</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/displaying-bitmaps/manage-memory.html">http://developer.android.com/training/displaying-bitmaps/manage-memory.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Notes 05 - Tasks and Back Stack]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/04/20/android-notes-05-task-and-back-stack/"/>
    <updated>2013-04-20T20:42:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/04/20/android-notes-05-task-and-back-stack</id>
    <content type="html"><![CDATA[<ul>
<li>所有的activities都归属于一个task。</li>
<li>一个task包含了一些activities，这些activities以用户与他们的交互前后为顺序存放在task中。</li>
<li>Tasks可以把activies放置在background并且保存每一个activites的状态，以便于用户可以切换到其他task而不至于丢失之前的活动状态。</li>
</ul>


<h1>要点概述</h1>

<p>一个程序通常包含了多个actvities。每一个activity都应该围绕用户需要执行的一个特定功能而进行设计，并且可以启动其他的activites。例如:一个邮件程序应该拥有一个显示新邮件的列表。当用户选择其中一封邮件，一个新的activity将打开用来显示邮件内容。</p>

<!-- more -->


<p>一个activity甚至可以启动设备上其他程序的activites。例如：如果你的程序想要发送邮件，你可以定义一个intent来表达你的请求。其他可以接收这个请求的程序则会对这个请求作出响应。当使用其他程序的组件把邮件发送出去之后，你自己的activity将会resume，这样另外一个程序的发邮件组件看起来像是你的程序中的一部分。尽管真正发邮件的activites也许是来自其他不同的程序，Android会通过保存那些activites到同一个task中的方式让用户感觉到无缝的体验。</p>

<p>一个task是用户执行一个确定的动作所会用到的activites的集合。那些activities被安置到一个stack中 (也就是&#8221;back stack&#8221;), 他们以每个activity被打开的顺序方式存放在stack中。</p>

<p>设备Home界面是大多数tasks的起始点。当用户点击程序在launcher或者Home上的启动图标时，这个程序的task则变成了foreground的。如果程序之前不存在task(程序最近并没有被使用过), 那么一个新的task将被创建并且程序的&#8221;main&#8221; activity将被打开并作为stack的root activity。</p>

<p>当目前的activity启动另外一个activity时，新的activity被压入栈中作为栈顶并且获取到了focus。前面的那个activity则以stopped的状态继续保留在stack中。当一个activity stops时，系统会保留它的UI状态。当用户点击back按钮时，当前的activity从栈顶退出并被destroyed，之前的activity则resume(之前保存的UI状态得到恢复). 在栈中的Activities的是不会被重新排序的，仅仅是做入栈与出栈的动作。当被启动时入栈，用户点击后退时出栈。下图演示了上面提到的情况：</p>

<p><img src="http://kesenhoo.github.com/images/articles/diagram_backstack.png" title="Figure 1. A representation of how each new activity in a task adds an item to the back stack. When the user presses the Back button, the current activity is destroyed and the previous activity resumes." alt="diagram_backstack.png" /></p>

<p>如果用户持续点击back按钮，那么在栈中的每一个activity都会做退栈并显示之前activity的动作, 直到用户退回到Home界面(或者是用户开始task的地方).当所有的activities都从栈中被移除之后，这个task也就消失了。</p>

<p>一个task是一个紧密结合的单元，当用户开始一个新的task或者通过点击Home按钮回到Home桌面时，之前的task会整体移动到background。当在background时，在task中的所有的activity都是stopped状态的。但是这个task的回退栈仍然保留了与系统交互的特质，仅仅是失去了focus而已。如下图所示：</p>

<p><img src="http://kesenhoo.github.com/images/articles/diagram_multitasking.png" title="Figure 2. Two tasks: Task B receives user interaction in the foreground, while Task A is in the background, waiting to be resumed." alt="diagram_multitasking.png" /></p>

<p>一个task可以返回到&#8221;foreground&#8221;，这样用户可以从他们离开的地方重新开始操作。例如，当前task(Task A)的栈中有三个activities. 用户点击Home按钮，然后从桌面启动一个新的程序. 当Home界面出现时，Task A变成了background的. 当新的程序启动，系统为它启动一个新的task，里面包含了它自己的activites. 在用户与那个程序交互完之后，重新退回桌面并选择之前启动的task A. 这个时候，Task A重新回到foreground, 在stack中的那三个activities被重新选中，栈顶的那个activity被resume. 此时，用户仍然可以选择通过切回Home，再次启动task B.( 或者通过长按Home按钮触发最近使用的task界面进行选择). 这便是Android中的多任务的一个例子.</p>

<p><strong>Note:</strong> 众多tasks都可以一并在后台被Hold住。然而，如果用户同时执行了多个后台任务，系统便会为了恢复内存而开始销毁后台activities. 这会导致activity状态丢失. 关于着部分内容，请看下面的Activity state部分.</p>

<p>因为在back stack中的activities是不会被重新调整顺序的。如果你的程序中的某个特定的activity可以被多个activity所叫起，那么将会为那个特定activity创建一个新的实例并压入栈中(而不是把那个activity之前的实例移动到栈顶). 如下图所示:你程序中的一个activity可以被多次实例化(即使是在不同的task中)。如果用户通过点击Back按钮回退，每一个实例都将以他们被打开的顺序依次被重新呈现。然而，如果你不想一个activity被重复实例化，你可以修改这种行为。关于如何修改这种行为，将在下面的Managing Tasks中讲到.</p>

<p><img src="http://kesenhoo.github.com/images/articles/diagram_multiple_instances.png" title="Figure 3. A single activity is instantiated multiple times." alt="diagram_multiple_instances.png" /></p>

<p><strong>总结一下系统默认的activities与tasks的行为:</strong></p>

<ul>
<li>当Activity A启动Activity B时, Activity A会是stopped, 但是系统会保存它的状态(例如scroll的位置与填表格的文字). 如果用户在activity B时点击Back按钮，那么activity A会恢复它之前保存的状态信息.</li>
<li>当用户通过点击Home按钮离开一个task时，当前的activity会是stopped并且它的task会退到background. 系统保留task中的每一个activity. 如果用户之后通过点击启动图标来重新叫起它,task会成为foreground的并且栈顶的activity会得到恢复.</li>
<li>如果用户点击Back按钮, 当前activity会从栈中退出并被destroyed. 在栈中的前一个activity得到resumed. 当一个activity被destroyed, 系统不会再保留activity的状态信息.</li>
<li>Activities可以被多次实例化，即使是请求来自其他tasks.</li>
</ul>


<h1>Saving Activity State(保存Activity状态)</h1>

<p>正如上面提到的，当activity stopped时，系统默认会保存它的状态. 这样的话, 当用户回退到之前的activity, 它的UI将和离开时一致. 然而, 如果activity被destoryed并且需要recreated时，你可以并且应该主动使用activity的callback方法来保存它的状态信息.</p>

<p>当系统stop你的某个activity时, 系统可能会在需要恢复内存时destory那个stop状态的activity. 当发生这件事时，关于activity的状态信息则会丢失. 即使真的发生那样的情况, 系统仍然为那个activity在back stack中保留了位置, 但是当这个activity成为栈顶activity时, 系统必须recreate它(而不是resume它). 为了避免丢失用户的工作内容, 你应该主动通过实现<a href="http://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle">onSaveInstanceState()</a>)回调方法来保存那些信息.</p>

<p>想了解更多关于如何保存activity的状态，请参考<a href="http://developer.android.com/guide/components/activities.html#SavingActivityState">Activities</a>.</p>

<h1>Managing Tasks(管理Tasks)</h1>

<p>Android系统默认的管理tasks与back stack的方法使用于大部分情况, 对于大多数程序来说, 你不需要担心你的activites是如何与task进行联系的，它们又是如何存放在back stack中的. 但是你可能想要打断通常的行为, 可能你想要在你的程序中的某个activity被启动时会创建一个新的task而不是放置到旧的task中; 或者, 当你启动一个activity，你想要把已经存在的某个实例放置到栈顶(而不是在栈顶创建一个新的实例); 又或者说, 你想要在用户退出task时除了根activity之外清除栈中其它的activities.</p>

<p>你可以通过在manifest的<activity>标签下设置属性，并且在把intent传递给startActivity()方法之前为intent设置flag.</p>

<p>关于此事, 在<activity>标签下可以设置的主要属性为:<br/>
* taskAffinity
* launchMode
* allowTaskReparenting
* clearTaskOnLaunch
* alwaysRetainTaskState
* finishOnTaskLaunch</p>

<p>你可以为intent设置flag的主要值有:<br/>
* FLAG_ACTIVITY_NEW_TASK
* FLAG_ACTIVITY_CLEAR_TOP
* FLAG_ACTIVITY_SINGLE_TOP</p>

<p>下面将会讲解如何使用上面定义的方法<br/>
<strong>Caution:</strong> 大多数程序不应该打断系统默认的activities与tasks之间的行为. 如果你确定有必要修改默认的行为, 请谨慎使用并确保用户切换与回退的行为是可用正常的. 请确保你的设计行为不会对用户期待的体验有冲突.</p>

<h2>(0)Defining launch modes(定义启动模式)</h2>

<p>启动模式允许你定义一个activity的实例与当前task是如何结合的. 你可以用下面两种方式来定义不同的启动模式:</p>

<ul>
<li><p><strong>Using the manifest file</strong><br/>
当你在manifest文件中定义一个activity时，你可以指定当它启动时与task的结合方式.</p></li>
<li><p><strong>Using Intent flags</strong><br/>
当你调用startActivity(), 你可以对intent进行设置flag来表示这个activity将与task如何进行结合.</p></li>
</ul>


<p>像这样, 如果Activity A 启动 Activity B, 那么Activity B 可以在它的manifest中定义它应该如何与当前的task进行联合，同样Activity A 也可以请求Activity B 应该如何与当前task进行结合. <strong>如果两个都有定义，那么A的请求(定义在Intent中的)的优先级比B的请求(定义在manifest中)要更高</strong>.</p>

<p><strong>Note:</strong>某些可以定义在manifest中的启动模式并不一定在intent flag中可以找到对应的方式. 同样,某些在intent flag中可以找到的并不一定可以在manifest中进行设置.</p>

<h3>Using the manifest file</h3>

<p>在manifest的<activity>标签下设置<strong>launchMode</strong>属性，一共可以设置下面4种类型的启动模式:</p>

<hr />

<ul>
<li><strong>&#8220;standard&#8221;</strong> (the default mode)</li>
</ul>


<p>系统默认的启动模式. 系统在task中创建一个新的实例，activity可以被多次实例化. 每一个实例可以属于不同的task, 同样一个task可以有多个实例.</p>

<ul>
<li><strong>&#8220;singleTop&#8221;</strong></li>
</ul>


<p>如果activity的实例已经存在于当前task的栈顶, 系统会通过调用它的onNewIntent()方法把intent导向那个实例, 而不是为那个activity创建新的实例. activity可以被多次实例化，每一个实例可以属于不同的tasks, 同样一个task可以有多个实例 (仅仅当目前栈顶activity不是那个activity时才行，否则栈顶元素就是想要创建的activity的实例的话，则不会重复创建).</p>

<p>例如, 某个栈中的元素由root至top依次为activity A-B-C-D; Acivity D是栈顶. 一个intent来到activity D中. 如果D是默认的&#8221;standard&#8221;启动模式, 那么stack则会变成A-B-C-D-D. 然而, 如果D的启动模式是&#8221;singleTop&#8221;, 那么D将通过onNewIntent()来接受那个intent, 栈结构仍然是A-B-C-D. 然而, 如果Activity B接受到一个intent, 那么即使现在是single top模式，仍然会创建一个新的B加入到栈中.(A-B-C-D-B)</p>

<p><strong>Note:</strong> 当一个activity的实例被创建时，用户可以点击Back按钮来回退到之前的activity. <strong>但是当已经存在的某个实例需要处理一个新的intent时，用户在这个intent还没有到达onNewIntent()方法之前是没有办法通过点击back按钮来回退的.</strong></p>

<ul>
<li><strong>&#8220;singleTask&#8221;</strong></li>
</ul>


<p>系统会创建一个新的task并把实例化的activity作为task的root元素(这个task还可以继续添加其他activity的实例). <strong>然而, 如果这个activity的实例已经存在于另外一个task中，系统会通过调用onNewIntent()方法把intent导向已经存在的实例中, 而不是创建一个新的实例. 某一时刻，activity的实例只能存在一个.</strong></p>

<p><strong>Note:</strong>尽管activity是在一个新的task中被启动的, Back按钮仍然是可以回退到上一个activity的.</p>

<ul>
<li><strong>&#8220;singleInstance&#8221;.</strong></li>
</ul>


<p>除了系统不会再对拥有的那个activity的task添加新的其他实例之外，与&#8221;singleTask&#8221;是类似的. activity的实例总是唯一的，并且是task中唯一的一个元素. 并且task是新创建的.</p>

<hr />

<p>另外一个例子, Android的Browser程序通过为web browser activity在manifest中指定singleTask模式定义了activity总是在它自己的taks中打开. 这意味着，如果你的程序定义了一个intent来打开Android Browser, 它的activity并不是在你的程序task中被打开的. 要么为browser启动一个新的task，要么把browser正在后台允运行的task带到forgound来处理那个Intent.<br/>
<strong>???</strong>(<em>奇怪，前面不是说intent请求的优先级比manifest中的要高吗？这里怎么会这样？</em>)</p>

<p>不管是启动一个新的task还是在原来的task中，Back按钮都可以回退到前面的activity. 然而，如果你启动的activity的launch mode定义为singleTask, 然后如果那个activity的某个实例已经存在于一个background的task中，那么这个background的task的所有activites会<strong>整个全部</strong>被带到foreground的. 下图Figure 4 演示了这种情况：</p>

<p><img src="http://kesenhoo.github.com/images/articles/diagram_backstack_singletask_multiactivity.png" title="Figure 4. A representation of how an activity with launch mode &quot;singleTask&quot; is added to the back stack. If the activity is already a part of a background task with its own back stack, then the entire back stack also comes forward, on top of the current task." alt="diagram_backstack_singletask_multiactivity.png" /></p>

<p><strong>Note:</strong> 通过manifest中launchMode属性设置的方式定义的启动模式可以被intent中的flag所覆盖，请看下面的解释.</p>

<h3>Using Intent flags</h3>

<ul>
<li><p>FLAG_ACTIVITY_NEW_TASK<br/>
在新的task中启动activity. 如果你要启动的activity已经存在于某个运行的task中, 那么这个task会整个被提升为foregound的，activity会通过onNewIntent()来接收intent.这部分的行为与singleTask启动模式是一致的.</p></li>
<li><p>FLAG_ACTIVITY_SINGLE_TOP<br/>
如果在栈顶的activity接受到这样的intent, 那么已经存在于栈顶的实例会通过onNewIntent()来获取intent, 而不是创建一个新的实例. 这部门的行为与singleTop启动模式是一致的.</p></li>
<li><p>FLAG_ACTIVITY_CLEAR_TOP<br/>
如果被启动的activity已经存在于当前运行的task中, 不是为那个activity启动一个新的实例，而是在这个activity实例之上的activities都被destoryed，intent被通过onNewIntent()传递到这个实例中，并且这个时候，它就成了栈顶元素. 这个行为在launchMode的属性中并没有对应的值.<br/>
FLAG_ACTIVITY_CLEAR_TOP通常与FLAG_ACTIVITY_NEW_TASK同时使用. 当他们结合一起时，那意味着把已经存在的activity放置到另外一个task中并且把它作为栈顶元素开始与用户进行交互.</p></li>
</ul>


<p><strong>Note:</strong>如果被启动的activity的launch mode是&#8221;standard&#8221;, 那么这个activity同样会被先清除掉，然后创建一个新的实例来接受intent. 那是因为当launch mode是standard时，新的实例总是为了新的intent而被创建.</p>

<h2>(1)Handling affinities(处理联姻关系)</h2>

<p>Affinity(联姻)意味着activity更倾向归属于哪一个task. 默认的，来自同一程序的所有的activities会拥有同样的联姻关系. 因此，他们更倾向于处于同一个task中. 然而, 你可以修改这种默认的行为. 在不同程序中的activites可以有同样的联姻关系，或者同一程序中的不同activites可以分配到不同的task联姻关系中</p>

<p>可以在manifest的activity中设置taskAffinity属性，一共有下面两种情况：</p>

<ul>
<li>When the intent that launches an activity contains the FLAG_ACTIVITY_NEW_TASK flag.</li>
</ul>


<p>A new activity is, by default, launched into the task of the activity that called startActivity(). It&#8217;s pushed onto the same back stack as the caller. However, if the intent passed to startActivity() contains the FLAG_ACTIVITY_NEW_TASK flag, the system looks for a different task to house the new activity. Often, it&#8217;s a new task. However, it doesn&#8217;t have to be. If there&#8217;s already an existing task with the same affinity as the new activity, the activity is launched into that task. If not, it begins a new task.<br/>
If this flag causes an activity to begin a new task and the user presses the Home button to leave it, there must be some way for the user to navigate back to the task. Some entities (such as the notification manager) always start activities in an external task, never as part of their own, so they always put FLAG_ACTIVITY_NEW_TASK in the intents they pass to startActivity(). If you have an activity that can be invoked by an external entity that might use this flag, take care that the user has a independent way to get back to the task that&#8217;s started, such as with a launcher icon (the root activity of the task has a CATEGORY_LAUNCHER intent filter; see the Starting a task section below).</p>

<ul>
<li>When an activity has its allowTaskReparenting attribute set to &#8220;true&#8221;.</li>
</ul>


<p>In this case, the activity can move from the task it starts to the task it has an affinity for, when that task comes to the foreground.<br/>
For example, suppose that an activity that reports weather conditions in selected cities is defined as part of a travel application. It has the same affinity as other activities in the same application (the default application affinity) and it allows re-parenting with this attribute. When one of your activities starts the weather reporter activity, it initially belongs to the same task as your activity. However, when the travel application&#8217;s task comes to the foreground, the weather reporter activity is reassigned to that task and displayed within it.</p>

<p><strong>Tip:</strong> 如果一个.apk文件从用户的角度看包含了不止一个&#8221;application&#8221;的话，你可能会想要使用taskAffinity属性来为那些activites设置不同的联姻关系.</p>

<h2>(2)Clearing the back stack(清除回退栈)</h2>

<p>如果用户长时间离开一个task, 系统会清除task中root activity之外的所有的activites. 当用户回退到task时，仅仅只有root activity会被恢复.</p>

<p>有下面一些值可以用来设置，如果你想修改系统默认的行为的话:</p>

<ul>
<li><p><strong>alwaysRetainTaskState</strong><br/>
设置了这个属性为true之后，即使很长时间，也不会被destory的</p></li>
<li><p><strong>clearTaskOnLaunch</strong><br/>
如果这个属性设置为true，那么就是与alwaysRetainTaskState相反的. 每次启动都会清除root以上的activities.</p></li>
<li><p><strong>finishOnTaskLaunch</strong><br/>
这个属性与clearTaskOnLaunch类似, 但是它仅仅是对单个activity进行操作，而不是整个task. It can also cause any activity to go away, including the root activity. When it&#8217;s set to &#8220;true&#8221;, the activity remains part of the task only for the current session. If the user leaves and then returns to the task, it is no longer present.</p></li>
</ul>


<h2>(3)Starting a task(启动一个任务)</h2>

<p>你可以启动一个activity作为一个task的起点，通过为它的intent filter设置&#8221;android.intent.action.MAIN&#8221;作为特定的action，设置&#8221;android.intent.category.LAUNCHER&#8221;作为特定的category. 例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.MAIN&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.LAUNCHER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的设置方式不仅仅是使得这个activity作为launcher的图标，允许用户通过点击它启动activity并且随时通过点击它来触发恢复之前的task.</p>

<p>第二点非常重要: 用户必须能够在离开task之后通过activity的launcher来回到task. 因为这点, &#8220;singleTask&#8221; 与 &#8220;&#8221;singleInstance&#8221; 这两种启动模式总是会初始化一个task, 需要有ACTION_MAIN 与 CATEGORY_LAUNCHER 配合. 例如，用户启动了一个task做了一些动作，然后点击Home回到桌面，这个时候想要回到刚才的task，需要有launcher作为入口.</p>

<p>对于那些你不想用户可以回退的情况，请设置<activity>标签下的finishOnTaskLaunch属性为&#8221;true&#8221; (参考上面的章节).</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/guide/components/tasks-and-back-stack.html">http://developer.android.com/guide/components/tasks-and-back-stack.html</a></strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Notes 04 - Intents and Intent Filters]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/04/12/android-notes-04-intent-and-intentFilter/"/>
    <updated>2013-04-12T18:27:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/04/12/android-notes-04-intent-and-intentFilter</id>
    <content type="html"><![CDATA[<h2>Intent与Intent Filter</h2>

<p>Android其中的三大组件，Activity,Service与broadcast receivers是通过Intent来触发彼此的。Intent本身会携带一些信息，它是一种组件内部或者组件间进行交互的中介。<br/>
对于不同的组件之间有着不同的机制：</p>

<ul>
<li>一个Intent对象通过Context.startActivity()或者Activity.startActivityForResult()来启动一个activity或者让已经存在的activity做一些更新的操作。</li>
<li>一个Intent对象通过Context.startService()来初始化一个Service或者给已经在运行的Service传递新的指令。同样的，对于Context.bindService()是一样的道理。</li>
<li>Intent对象通过broadcast的方法（例如Context.sendBroadcast(), Context.sendOrderedBroadcast()或者Context.sendStickyBroadcast())传递给那些感兴趣的broadcast receivers.</li>
</ul>


<!-- more -->


<p>每一种不同类型的intent都会由系统传递到对应的组件上，下面会介绍Android系统是如何根据Intent里面的参数进行分类处理并传递到符合要求的组件上的。</p>

<h3>Intent对象</h3>

<p>一个Intent对象是许多信息的一个bundle.通常来说，它可以包含下面的内容：</p>

<ul>
<li><p>Component name组件名</p>

<ul>
<li>指定处理这个intent的组件。包名与包中的组件名。组件名是可选的。如果设置了组件名，这个intent就会传递给对应的类。如果没有设置组件名，Android会利用Intent对象中的其他信息来判断传递的对象。</li>
<li>可以通过setComponent(), setClass()或者setClassName()来设置组件名，并通过getComponent()来读取组件名.</li>
</ul>
</li>
<li><p>Action动作意图<br/>
一个String名称来表示执行Intent的意图是什么，Intent类定义了一些action常量，如下：</p></li>
</ul>


<hr />

<table>
   <tr>
      <td>Constant</td>
      <td>Target component</td>
      <td>Action</td>
   </tr>
   <tr>
      <td>ACTION_CALL</td>
      <td>activity</td>
      <td>Initiate a phone call.</td>
   </tr>
   <tr>
      <td>ACTION_EDIT</td>
      <td>activity</td>
      <td>Display data for the user to edit.</td>
   </tr>
   <tr>
      <td>ACTION_MAIN</td>
      <td>activity</td>
      <td>Start up as the initial activity of a task, with no data input and no returned output.</td>
   </tr>
   <tr>
      <td>ACTION_SYNC</td>
      <td>activity</td>
      <td>Synchronize data on a server with data on the mobile device.</td>
   </tr>
   <tr>
      <td>ACTION_BATTERY_LOW</td>
      <td>broadcast receiver</td>
      <td>A warning that the battery is low.</td>
   </tr>
   <tr>
      <td>ACTION_HEADSET_PLUG</td>
      <td>broadcast receiver</td>
      <td>A headset has been plugged into the device, or unplugged from it.</td>
   </tr>
   <tr>
      <td>ACTION_SCREEN_ON</td>
      <td>broadcast receiver</td>
      <td>The screen has been turned on.</td>
   </tr>
   <tr>
      <td>ACTION_TIMEZONE_CHANGED</td>
      <td>broadcast receiver</td>
      <td>The setting for the time zone has changed.</td>
   </tr>
</table>


<hr />

<p>更多通用的常量定义，请查看<a href="http://developer.android.com/reference/android/content/Intent.html">Intent</a>类的描述。<br/>
你可以定义自己的action string来激活你程序中的其他组件。那些action请遵循把包名作为前缀的规则：例如&#8221;com.example.project.SHOW_COLOR&#8221;.</p>

<ul>
<li><p>Data数据
不同的action会有不同类型的数据。例如，如果你的action是ACTION_EDIT,那么数据应该包含想要编辑的文件URI。如果action是ACTION_CALL,数据应该是tel: URI的格式。同样的，如果action是ACTION_VIEW，那么数据应该是http: URI。接受的action的activity会负责去处理那些指定的数据。<br/>
数据的MIME类型也是非常重要的，例如，一个可以显示图片数据的组件不应该被叫起来做播放音频的动作。<br/>
在许多情况下，数据类型可以从URI中读取到。但是数据类型同样可以显示的定义在Intent对象中。setData()方法指定了数据的URL，setType()方法指定了MIME类型, 同时setDataAndType()方法则可以同时指定URI与MIME。URI可以通过getData()来读取，数据类型则可以通过getType()来读取.</p></li>
<li><p>Category分类
指定哪一类的组件应该处理这个intent。Intent有定义一些分类，如下:</p></li>
</ul>


<hr />

<table>
   <tr>
      <td>Constant</td>
      <td>Meaning</td>
   </tr>
   <tr>
      <td>CATEGORY_BROWSABLE</td>
      <td>The target activity can be safely invoked by the browser to display data referenced by a link — for example, an image or an e-mail message.</td>
   </tr>
   <tr>
      <td>CATEGORY_GADGET</td>
      <td>The activity can be embedded inside of another activity that hosts gadgets.</td>
   </tr>
   <tr>
      <td>CATEGORY_HOME</td>
      <td>The activity displays the home screen, the first screen the user sees when the device is turned on or when the Home button is pressed.</td>
   </tr>
   <tr>
      <td>CATEGORY_LAUNCHER</td>
      <td>The activity can be the initial activity of a task and is listed in the top-level application launcher.</td>
   </tr>
   <tr>
      <td>CATEGORY_PREFERENCE</td>
      <td>The target activity is a preference panel.</td>
   </tr>
</table>


<hr />

<p>请查看<a href="http://developer.android.com/reference/android/content/Intent.html">Intent</a>获取完整的分类列表.<br/>
addCategory()方法可以把某个intent对象加入到指定的分类中，也可以通过removeCategory()来移除，使用getCategories()来获取当前对象中的所有分类。</p>

<ul>
<li><p>Extras额外的值
Intent对象有一系列put&#8230;() 方法来插入不同类型的数据，get&#8230;() 方法来读取数据. 那些方法可以对数据进行序列化处理成一个bundle对象。实际上，我们也可以new一个bundle对象，通过putExtras() 与 getExtras() 方法来进行处理.</p></li>
<li><p>Flags标志
Flags用来表示，如何启动一个activity(例如，指定activity应该属于哪一个task) 并且在activity被启动后，这个activity在系统中的状态是怎么样的 (例如，是否应该属于最近使用的activity列表中). 所有的flag都在Intent类中有定义。</p></li>
</ul>


<p>想了解如何启动Android系统内的组件，请查看<a href="http://developer.android.com/guide/appendix/g-app-intents.html">list of intents</a>.</p>

<h2>Intent Resolution[Intent详解]</h2>

<p>Intents应该可以分成两类:<br/>
* <strong>Explicit</strong>显式intents通过组件名来指定目标组件。因为组件名不一定可以被其他应用程序的开发者所了解，显式intent通常用来程序内部传递消息：例如activity启动一个下属级别的service或者是启动一个同级的activity。Android系统会根据组件名来把intent送到指定的组件上。<br/>
* <strong>Implicit</strong>隐式intents并不指定特定的组件名。Implicit intents通常用来触发其他应用程序里面的组件。Android系统通过intentFilter来筛选出合适的组件来接收这个intent。没有定义IntentFilter的组件只能接受显式的intent，而定义了intentFilter的组件则可以接受显式与隐式两种类型的intent。</p>

<h3>Intent filters[Intent过滤器]</h3>

<ul>
<li>Activities, services 与 broadcast receivers可以有一个或者多个intent filter.每一个filter都描述了一种可以通过筛选的intent。一个intent要像被这个组件所接收到，必须满足这个组件的所有filter中的一个。</li>
<li>接收intent的组件会根据接收到的数据来决定做不同的动作。<br/>
<strong>注意</strong>:intent filter并不能用来做安全性的检查。因为如果某个显式的intent通过组合多个action与data,指定发送到组件，这样就没有办法起到filter的作用了。</li>
<li>intent filter是<a href="http://developer.android.com/reference/android/content/IntentFilter.html">IntentFilter</a>的实例。因为Android系统需要在组件被启动之前知道它的过滤值，所以一般都是直接写在AndroidManifest.xml里面。其中一个例外是broadcast receiver可以通过Context.registerReceiver()来动态进行注册。</li>
<li><p>一个filter会对action,data与category进行序列化处理。一个隐式的intent均需要通过前面三方面的过滤。如果其中某一项不符合，Android系统將过滤掉这个事件。另外，如果组件有定义多个filter，那么只要满足其中一个filter就可以让其通过。</p></li>
<li><p>Action test</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;intent-filter</span> <span class="err">.</span> <span class="err">.</span> <span class="err">.</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.example.project.SHOW_CURRENT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.example.project.SHOW_RECENT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;com.example.project.SHOW_PENDING&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    . . .
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果某个intent有定义action，那么想要通过上面的测试，必须满足其中一条action.同时，如果intent没有定义任何action，则默认是可以通过的。</p>

<ul>
<li>Category test</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;intent-filter</span> <span class="err">.</span> <span class="err">.</span> <span class="err">.</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.BROWSABLE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    . . .
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>与action类似，如果有定义category，想要通过，则必须满足filter中的任意一条，否则，如果没有定义category，则默认可以通过。<br/>
然而，activity如果想要接收隐式的intent，那么在activity的filter里面必须包含&#8221;android.intent.category.DEFAULT&#8221;。</p>

<ul>
<li>Data test</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;intent-filter</span> <span class="err">.</span> <span class="err">.</span> <span class="err">.</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;video/mpeg&quot;</span> <span class="na">android:scheme=</span><span class="s">&quot;http&quot;</span> <span class="err">.</span> <span class="err">.</span> <span class="err">.</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;audio/mpeg&quot;</span> <span class="na">android:scheme=</span><span class="s">&quot;http&quot;</span> <span class="err">.</span> <span class="err">.</span> <span class="err">.</span> <span class="nt">/&gt;</span>
</span><span class='line'>    . . .
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个<data>标签都可以指定一个URI与一个数据类型(MIME media type). 格式像下面定义的那样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>scheme://host:port/path
</span></code></pre></td></tr></table></div></figure>


<p>例如：content://com.example.project:200/folder/subfolder/etc<br/>
那些属性是可选的，但是他们并不是相互独立的。例如，一个路径想要有意义，必须指定scheme与authority.<br/>
他们有着下面一些规则需要遵守：</p>

<ul>
<li>一个既没有URI也没有数据类型的Intent对象，只有在filter没有指定任何URI或者数据类型的情况下才能通过。</li>
<li>一个包含URI但是没有数据类型的Intent对象，符合filter定义的URI,同时filter并没有定义数据类型，这样这个对象能够通过。这种情况仅仅发生在类似<strong>mailto:</strong>与<strong>tel:</strong>，他们并没有指定任何实际的数据。</li>
<li>一个包含数据类型但是没有定义URI的Intent对象，仅仅在fliter拥有同样的数据类型而且也没有定义URI的情况下，才能通过。</li>
<li>一个即包含URI又包含数据类型的(或者数据类型可以从URI中获取到)Intent对象。如果与filter中的URI相匹配，这URI部分可以通过。如果数据类型也匹配，则数据部分也可以通过。有个例外，<strong>如果intent的URI是content: 或者 file: ，然而filter却没有定义任何URI(只定义了数据类型)，这样的话，同样能够通过。也就是说content:与file:是特例。</strong></li>
</ul>


<hr />

<p>如果一个intent可以通过多个组件的filter，那么系统会提示用户选择启动哪一个组件。如果没有一个组件满足，则会发生异常。</p>

<h3>Common cases[常见情况]</h3>

<p>上面最后一条规则说明组件可以从文件或者content provider中获取本地的数据。因此，他们的filter可以仅仅需要指定数据类型，而不用显式指定content: 与 file: 的URI. 这是一个很常见的Case.</p>

<ul>
<li>下面的filter将使得符合条件的组件从content provider获取图片数据并进行显示</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;image/*&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从网络获取video数据并进行显示</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;http&quot;</span> <span class="na">android:type=</span><span class="s">&quot;video/*&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using intent matching[intent匹配模式]</h3>

<ul>
<li><p>Intents与intent filters进行匹配，不仅仅是为了寻找待激活的某个组件，而且是为了寻找符合条件的所有的组件。例如，Android系统会把那些intent filter中包含android.intent.action.MAIN&#8221; action与&#8221;android.intent.category.LAUNCHER&#8221; category的组件作为程序的入口(icon launcher).同样的，它通过&#8221;android.intent.category.HOME&#8221;来寻找桌面组件。</p></li>
<li><p><a href="http://developer.android.com/reference/android/content/pm/PackageManager.html">PackageManager</a>有一组query&#8230;()方法来查询那些符合intent条件的组件，还提供了一组resolve&#8230;() 方法来决定最佳的组件对intent进行响应。例如，<a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivities(android.content.Intent,%20int">queryIntentActivities()</a>)返回所有符合参数intent描述的activity。<a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentServices(android.content.Intent,%20int">queryIntentServices()</a>)则返回符合条件的sevice。同样的，对<a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#queryBroadcastReceivers(android.content.Intent,%20int">queryBroadcastReceivers()</a>)也是一样.</p></li>
</ul>


<hr />

<p><strong>文章学习自<a href="http://developer.android.com/guide/components/processes-and-threads.html">http://developer.android.com/guide/components/processes-and-threads.html</a></strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Performance] - 代码性能优化小技巧]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/04/06/android-training-performance-tips/"/>
    <updated>2013-04-06T18:27:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/04/06/android-training-performance-tips</id>
    <content type="html"><![CDATA[<h2>Performance Tips</h2>

<p><img src="http://kesenhoo.github.com/images/articles/performance_improve.jpg"></p>

<p>这篇文章主要是介绍了一些小细节的优化技巧，当这些小技巧综合使用起来的时候，对于整个App的性能提升还是有作用的，只是不能较大幅度的提升性能而已。选择合适的算法与数据结构才应该是你首要考虑的因素，在这篇文章中不会涉及这方面。你应该使用这篇文章中的小技巧作为平时写代码的习惯，这样能够提升代码的效率。</p>

<!-- more -->


<p>通常来说，高效的代码需要满足下面两个规则：</p>

<ul>
<li>不要做冗余的动作</li>
<li>如果能避免，尽量不要分配内存</li>
</ul>


<p>代码的执行效果会受到设备CPU,设备内存,系统版本等诸多因素的影响。为了确保代码能够在不同设备上都运行良好，需要最大化代码的效率。</p>

<h3>避免创建不必要的对象</h3>

<p>虽然GC可以回收不用的对象，可是为这些对象分配内存，并回收它们同样是需要耗费资源的。<br/>
因此请尽量避免创建不必要的对象，有下面一些例子来说明这个问题：</p>

<ul>
<li>如果你需要返回一个String对象，并且你知道它最终会需要连接到一个StringBuffer，请修改你的实现方式，避免直接进行连接操作，应该采用创建一个临时对象来做这个操作.</li>
<li>当从输入的数据集中抽取出Strings的时候，尝试返回原数据的substring对象，而不是创建一个重复的对象。</li>
</ul>


<p>一个稍微激进点的做法是把所有多维的数据分解成1维的数组:</p>

<ul>
<li>一组int数据要比一组Integer对象要好很多。可以得知，两组1维数组要比一个2维数组更加的有效率。同样的，这个道理可以推广至其他原始数据类型。</li>
<li>如果你需要实现一个数组用来存放(Foo,Bar)的对象，尝试分解为Foo[]与Bar[]要比(Foo,Bar)好很多。(当然，为了某些好的API的设计，可以适当做一些妥协。但是在自己的代码内部，你应该多多使用分解后的容易。</li>
</ul>


<p>通常来说，需要避免创建更多的对象。更少的对象意味者更少的GC动作，GC会对用户体验有比较直接的影响。</p>

<h3>选择Static而不是Virtual</h3>

<p>如果你不需要访问一个对象的值域,请保证这个方法是static类型的,这样方法调用将快15%-20%。这是一个好的习惯，因为你可以从方法声明中得知调用无法改变这个对象的状态。</p>

<h3>常量声明为Static Final</h3>

<p>先看下面这种声明的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="n">intVal</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="s">&quot;Hello, world!&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译器会使用<clinit>方法来初始化上面的值，之后访问的时候会需要先到它那里查找，然后才返回数据。我们可以使用static final来提升性能：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">intVal</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="s">&quot;Hello, world!&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时再也不需要上面的那个方法来做多余的查找动作了。<br/>
<strong> 所以，请尽可能的为常量声明为static final类型的。</strong></p>

<h3>避免内部的Getters/Setters</h3>

<p>像C++等native language,通常使用getters(i = getCount())而不是直接访问变量(i = mCount).这是编写C++的一种优秀习惯，而且通常也被其他面向对象的语言所采用，例如C#与Java，因为编译器通常会做inline访问，而且你需要限制或者调试变量，你可以在任何时候在getter/setter里面添加代码。<br/>
然而，在Android上，这是一个糟糕的写法。Virtual method的调用比起直接访问变量要耗费更多。那么合理的做法是：在面向对象的设计当中应该使用getter/setter，但是在类的内部你应该直接访问变量.<br/>
没有JIT(Just In Time Compiler)时，直接访问变量的速度是调用getter的3倍。有JIT时,直接访问变量的速度是通过getter访问的7倍。<br/>
请注意，如果你使用<a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>, 你可以获得同样的效果，因为ProGuard可以为你inline accessors.</p>

<h3>使用增强的For循环</h3>

<p>请比较下面三种循环的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mSplat</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Foo</span><span class="o">[]</span> <span class="n">mArray</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">zero</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">mArray</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">mSplat</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">one</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Foo</span><span class="o">[]</span> <span class="n">localArray</span> <span class="o">=</span> <span class="n">mArray</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">localArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">localArray</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">mSplat</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">two</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Foo</span> <span class="n">a</span> <span class="o">:</span> <span class="n">mArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">a</span><span class="o">.</span><span class="na">mSplat</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>zero()是最慢的，因为JIT没有办法对它进行优化。</li>
<li>one()稍微快些。</li>
<li>two() 在没有做JIT时是最快的，可是如果经过JIT之后，与方法one()是差不多一样快的。它使用了增强的循环方法for-each。</li>
</ul>


<p>所以请尽量使用for-each的方法，但是对于ArrayList，请使用方法one()。</p>

<h3>使用包级访问而不是内部类的私有访问</h3>

<p>参考下面一段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Inner</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">stuff</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Foo</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">doStuff</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">mValue</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mValue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Inner</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mValue</span> <span class="o">=</span> <span class="mi">27</span><span class="o">;</span>
</span><span class='line'>        <span class="n">in</span><span class="o">.</span><span class="na">stuff</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">doStuff</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Value is &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Foo$Inner里面有访问外部类的一个变量。这样的做法会给系统造成额外的麻烦，请尽量避免。</p>

<h3>避免使用float类型</h3>

<p>Android系统中float类型的数据存取速度是int类型的一半，尽量优先采用int类型。</p>

<h3>使用库函数</h3>

<p>尽量使用System.arraycopy()等一些封装好的库函数，它的效率是手动编写copy实现的9倍多。</p>

<p><strong> Tip: Also see Josh Bloch&#8217;s Effective Java, item 47. </strong></p>

<h3>谨慎使用native函数</h3>

<p>当你需要把已经存在的native code迁移到Android，请谨慎使用JNI。如果你要使用JNI,请学习<a href="http://developer.android.com/guide/practices/jni.html">JNI Tips</a></p>

<h3>关于性能的误区</h3>

<p>在没有做JIT之前，使用一种确切的数据类型确实要比抽象的数据类型速度要更有效率。(例如，使用HashMap要比Map效率更高。) 有误传效率要高一倍，实际上只是6%左右。而且，在JIT之后，他们直接并没有大多差异。</p>

<h3>关于测量</h3>

<p>上面文档中出现的数据是Android的实际运行效果。我们可以用<a href="http://developer.android.com/tools/debugging/debugging-tracing.html">Traceview</a> 来测量，但是测量的数据是没有经过JIT优化的，所以实际的效果应该是要比测量的数据稍微好些。</p>

<p>关于如何测量与调试，还可以参考下面两篇文章：</p>

<ul>
<li><a href="http://developer.android.com/tools/debugging/debugging-tracing.html">Profiling with Traceview and dmtracedump</a></li>
<li><a href="http://developer.android.com/tools/debugging/systrace.html">Analysing Display and Performance with Systrace</a></li>
</ul>


<hr />

<p><strong>文章学习自http://developer.android.com/guide/components/processes-and-threads.html</strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Notes 03 - Process and Thread]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/03/31/android-notes-03-process-and-thread/"/>
    <updated>2013-03-31T16:27:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/03/31/android-notes-03-process-and-thread</id>
    <content type="html"><![CDATA[<p><img src="http://kesenhoo.github.com/images/articles/process_and_thread.jpg"></p>

<p>当程序的第一个组件开始启动时，Android系统会为这个程序启动一个新的Linux进程。默认的，程序中的后续其他组件都是运行在这个进程的线程中(这个线程被成为&#8221;主&#8221;线程:main thread)。如果程序的组件在启动时发现已经存在这个程序的进程了(因为其他组件正在运行)， 那么这个组件将启动在该进程中，并使用同一线程。然而，你可以安排程序中的不同组件运行在另外一个进程中，而且你可以为任何进程创建其它的线程。</p>

<h1>Process：进程</h1>

<p>默认的，同一程序的所有组件都是运行在一个Proces里面的，并且大多数程序都不应该去改变这一规则。然而，如果你需要控制某一确定的组件的Proces，你可以在manifest文件中做特殊设置。<em>Music播放器的Playback Service就可以这样做</em></p>

<!-- more -->


<p>manifest中的activity，service，receiver与provider的标签都可以支持<strong>android:process</strong>的属性，它可以为这个组件的运行指定一个特定的进程。这样你可以为某些组件设置运行的进程而其他组件共享一个进程。你还可以通过设置进程属性使得不同程序的运行在同一个进程，共享同一个Linux ID，并且签有同样的签名。</p>

<p>application标签也可以支持设置<strong>android:process</strong>属性，这样会给所有的组件设置一个默认的进程值。</p>

<p>Android会在系统内存紧张时决定关闭某些进程。那么程序中的运行的组件会因此被摧毁掉。当他们需要再次运行时会重新启动一个进程。</p>

<p>当决定杀掉哪一个进程时，Android系统会自动衡量进程的重要性。例如，一个在屏幕上不再可见的进程相对于那些有组件正在被显示的进程更容易被杀掉是显得合理的。那么衡量的权重后面会讲到。</p>

<h1>Process lifecycle：进程生命周期</h1>

<p>Android系统会尝试尽可能的维持程序的存在。但是当需要为新的或者更重要的进程开辟内存空间的时候，最终某些程序是会要被拿掉。为了决定存活当中的程序哪些该拿掉，哪些该留下，系统会根据每一个进程的组件与组件运行状态来生成一个&#8221;importance hierarchy&#8221;（权重层级）。那些权重低的进程将依次被移除，直到系统恢复了足够的资源。</p>

<p>在权重层级中，一个有5个层次。下面列出了不同类型进程的权重：</p>

<ol>
<li><strong>Foreground process</strong>：<br/>
用户目前正在使用的进程。要成为此类型的进程需要满足下面的任意一点：

<ul>
<li>该进程拥有一个用户正在交互的页面。（onResume方法正在执行）</li>
<li>该进程拥有一个Service，该Service绑定到正在与用户交互的Activity中。</li>
<li>该进程拥有一个in the foreground的Service,通过执行startForeground().</li>
<li>该进程拥有一个Service，正在执行Service的某些callbacks方法(onCreate()， onStart()，或者onDestroy()).</li>
<li>该进程拥有一个BroadcastReceiver，并且在执行它的onReceive()方法。</li>
</ul>
</li>
<li><strong>Visible process</strong>
一个没有任何foreground组件，但是仍然能够影响屏幕呈现内容的进程。需要满足下面条件之一：

<ul>
<li>该进程没有任何foreground的组件，但是仍然对用户可见。例如onPause()被调用的情况，started dialog。</li>
<li>该进程拥有一个一个Service，并且该Service绑定到某个Visible的activity上。</li>
</ul>
</li>
<li><strong>Service process</strong><br/>
一个进程拥有正在运行的Service，该Service是通过startService()的方式被启动的，并且不会进入到前面的两种高权重的层级。尽管Service进程没有与用户看到的部分有直接关系，但是他们通常是在做用户关心在意的工作（例如后台播放音乐，后台下载网络数据），因此系统会保持他们能够运行，除非现有的内存已经不够维持前面2个权重层级的进程使用。</li>
<li><strong>Background process</strong><br/>
进程拥有一个activity，并且这个activity不被用户所见（例如activity的onStop方法被执行）。这些进程对用户体验没有直接的影响，系统可以杀掉这些进程为前面三个层级的进程空出内存。通常来说，系统中存在许多后台进程正在运行，因此他们被保存为一个LRU(least recently used)列表，用来确保最近被使用过的activity会被最后杀死。如果一个activity正确的实现了它的生命周期函数，可以保存它的当前状态。那么杀掉该进程并不会对用户体验有明显的影响。因为当用户重新回到这个Activity时，activity可以所有可见时的状态。</li>
<li><strong>Empty process</strong><br/>
该进程没有拥有任何激活状态的程序组件。保持该进程存在的唯一理由是为了缓存。使用缓存可以提升程序的下次启动时间。系统通常会权衡所有的资源来决定杀掉哪些缓存程序。</li>
</ol>


<p><strong>取最高优先级</strong><br/>
如果一个程序中有好几种优先级的组件，Android系统会把其中最高级别的当作整个程序的权重。例如，如果一个进程拥有一个service与一个visible activity，这个进程会被当作是一个visible进程而不是service进程。</p>

<p><strong>提升优先级</strong><br/>
另外，一个进程的排名会因为其依赖的组件的权重提升而提升。例如，进程A本来是权重为3的，但是它的某个组件与另外一个权重为1的进程B进行绑定后，进程A的权重也会被提升为1。</p>

<p>因为一个执行service的进程的排名比一个后台activity的进程排名要高，所以，如果一个activity启动时要执行一段长时间的操作，应该选择使用Service而不是创建一个worker thread。例如，一个activity做上传图片的操作，应该选择启动一个Service做上传的动作。使用service能确保这个操作会至少有&#8221;service process&#8221;的优先级。</p>

<h1>Thread</h1>

<p>当一个程序首次启动，系统会为这个程序创建一个<strong>&#8220;main thread&#8221;</strong>。这个线程非常重要，因为它将肩负起UI的控制调度，还包含绘制图像的事件。同时，它还是与UI相关的组件（来自android.widget与android.view下的组件）进行交互的中介。因此，有些时候main thread 也被成为<strong>&#8220;UI thread&#8221;</strong>.</p>

<p>系统不会为每一个组件的实例创建单独的线程。所有运行在同一个进程中的组件都会在UI Thread中被实例化。系统调用组件与他们自身的回调函数都是运行在UI Thread的。</p>

<p>例如，当用户点击屏幕上的一个button，程序的UI thread会把这个事件分发至button这个组件上，然后button会执行它的presss state并post an invalidate请求到事件队列中。UI thread然后从事件队列中取出消息并通知组件进行重绘。</p>

<p>当你的app执行一个比较重的工作时，单线程模式有可能会卡到UI。特别是，在UI线程里面做网络请求操作或者是db查询会严重卡到整个UI。当UI thread被阻塞时，没有事件能够继续被分发，包括绘制事件。那么在用户看来，这样的程序是糟糕的。更糟糕的是，如果UI线程被阻塞超过5秒，程序会就出现ANR的错误提示。那么用户可能会决定推出程序，并对该程序进行卸载。</p>

<p>另外，Andoid的UI组件不是thread-safe的。因此，你不应该在另外一个线程去操控UI组件。有两个原则需要遵守：<br/>
* 不要阻塞UI线程。<br/>
* 不要在UI线程之外访问UI组件。</p>

<h2>Worker threads</h2>

<p>为了实现执行耗时的操作，你应该确保那些动作执行在另外一个线程(&#8220;background&#8221; or &#8220;worker&#8221; threads)。</p>

<p>例如，下面的代码演示了点击事件后开启另外一个线程来下载并显示图片的操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Bitmap</span> <span class="n">b</span> <span class="o">=</span> <span class="n">loadImageFromNetwork</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>java
上面的例子看起来没有问题，实际上违法了第二条规则：不要在UI线程之外访问UI组件。
Android提供了下面三个方法来解决这个问题：</p>

<ul>
<li>Activity.runOnUiThread(Runnable)</li>
<li>View.post(Runnable)</li>
<li>View.postDelayed(Runnable, long)</li>
</ul>


<p>例如下面就是使用View.post的方式实现的代码示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">loadImageFromNetwork</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mImageView</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>java
上面的代码虽然实现了功能，可是当系统变复杂时，会显得不好处理。也许我们可以考虑使用Handler，但是更好的方案也许是使用AsyncTask。</p>

<h2>Using AsyncTask</h2>

<p>关于什么是AsyncTask与如何使用<a href="http://developer.android.com/reference/android/os/AsyncTask.html">AsyncTask</a>，不再赘述。
下面是使用AsyncTask来实现上面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">DownloadImageTask</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">DownloadImageTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** The system calls this to perform work in a worker thread and</span>
</span><span class='line'><span class="cm">      * delivers it the parameters given to AsyncTask.execute() */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Bitmap</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">loadImageFromNetwork</span><span class="o">(</span><span class="n">urls</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** The system calls this to perform work in the UI thread and delivers</span>
</span><span class='line'><span class="cm">      * the result from doInBackground() */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>java</p>

<h2>Thread-safe methods</h2>

<p>在某些情况下，你实现的一些方法有可能会被不止一个线程中执行到，因此这些方法必须是线程安全的。</p>

<p><strong>在bound service的情况下，回调函数通常都需要是线程安全的。如果IBinder的Client与Server是在同一进程的话，那么被Client调用的方法是执行在Client的线程当中的。然而如果Client是在另外一个进程的话，被调用的方法则是执行在来自系统为Server端维护的一个线程池当中的某个线程中（非UI Thread）。例如，既然Service的onBind()的方法可以被service进程的UI线程所调用执行，那么onBind所返回的对象（Client端）所实现的方法则可以被线程池中的线程所调用执行。因为一个service可以拥有多个client，那么在同一时刻可以有不止一个线程可以占用同一个IBinder的回调函数。所以IBinder的方法必须是线程安全的。</strong></p>

<p>同样的，一个content provider可以接受来自另外一个进程的数据请求。尽管ContentResolver与ContentProvider类隐藏了实现细节，但是ContentProvider所提供的query()，insert()，delete()，update()与getType()都是在content provider进程的线程池中被调用执行的，而不是进程的主线程中。因为那些方法可能同时被多个线程所调用，所以他们都应该是线程安全的。</p>

<h1>Interprocess Communication</h1>

<p>Android提供了为远程过程调用（RPC）提供了一种进程间通信（IPC）的机制。调用发生在activity或者其他组件中，执行却在另外一个进程，最后再把结果返回给调用者。这需要把调用的数据解析成操作系统能够识别的格式，解码，传递，再编码返回。Android提供了IPC交互的实现细节，因此我们只需要专注于定义与实现RPC接口。</p>

<p>为了执行IPC，你的程序必须通过bindService()方法绑定到service上，更多细节，请查看<a href="http://developer.android.com/guide/components/services.html">Services</a>开发指南。</p>

<hr />

<p><strong>文章学习自http://developer.android.com/guide/components/processes-and-threads.html</strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Notes 02 - AIDL]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/02/19/android-notes-02-aidl/"/>
    <updated>2013-02-19T21:18:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/02/19/android-notes-02-aidl</id>
    <content type="html"><![CDATA[<ul>
<li>在Android process之间不能用通常的方式去访问彼此的内存数据。 他们把需要传递的数据解析成基础对象，使得系统能够识别并处理这些对象。因为这个处理过程很难写，所以Android使用AIDL来解决这个问题。</li>
<li>在定义AIDL接口之前，请意识到call这些接口是direct function call。 请不要认为这些call 接口的行为是发生在另外一个线程里面的。具体的不同因这个调用是发生在local process还是remote process而异。

<ul>
<li>发生在local process里面的调用会跑在这个local process的thread里面。如果这是你的主UI线程，那么AIDL接口的调用也会发生在这个UI thread里面。如果这是发生在另外一个thread，那么调用会发生在service里面。因此，如果仅仅是发生在local process的调用，则你可以完全控制这些调用，当然这样的话，也就不需要用AIDL了。因为你完全可以使用Bound Service的第一种方式去实现。</li>
<li>发生在remote process里面的调用是会跑在你自己的process所维护的一个thread pool里面。那么你需要注意可能会在同一时刻接受到多个请求。所以AIDL的操作需要做到thread-safe。(<em>每次请求，都会交给Service，在线程池里面启动一个thread去执行那些请求，所以那些方法需要是线程安全的</em>)</li>
<li>oneway关键字改变了remote call的行为。当使用这个关键字时，remote call不会被阻塞住，它仅仅是发送交互数据后再立即返回。IBinder thread pool 之后会把它当作一个通常的remote call呼叫。</li>
</ul>
</li>
</ul>


<!-- more -->


<h2>定义一个AIDL接口</h2>

<ul>
<li>需要在src的目录下使用Java的语法去定义一个.aidl的文件，Android SDK tools会基于这个文件在gen目录下生成一个IBinder的接口（与.aidl同名，后缀名为java的文件）。Service需要实现这个接口，然后Client程序才可以bind到service并执行接口的方法，从而实现IPC。</li>
<li>具体实现一个AIDL接口，需要下面几个步骤：(请注意，aidl的文件需要向后兼容[能增加，不能减少与修改之前的接口]，因为这个文件需要提供给客户端程序)

<ul>
<li>创建一个.aidl文件</li>
<li>实现接口</li>
<li>暴露接口给Client</li>
</ul>
</li>
</ul>


<h3>1)Create the .aidl file</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// IRemoteService.aidl</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">android</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Declare any non-default types here with import statements</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** Example service interface */</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">IRemoteService</span><span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Request the process ID of this service, to do evil things with it. */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">getPid</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Demonstrates some basic types that you can use as parameters</span>
</span><span class='line'><span class="cm">     * and return values in AIDL.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span><span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span><span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span><span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span><span class="n">String</span> <span class="n">aString</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2)Implement the interface</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">IRemoteService</span><span class="o">.</span><span class="na">Stub</span> <span class="n">mBinder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IRemoteService</span><span class="o">.</span><span class="na">Stub</span><span class="o">(){</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPid</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">returnProcess</span><span class="o">.</span><span class="na">myPid</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span><span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span><span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span><span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span><span class="n">String</span> <span class="n">aString</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// Does nothing</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3)Expose the interface to clients</h3>

<ul>
<li>Service端：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteService</span> <span class="kd">extends</span> <span class="n">Service</span><span class="o">{</span>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// Return the interface</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mBinder</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">finalI</span> <span class="n">RemoteService</span><span class="o">.</span><span class="na">Stub</span> <span class="n">mBinder</span> <span class="o">=</span> <span class="n">newIRemoteService</span><span class="o">.</span><span class="na">Stub</span><span class="o">(){</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPid</span><span class="o">(){</span>
</span><span class='line'>            <span class="n">returnProcess</span><span class="o">.</span><span class="na">myPid</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">basicTypes</span><span class="o">(</span><span class="kt">int</span> <span class="n">anInt</span><span class="o">,</span><span class="kt">long</span> <span class="n">aLong</span><span class="o">,</span><span class="kt">boolean</span> <span class="n">aBoolean</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">aFloat</span><span class="o">,</span><span class="kt">double</span> <span class="n">aDouble</span><span class="o">,</span><span class="n">String</span> <span class="n">aString</span><span class="o">){</span>
</span><span class='line'>            <span class="c1">// Does nothing</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Client端</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IRemoteService</span> <span class="n">mIRemoteService</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ServiceConnection</span> <span class="n">mConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceConnection</span><span class="o">(){</span>
</span><span class='line'>    <span class="c1">// Called when the connection with the service is established</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceConnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">,</span><span class="n">IBinder</span> <span class="n">service</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// Following the example above for an AIDL interface,</span>
</span><span class='line'>        <span class="c1">// this gets an instance of the IRemoteInterface, which we can use to call on the service</span>
</span><span class='line'>        <span class="n">mIRemoteService</span> <span class="o">=</span> <span class="n">IRemoteService</span><span class="o">.</span><span class="na">Stub</span><span class="o">.</span><span class="na">asInterface</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Called when the connection with the service disconnects unexpectedly</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceDisconnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">){</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span><span class="s">&quot;Service has unexpectedly disconnected&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mIRemoteService</span> <span class="o">=</span><span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>通过IPC传递对象</h2>

<ul>
<li><p>某些时候传递的对象不是Android默认支持的那些，我们需要自己使得这个对象Parcelable化，实现步骤如下：</p>

<ul>
<li>Make your class implement the Parcelable interface.</li>
<li>Implement writeToParcel, which takes the current state of the object and writes it to a Parcel.</li>
<li>Add a static field called CREATOR to your class which is an object implementing the Parcelable.Creator interface.</li>
<li>Finally, create an .aidl file that declares your parcelable class (as shown for the Rect.aidl file, below).If you are using a custom build process, do not add the .aidl file to your build. Similar to a header file in the C language, this .aidl file isn&#8217;t compiled.</li>
</ul>
</li>
<li><p>首先需要在aidl文件中声明这个对象类型</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">android</span><span class="o">.</span><span class="na">graphics</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Declare Rect so AIDL can find it and knows that it implements</span>
</span><span class='line'><span class="c1">// the parcelable protocol.</span>
</span><span class='line'><span class="n">parcelable</span> <span class="n">Rect</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Parcel</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Parcelable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Rect</span> <span class="kd">implements</span> <span class="n">Parcelable</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">top</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">bottom</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Parcelable</span><span class="o">.</span><span class="na">Creator</span><span class="o">&lt;</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">CREATOR</span> <span class="o">=</span> <span class="k">new</span>
</span><span class='line'><span class="n">Parcelable</span><span class="o">.</span><span class="na">Creator</span><span class="o">&lt;</span><span class="n">Rect</span><span class="o">&gt;(){</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Rect</span> <span class="nf">createFromParcel</span><span class="o">(</span><span class="n">Parcelin</span><span class="o">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Rect</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Rect</span><span class="o">[]</span> <span class="nf">newArray</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">Rect</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Rect</span><span class="o">(){</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Rect</span><span class="o">(</span><span class="n">Parcelin</span><span class="o">){</span>
</span><span class='line'>        <span class="n">readFromParcel</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToParcel</span><span class="o">(</span><span class="n">Parcelout</span><span class="o">){</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">left</span><span class="o">);</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">top</span><span class="o">);</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">right</span><span class="o">);</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">bottom</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFromParcel</span><span class="o">(</span><span class="n">Parcelin</span><span class="o">){</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class='line'>        <span class="n">top</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class='line'>        <span class="n">bottom</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>调用IPC的方法</h2>

<ul>
<li>Include the .aidl file in the project src/ directory.</li>
<li>Declare an instance of the IBinder interface (generated based on the AIDL).</li>
<li>Implement ServiceConnection.</li>
<li>Call Context.bindService(), passing in your ServiceConnection implementation.</li>
<li>In your implementation of onServiceConnected(), you will receive an IBinder instance (called service). Call YourInterfaceName.Stub.asInterface((IBinder)service) to cast the returned parameter toYourInterface type.</li>
<li>Call the methods that you defined on your interface. You should always trap DeadObjectException exceptions, which are thrown when the connection has broken; this will be the only exception thrown by remote methods.</li>
<li>To disconnect, call Context.unbindService() with the instance of your interface.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Binding</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** The primary interface we will be calling on the service. */</span>
</span><span class='line'>    <span class="n">IRemoteService</span> <span class="n">mService</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/** Another interface we use on the service. */</span>
</span><span class='line'>    <span class="n">ISecondary</span> <span class="n">mSecondaryService</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Button</span> <span class="n">mKillButton</span><span class="o">;</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">mCallbackText</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mIsBound</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Standard initialization of this activity.  Set up the UI, then wait</span>
</span><span class='line'><span class="cm">     * for the user to poke it before doing anything.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">remote_service_binding</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Watch for button clicks.</span>
</span><span class='line'>        <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bind</span><span class="o">);</span>
</span><span class='line'>        <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">mBindListener</span><span class="o">);</span>
</span><span class='line'>        <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">unbind</span><span class="o">);</span>
</span><span class='line'>        <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">mUnbindListener</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mKillButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">kill</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mKillButton</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">mKillListener</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mCallbackText</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">callback</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mCallbackText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Not attached.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Class for interacting with the main interface of the service.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ServiceConnection</span> <span class="n">mConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceConnection</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceConnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">,</span>
</span><span class='line'>                <span class="n">IBinder</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// This is called when the connection with the service has been</span>
</span><span class='line'>            <span class="c1">// established, giving us the service object we can use to</span>
</span><span class='line'>            <span class="c1">// interact with the service.  We are communicating with our</span>
</span><span class='line'>            <span class="c1">// service through an IDL interface, so get a client-side</span>
</span><span class='line'>            <span class="c1">// representation of that from the raw service object.</span>
</span><span class='line'>            <span class="n">mService</span> <span class="o">=</span> <span class="n">IRemoteService</span><span class="o">.</span><span class="na">Stub</span><span class="o">.</span><span class="na">asInterface</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mCallbackText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Attached.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// We want to monitor the service for as long as we are</span>
</span><span class='line'>            <span class="c1">// connected to it.</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mService</span><span class="o">.</span><span class="na">registerCallback</span><span class="o">(</span><span class="n">mCallback</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// In this case the service has crashed before we could even</span>
</span><span class='line'>                <span class="c1">// do anything with it; we can count on soon being</span>
</span><span class='line'>                <span class="c1">// disconnected (and then reconnected if it can be restarted)</span>
</span><span class='line'>                <span class="c1">// so there is no need to do anything here.</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// As part of the sample, tell the user what happened.</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">Binding</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">remote_service_connected</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceDisconnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// This is called when the connection with the service has been</span>
</span><span class='line'>            <span class="c1">// unexpectedly disconnected -- that is, its process crashed.</span>
</span><span class='line'>            <span class="n">mService</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mCallbackText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Disconnected.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// As part of the sample, tell the user what happened.</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">Binding</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">remote_service_disconnected</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Class for interacting with the secondary interface of the service.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ServiceConnection</span> <span class="n">mSecondaryConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceConnection</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceConnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">,</span>
</span><span class='line'>                <span class="n">IBinder</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Connecting to a secondary interface is the same as any</span>
</span><span class='line'>            <span class="c1">// other interface.</span>
</span><span class='line'>            <span class="n">mSecondaryService</span> <span class="o">=</span> <span class="n">ISecondary</span><span class="o">.</span><span class="na">Stub</span><span class="o">.</span><span class="na">asInterface</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceDisconnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mSecondaryService</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">OnClickListener</span> <span class="n">mBindListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Establish a couple connections with the service, binding</span>
</span><span class='line'>            <span class="c1">// by interface names.  This allows other applications to be</span>
</span><span class='line'>            <span class="c1">// installed that replace the remote service by implementing</span>
</span><span class='line'>            <span class="c1">// the same interface.</span>
</span><span class='line'>            <span class="n">bindService</span><span class="o">(</span><span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">IRemoteService</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()),</span>
</span><span class='line'>                    <span class="n">mConnection</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">bindService</span><span class="o">(</span><span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">ISecondary</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()),</span>
</span><span class='line'>                    <span class="n">mSecondaryConnection</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mIsBound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mCallbackText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Binding.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">OnClickListener</span> <span class="n">mUnbindListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mIsBound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// If we have received the service, and hence registered with</span>
</span><span class='line'>                <span class="c1">// it, then now is the time to unregister.</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">mService</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mService</span><span class="o">.</span><span class="na">unregisterCallback</span><span class="o">(</span><span class="n">mCallback</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// There is nothing special we need to do if the service</span>
</span><span class='line'>                        <span class="c1">// has crashed.</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Detach our existing connection.</span>
</span><span class='line'>                <span class="n">unbindService</span><span class="o">(</span><span class="n">mConnection</span><span class="o">);</span>
</span><span class='line'>                <span class="n">unbindService</span><span class="o">(</span><span class="n">mSecondaryConnection</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mKillButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mIsBound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="n">mCallbackText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Unbinding.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">OnClickListener</span> <span class="n">mKillListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// To kill the process hosting our service, we need to know its</span>
</span><span class='line'>            <span class="c1">// PID.  Conveniently our service has a call that will return</span>
</span><span class='line'>            <span class="c1">// to us that information.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mSecondaryService</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">mSecondaryService</span><span class="o">.</span><span class="na">getPid</span><span class="o">();</span>
</span><span class='line'>                    <span class="c1">// Note that, though this API allows us to request to</span>
</span><span class='line'>                    <span class="c1">// kill any process based on its PID, the kernel will</span>
</span><span class='line'>                    <span class="c1">// still impose standard restrictions on which PIDs you</span>
</span><span class='line'>                    <span class="c1">// are actually able to kill.  Typically this means only</span>
</span><span class='line'>                    <span class="c1">// the process running your application and any additional</span>
</span><span class='line'>                    <span class="c1">// processes created by that app as shown here; packages</span>
</span><span class='line'>                    <span class="c1">// sharing a common UID will also be able to kill each</span>
</span><span class='line'>                    <span class="c1">// other&#39;s processes.</span>
</span><span class='line'>                    <span class="n">Process</span><span class="o">.</span><span class="na">killProcess</span><span class="o">(</span><span class="n">pid</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">mCallbackText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Killed service process.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Recover gracefully from the process hosting the</span>
</span><span class='line'>                    <span class="c1">// server dying.</span>
</span><span class='line'>                    <span class="c1">// Just for purposes of the sample, put up a notification.</span>
</span><span class='line'>                    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">Binding</span><span class="o">.</span><span class="na">this</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">remote_call_failed</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ----------------------------------------------------------------------</span>
</span><span class='line'>    <span class="c1">// Code showing how to deal with callbacks.</span>
</span><span class='line'>    <span class="c1">// ----------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * This implementation is used to receive callbacks from the remote</span>
</span><span class='line'><span class="cm">     * service.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IRemoteServiceCallback</span> <span class="n">mCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IRemoteServiceCallback</span><span class="o">.</span><span class="na">Stub</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * This is called by the remote service regularly to tell us about</span>
</span><span class='line'><span class="cm">         * new values.  Note that IPC calls are dispatched through a thread</span>
</span><span class='line'><span class="cm">         * pool running in each process, so the code executing here will</span>
</span><span class='line'><span class="cm">         * NOT be running in our main thread like most other things -- so,</span>
</span><span class='line'><span class="cm">         * to update the UI, we need to use a Handler to hop over there.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">valueChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mHandler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">mHandler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">BUMP_MSG</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">BUMP_MSG</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Handler</span> <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">BUMP_MSG:</span>
</span><span class='line'>                    <span class="n">mCallbackText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Received from service: &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">arg1</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="kd">super</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>文章学习自<a href="http://developer.android.com/guide/components/aidl.html">http://developer.android.com/guide/components/aidl.html</a></strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Notes 01 - Bound Services]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/02/18/android-notes-01-bound-services/"/>
    <updated>2013-02-18T22:30:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/02/18/android-notes-01-bound-services</id>
    <content type="html"><![CDATA[<ul>
<li>一个bound的service是C/S的接口。它允许其他组件绑定到service,发送请求，接收回应并执行IPC。通常是需要给其他程序组件提供服务。

<ul>
<li>A bound service allows other components to bind to it, in order to interact with it and perform interprocess communication。</li>
<li>A bound service is destroyed once all clients unbind, unless the service was also started。</li>
</ul>
</li>
<li>客户端通过执行 bindService()绑定到service。这样的话，客户端需要实现一个ServiceConnection, 它可以监视与service的连接状态。bindService() 并不会有返回值，但是Android系统会在client与service连接上时，执行onServiceConnected() 的callback。在这个回调方法里面传递IBinder给client用来与service进行交互。</li>
<li>前面提到可以有多个Client同时bind到service。然而，系统只会在第一个client做绑定时才会执行service的onBind() 方法。对于随后需要绑定的客户端，系统会直接传递同一个 IBinder 对象给Client，而不是去再次执行onBind方法。(<em>那么也就是onBind方法只会被执行一次</em>)</li>
<li>通常来说，Music程序需要实现service的两种方式，这样既可以在activity被销毁之后(<em>假设只实现bound的方式的话，这个时候，unbind了，Music会停止</em>)音乐可以继续播放，当重新进入activity时又会重新bind上。这刚好验证了下面的说法：</li>
<li>如果一个service既可以started与bound。当一个service是started的，系统并不会在所有的Client都unbind之后去杀死这个service，我们需要显示的去停止这个service，通过stopSelf或者stopService的方式。</li>
</ul>


<!-- more -->


<h2>创建一个bound的Service</h2>

<ul>
<li>当创建了一个可以绑定的service之后，你必须提供一个<a href="http://developer.android.com/reference/android/os/IBinder.html">IBinder</a>对象，它用来提供client与service进行交互的接口。我们有下面三种方式来实现这个接口：

<ul>
<li><strong>Extending the Binder class</strong>： 如果你的sevice是私有的（不需要与其他程序进行IPC交互），Client可以与Service在同一个Process里面直接进行交互。若不需要IPC，建议使用这个方法。</li>
<li><strong>Using a Messenger</strong>： 可以使用handler与message进行IPC操作，这是一种直观简便的方式。一个发送消息，一个接受处理后并返回。Handler使得有一个Queue来装这些发送的请求，然后Service再逐个接受并进行处理。(<em>这样的话，只能顺序执行那些发出的请求</em>)</li>
<li><strong>Using AIDL</strong>(Android Interface Definition Language)： 一种系统可以理解并做出合适处理的IPC机制。使用AIDL可以处理同时发出的请求（并发）。在这种情况下，Service必须小心仔细的去处理多线程操作。 我们需要生成一个.aidl的文件来定义接口，Android SDK tool会使用这个文件生成一个抽象类，在这个类里面去实现接口并处理IPC。</li>
<li><strong>请注意</strong>：AIDL的方式并不常见，因为他实现起来更加复杂，若需要了解AIDL的详情，请参考后续文章。</li>
</ul>
</li>
</ul>


<h3>(1)Extending the Binder class</h3>

<p>Note: 这种方法仅仅适合client与service在同一个程序与process中的情况。这种情况是最常见的。例如，如果你的音乐程序需要bind到一个activity，并且想使得播放音乐在后台。(<em>实际上，大多数情况下，播放音乐程序的service都需要与其他process的组件进行bind，所以这种方式extend Binder类的方式只适合简单的播放需求</em>)</p>

<ul>
<li><p>实现步骤</p>

<ul>
<li>In your service, create an instance of Binder that either:Return this instance of Binder from the onBind() callback method.

<ul>
<li>contains public methods that the client can call</li>
<li>returns the current Service instance, which has public methods the client can call</li>
<li>or, returns an instance of another class hosted by the service with public methods the client can call</li>
</ul>
</li>
<li>Return this instance of Binder from the onBind() callback method.</li>
<li>In the client, receive the Binder from the onServiceConnected() callback method and make calls to the bound service using the methods provided.</li>
</ul>
</li>
<li><p>Service端代码示例：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalService</span> <span class="kd">extends</span> <span class="n">Service</span><span class="o">{</span>
</span><span class='line'>    <span class="c1">// Binder given to clients</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">IBinder</span> <span class="n">mBinder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalBinder</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// Random number generator</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Random</span> <span class="n">mGenerator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Class used for the client Binder.  Because we know this service always</span>
</span><span class='line'><span class="cm">     * runs in the same process as its clients, we don&#39;t need to deal with IPC.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalBinder</span> <span class="kd">extends</span> <span class="n">Binder</span><span class="o">{</span>
</span><span class='line'>        <span class="n">LocalService</span> <span class="nf">getService</span><span class="o">(){</span>
</span><span class='line'>            <span class="c1">// Return this instance of LocalService so clients can call public methods</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">LocalService</span><span class="o">.</span><span class="na">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mBinder</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** method for clients */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getRandomNumber</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">mGenerator</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Client端代码示例：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BindingActivity</span> <span class="kd">extends</span> <span class="n">Activity</span><span class="o">{</span>
</span><span class='line'>    <span class="n">LocalService</span> <span class="n">mService</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">mBound</span> <span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Bind to LocalService</span>
</span><span class='line'>        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">LocalService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bindService</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">mConnection</span><span class="o">,</span><span class="n">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">(){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Unbind from the service</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">mBound</span><span class="o">){</span>
</span><span class='line'>            <span class="n">unbindService</span><span class="o">(</span><span class="n">mConnection</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mBound</span> <span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Called when a button is clicked (the button in the layout file attaches to</span>
</span><span class='line'><span class="cm">      * this method with the android:onClick attribute) */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onButtonClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">mBound</span><span class="o">){</span>
</span><span class='line'>            <span class="c1">// Call a method from the LocalService.</span>
</span><span class='line'>            <span class="c1">// However, if this call were something that might hang, then this request should</span>
</span><span class='line'>            <span class="c1">// occur in a separate thread to avoid slowing down the activity performance.</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">mService</span><span class="o">.</span><span class="na">getRandomNumber</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="s">&quot;number: &quot;</span><span class="o">+</span> <span class="n">num</span><span class="o">,</span><span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Defines callbacks for service binding, passed to bindService() */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ServiceConnection</span> <span class="n">mConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceConnection</span><span class="o">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="n">publicvoid</span> <span class="nf">onServiceConnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">,</span>
</span><span class='line'>                <span class="n">IBinder</span> <span class="n">service</span><span class="o">){</span>
</span><span class='line'>            <span class="c1">// We&#39;ve bound to LocalService, cast the IBinder and get LocalService instance</span>
</span><span class='line'>            <span class="n">LocalBinder</span> <span class="n">binder</span> <span class="o">=(</span><span class="n">LocalBinder</span><span class="o">)</span> <span class="n">service</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mService</span> <span class="o">=</span> <span class="n">binder</span><span class="o">.</span><span class="na">getService</span><span class="o">();</span>
</span><span class='line'>            <span class="n">mBound</span> <span class="o">=</span><span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceDisconnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">arg0</span><span class="o">){</span>
</span><span class='line'>            <span class="n">mBound</span> <span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>(2)Using a Messenger</h3>

<ul>
<li>这是避免使用AIDL仍然可以实现IPC的一个简便方法。

<ul>
<li>Service实现一个Handler来接受Client的每一个callback。</li>
<li>这个Handler用来创建Messenger 对象。</li>
<li>Messenger 创建一个IBinder对象，Service在onBind方法里面把这个对象返回给客户端。</li>
<li>客户端使用这个IBinder对象来实例化 Messenger (that references the service&#8217;s Handler), 然后客户端使用这个messager再发送message对象给service。</li>
<li>Service在它的handler里面接收到每一个Message。</li>
</ul>
</li>
<li>Service代码示例：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessengerService</span> <span class="kd">extends</span> <span class="n">Service</span><span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Command to the service to display a message */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MSG_SAY_HELLO</span> <span class="o">=</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Handler of incoming messages from clients.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">IncomingHandler</span> <span class="kd">extends</span> <span class="n">Handler</span><span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">){</span>
</span><span class='line'>            <span class="k">switch</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">){</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">MSG_SAY_HELLO:</span>
</span><span class='line'>                    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span><span class="s">&quot;hello!&quot;</span><span class="o">,</span><span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="kd">super</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Target we publish for clients to send messages to IncomingHandler.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Messenger</span> <span class="n">mMessenger</span> <span class="o">=</span><span class="k">new</span> <span class="n">Messenger</span><span class="o">(</span><span class="n">newIncomingHandler</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * When binding to the service, we return an interface to our messenger</span>
</span><span class='line'><span class="cm">     * for sending messages to the service.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">){</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span><span class="s">&quot;binding&quot;</span><span class="o">,</span><span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mMessenger</span><span class="o">.</span><span class="na">getBinder</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Client端代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActivityMessenger</span> <span class="kd">extends</span> <span class="n">Activity</span><span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Messenger for communicating with the service. */</span>
</span><span class='line'>    <span class="n">Messenger</span> <span class="n">mService</span> <span class="o">=</span><span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Flag indicating whether we have called bind on the service. */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">mBound</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Class for interacting with the main interface of the service.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ServiceConnection</span> <span class="n">mConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceConnection</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">publicvoid</span> <span class="nf">onServiceConnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">,</span><span class="n">IBinder</span> <span class="n">service</span><span class="o">){</span>
</span><span class='line'>            <span class="c1">// This is called when the connection with the service has been</span>
</span><span class='line'>            <span class="c1">// established, giving us the object we can use to</span>
</span><span class='line'>            <span class="c1">// interact with the service.  We are communicating with the</span>
</span><span class='line'>            <span class="c1">// service using a Messenger, so here we get a client-side</span>
</span><span class='line'>            <span class="c1">// representation of that from the raw IBinder object.</span>
</span><span class='line'>            <span class="n">mService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Messenger</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mBound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceDisconnected</span><span class="o">(</span><span class="n">ComponentName</span> <span class="n">className</span><span class="o">){</span>
</span><span class='line'>            <span class="c1">// This is called when the connection with the service has been</span>
</span><span class='line'>            <span class="c1">// unexpectedly disconnected -- that is, its process crashed.</span>
</span><span class='line'>            <span class="n">mService</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mBound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sayHello</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(!</span><span class="n">mBound</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Create and send a message to the service, using a supported &#39;what&#39; value</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">Message</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="n">MessengerService</span><span class="o">.</span><span class="na">MSG_SAY_HELLO</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">mService</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Bind to the service</span>
</span><span class='line'>        <span class="n">bindService</span><span class="o">(</span><span class="n">newIntent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">MessengerService</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">mConnection</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">(){</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Unbind from the service</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">mBound</span><span class="o">){</span>
</span><span class='line'>            <span class="n">unbindService</span><span class="o">(</span><span class="n">mConnection</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mBound</span> <span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>请注意：上面并没有演示Service接收到Client的Msg之后，如何再与Client进行交互的。如果想了解更多请看Demo Source Code:<a href="http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/app/MessengerService.html">MessengerService.java</a> (service) and <a href="http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/app/MessengerServiceActivities.html">MessengerServiceActivities.java</a> (client) samples.</li>
</ul>


<h3>(3)AIDL:关于这部分内容，请看下一篇文章</h3>

<ul>
<li><strong>使用Messager与AIDL的对比：</strong>

<ul>
<li>如果想要IPC,使用Messager要比AIDL更简单，只是AIDL可以处理并发的情况，更加复杂一点。</li>
<li>对于大多数App来说，都不需要处理多线程并发的问题，所以使用Messager会更简单一点。每次处理一个message。</li>
<li>如果你的Service需要是多线程的，那么需要使用AIDL。(<em>有多个bind对象，他们可能会同时发出request</em>)</li>
</ul>
</li>
</ul>


<h2>绑定到Service</h2>

<ul>
<li>因为Binding的操作是异步（asynchronous）的， bindService() 会立即返回，并不携带IBinder对象返回给Client。为了接收到IBinder对象，客户端需要创建一个 ServiceConnection 来接收它。</li>
<li>Note: 只有activities, services, and content providers 可以bind到service，你不可以从broadcast receiver里面去做bind service的操作。</li>
<li>为了实现Bind到Service，你需要做以下的事情：

<ul>
<li>Implement ServiceConnection.需要重写下面两个方法

<ul>
<li>onServiceConnected()： 系统会在connected上的时候call到这个方法。</li>
<li>onServiceDisconnected()： 只有在serivce被异常终结时才会call到这个方法，正常的unbind不会call这里。</li>
</ul>
</li>
<li>当系统call了onServiceConnected（）之后，你可以开始使用定义好的接口去呼叫service。</li>
<li>想要与service解绑，可以执行 unbindService()。</li>
</ul>
</li>
<li>Additional notes:

<ul>
<li>你应该总是去捕获 DeadObjectException ，当connection被破坏时会抛出这个异常。</li>
<li>对象都是跨process引用的。</li>
<li>你应该成对的使用bind与unbind。例如

<ul>
<li>如果你不想在activity不可见的时候再与service进行交互，需要在activity的onStart里面进行bind，在onStop里面去unbind。</li>
<li>如果想在activity不可见时，仍然进行交互，那么在onDestory里面再去做unbind。</li>
</ul>
</li>
<li>请不要在activity的onResume与onPause里面去做bind与unbind，这两个activity的状态切换太频繁，不适合用来做与service的交互。</li>
</ul>
</li>
</ul>


<h4>管理Bound Service的Lifecycle</h4>

<ul>
<li>如果这个service是一个单纯的bound service(不是started与bound的混合体)，那么Android系统会自动去管理它的lifecycle。(当所有的client都unbind时，系统kill这个service)。</li>
<li>如果你实现了onStartCommand()方法，那么这个service就被认为是started类型的，那么即使所有的client都unbind了，那么还是需要通过stopSelf或者stopService的方式来停止这个service。</li>
<li>另外，如果你的service是started类型的，并且还可以接受bind操作。那么当系统执行你的 onUnbind() 方法时，如果你想在Client下次bind上service的时候系统去call onRebind（而不是重新call onBind），你可以选择在onUnbind里面去return true。 在 onRebind() 会返回void，但是client仍然会在onServiceConnected里面接受到IBinder。</li>
</ul>


<p><img src="http://kesenhoo.github.com/images/articles/service_binding_tree_lifecycle.png" alt="service_binding_tree_lifecycle.png" /></p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/guide/components/bound-services.html">http://developer.android.com/guide/components/bound-services.html</a></strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Notes 00 - Services]]></title>
    <link href="http://kesenhoo.github.com/blog/2013/02/04/android-notes-00-services/"/>
    <updated>2013-02-04T18:37:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2013/02/04/android-notes-00-services</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<ul>
<li>Service是一个可以在后台长时间进行工作的一个程序组件。这个组件并没有提供UI。其他的程序组件可以Start一个Service，并且可以在用户切换到另外一个程序的时候继续工作。另外，某个组件可以Bind到一个Service上，并与他进行交互，甚至是进行IPC操作。例如，一个Service可以处理网络交互，播放音乐，执行I/O操作，或者与Content Provider进行交互，他们都是在后台的。

<ul>
<li>Service可以跑在后台进行工作，即使用户在切换到另外一个程序。</li>
<li>Service可以允许其他组件与它进行Bind，从而进行IPC操作。</li>
<li>Service默认是跑在host程序的main thread。</li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li>两种形式:

<ul>
<li><strong>Started:</strong> 当程序的某个组件（例如一个activity）通过执行startService()来启动某个Service时，我们认为这个Service是&#8221;Started&#8221;的。一旦被started,这个Service可以在后台执行，但是却不确定它的状态，即使启动这个Service的组件已经被销毁了，Service的状态还是无法确定（有可能存在，也有可能已经消失了）。通常情况下，一个started的Service执行单一操作，并且不会给叫起它的组件返回任何结果。例如，它可能是做通过网络执行上传或者下载一个文件的动作。当操作结束后，这个service应该自动结束自己。</li>
<li><strong>Bound:</strong> 当某个程序组件通过执行bindService()来bind到一个service时，我们认为这个service是&#8221;Bound&#8221;的。一个bound的service提供一个client-server的界面来允许这个组件与service进行交互。发送请求，获取结果，甚至是IPC操作。一个bound的service，只要是还有组件是bind状态的，它就会一直运作。Service允许多个组件同时bind到它。只要所有的bind对象都unbind之后，这个service就会被销毁掉。</li>
<li>尽管这是两种不同的type的Service，但是我们还是可以同时使用它的，也就是可以允许做started的同时进行bind的操作。这取决与你的实现方式：通过startCommand()方法来start一个service,通过onBind()的回调来设置允许bind动作。</li>
<li>无论这个service是哪种形式的，它都可以被任何组件(即使是另外一个Process)所使用，就像任何组件都可以使用activity一样。当然，你也可以把一个service声明为private的，这样可以阻止其他程序的访问。</li>
</ul>
</li>
<li><strong>注意：</strong>Service默认是跑在host程序的main thread里面的，它既不会主动创建它自己的Thread，也不会跑在另外一个Process(除非你特别指定)。这就意味着，假如你要在service里面做一些很耗CPU的操作(例如播放音乐，网络下载等)，你应该在service里面创建另外一个thread来做那些操作，从而避免ANR。</li>
</ul>


<h2>基础</h2>

<ul>
<li>为了创建一个service，我们需要创建一个继承自Service的类。并override一些callback方法。最重要的一些方法如下：当系统资源不足时，会强制停止service，并在用户重新回到activity时，系统对其进行恢复。如果一个service是bind到一个活动的activity上，则不容易被kill掉。假设service被声明为run in the foreground，那就几乎不会被kill掉。随着service被不断执行，它会被慢慢降低优先级，当系统资源不足时，会先stop这些优先级低的service,假设这个service被kill掉，那么会在资源足够时马上恢复它。

<ul>
<li>onStartCommand()： 通过call startService()的方式，需要handle这个callback。service需要通过stopSelf()或者是其他组件通过call stopService（）来stop这个service。 如果你只想提供bind service的方式，那么这个function就不需要实现了。</li>
<li>onBind()： 通过call bindService() 的方式，需要handle这个callback。返回一个IBinder对象。</li>
<li>onCreate()： Service第一次被创建是才会执行。</li>
<li>onDestroy()： Service最后被销毁时才会执行。</li>
</ul>
</li>
</ul>


<h4>在manifest文件中声明service</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;application</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;service</span> <span class="na">android:name=</span><span class="s">&quot;.ExampleService&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/application&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>创建一个started的Service</h2>

<ul>
<li>Service在 onStartCommand() 方法里面接收Intent。我们有两个类可以继承用来实现一个service

<ul>
<li><a href="http://developer.android.com/reference/android/app/Service.html">Service</a>：跑在main thread</li>
<li><a href="http://developer.android.com/reference/android/app/IntentService.html">IntentService</a>： 会在Service里面new 一个worker thread。我们需要做的只是实现onHandleIntent()，在这里接受每次启动service的参数。<strong>注意</strong>:这适合没有多线程并发的情况使用。每次start都是独立的操作。</li>
</ul>
</li>
</ul>


<h4>继承自IntentService (适合于不会有同时发出请求的情况)</h4>

<ul>
<li>Creates a default worker thread that executes all intents delivered to onStartCommand() separate from your application&#8217;s main thread.</li>
<li>Creates a work queue that passes one intent at a time to your onHandleIntent() implementation, so you never have to worry about multi-threading.</li>
<li>Stops the service after all start requests have been handled, so you never have to call stopSelf().</li>
<li>Provides default implementation of onBind() that returns null.</li>
<li>Provides a default implementation of onStartCommand() that sends the intent to the work queue and then to your onHandleIntent() implementation.</li>
<li>要做的只是提供constructor并实现 onHandleIntent().</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloIntentService</span> <span class="kd">extends</span> <span class="n">IntentService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/** </span>
</span><span class='line'><span class="cm">   * A constructor is required, and must call the super IntentService(String)</span>
</span><span class='line'><span class="cm">   * constructor with a name for the worker thread.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">HelloIntentService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="s">&quot;HelloIntentService&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * The IntentService calls this method from the default worker thread with</span>
</span><span class='line'><span class="cm">   * the intent that started the service. When this method returns, IntentService</span>
</span><span class='line'><span class="cm">   * stops the service, as appropriate.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Normally we would do some work here, like download a file.</span>
</span><span class='line'>      <span class="c1">// For our sample, we just sleep for 5 seconds.</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">endTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">wait</span><span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>继承自Service（适合于可能会有同时发出请求的情况）</h4>

<ul>
<li>使用一个work queue（handler）来处理同时发出的请求，一次执行一个job。当然，也可以在接受到消息的时候，立即启动一个thread来做这个job，那么就会出现并发的情况。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Looper</span> <span class="n">mServiceLooper</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ServiceHandler</span> <span class="n">mServiceHandler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Handler that receives messages from the thread</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ServiceHandler</span> <span class="kd">extends</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">ServiceHandler</span><span class="o">(</span><span class="n">Looper</span> <span class="n">looper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">(</span><span class="n">looper</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Normally we would do some work here, like download a file.</span>
</span><span class='line'>          <span class="c1">// For our sample, we just sleep for 5 seconds.</span>
</span><span class='line'>          <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">endTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">wait</span><span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="c1">// Stop the service using the startId, so that we don&#39;t stop</span>
</span><span class='line'>          <span class="c1">// the service in the middle of handling another job</span>
</span><span class='line'>          <span class="n">stopSelf</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">arg1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Start up the thread running the service.  Note that we create a</span>
</span><span class='line'>    <span class="c1">// separate thread because the service normally runs in the process&#39;s</span>
</span><span class='line'>    <span class="c1">// main thread, which we don&#39;t want to block.  We also make it</span>
</span><span class='line'>    <span class="c1">// background priority so CPU-intensive work will not disrupt our UI.</span>
</span><span class='line'>    <span class="n">HandlerThread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerThread</span><span class="o">(</span><span class="s">&quot;ServiceStartArguments&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">THREAD_PRIORITY_BACKGROUND</span><span class="o">);</span>
</span><span class='line'>    <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get the HandlerThread&#39;s Looper and use it for our Handler </span>
</span><span class='line'>    <span class="n">mServiceLooper</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mServiceHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceHandler</span><span class="o">(</span><span class="n">mServiceLooper</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;service starting&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// For each start request, send a message to start a job and deliver the</span>
</span><span class='line'>      <span class="c1">// start ID so we know which request we&#39;re stopping when we finish the job</span>
</span><span class='line'>      <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">mServiceHandler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">();</span>
</span><span class='line'>      <span class="n">msg</span><span class="o">.</span><span class="na">arg1</span> <span class="o">=</span> <span class="n">startId</span><span class="o">;</span>
</span><span class='line'>      <span class="n">mServiceHandler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// If we get killed, after returning from here, restart</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">START_STICKY</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// We don&#39;t provide binding, so return null</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;service done&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>关于onStartCommand()的返回值：在系统因资源不足时杀死这个service,之后以何种方式restart与这里的返回值有关

<ul>
<li>START_NOT_STICKY： If the system kills the service after onStartCommand() returns, do not recreate the service, unless there are pending intents to deliver.</li>
<li>START_STICKY： recreate the service and call onStartCommand(), but do not redeliver the last intent.除非系统有pending的intent，否则会丢给onstartCommand()一个null的intent。这适合于media player一类的service。（This is suitable for media players (or similar services) that are not executing commands, but running indefinitely and waiting for a job.）</li>
<li>START_REDELIVER_INTENT： recreate the service and call onStartCommand() with the last intent that was delivered to the service. This is suitable for services that are actively performing a job that should be immediately resumed, such as downloading a file. 适合于下载等需要立即恢复的工作。</li>
</ul>
</li>
</ul>


<h4>启动Service</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="n">newIntent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">HelloService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">startService</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>若这个service没有启动过，这先执行onCreate()，然后才是onStartCommand()。 否则，若这个service已经启动了，则会直接执行onStartComand()。</li>
<li>默认的startService方式是无法返回数据给叫起它的对象的，若是需要返回数据，可以使用pendingIntent的getBoardcast方式发送给service，然后service再使用这个broadcast进行return value。</li>
</ul>


<h4>停止Service</h4>

<ul>
<li>一个started类型的service必须自己来manage own lifecycle。一旦执行下面的方法，系统会立即停止这个service.

<ul>
<li>自己执行stopSelf()</li>
<li>其他组件执行stopService()</li>
</ul>
</li>
<li>当多个并发时，需要通过执行stopSelf(int)来避免其他正在执行的动作也被一起杀掉，这个int id是onStartCommand()里面的参数。</li>
<li>请注意，在任务执行完毕时，请及时关闭service，以避免电量的浪费。</li>
</ul>


<h2>创建一个Bound的Service</h2>

<ul>
<li>通过bindService（）的方式创建的service。</li>
<li>通常来说，当你需要这个Service提供一些与其他程序组件进行IPC交互的功能时，会使用这种方式。</li>
<li>这种方式启动的service，并不需要自己去停止service。当没有组件再bind上的时候，系统会kill掉它。</li>
<li>创建bound方式的service的第一件事情是，定义客户端与Service交互的接口。这些接口通过onBind()里面的IBinder对象来进行操作。</li>
<li>可以有多个客户端同时bind到Service,当客户端做完事情之后，会执行unbindService()来进行解绑。</li>
</ul>


<h2>发送通知给用户</h2>

<ul>
<li>Service可以通过<a href="http://developer.android.com/guide/topics/ui/notifiers/toasts.html">Toast Notifications</a> or <a href="http://developer.android.com/guide/topics/ui/notifiers/notifications.html">Status Bar Notifications</a>来通知用户。</li>
<li>最好的方式是通过Status Bar Notification来通知用户，例如下载完成等操作，用户可以拉开notification，再进行其他操作。</li>
</ul>


<h2>使得Service跑在foregound</h2>

<ul>
<li>A foreground service: 一个即使在系统资源低的情况下，也不会杀掉的service。可以认为这个Service是与用户正在交互的。它会在status bar上显示一个ongoing的notification，除非这个service的工作已经被停止或者是不再是foreground的了。例如，播放音乐是一个foreground的service，需要在status bar上一直显示正在播放的歌曲。用户可以点击notification再launch起music或者做切歌等动作。</li>
<li>startForeground()：为了使得service跑在foreground,需要执行这个方法。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span><span class="k">new</span> <span class="n">Notification</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">,</span> <span class="n">getText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">ticker_text</span><span class="o">),</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'><span class="n">Intent</span> <span class="n">notificationIntent</span> <span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">ExampleActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">PendingIntent</span> <span class="n">pendingIntent</span> <span class="o">=</span><span class="n">PendingIntent</span><span class="o">.</span><span class="na">getActivity</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span> <span class="n">notificationIntent</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">notification</span><span class="o">.</span><span class="na">setLatestEventInfo</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">getText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">notification_title</span><span class="o">),</span>
</span><span class='line'>        <span class="n">getText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">notification_message</span><span class="o">),</span> <span class="n">pendingIntent</span><span class="o">);</span>
</span><span class='line'><span class="n">startForeground</span><span class="o">(</span><span class="n">ONGOING_NOTIFICATION</span><span class="o">,</span> <span class="n">notification</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>stopForeground(boolean)： 使用这个方法把service从foreground移除（变成background）</li>
</ul>


<h2>管理Service的Lifecycle</h2>

<ul>
<li>A started service 与 A bound service：</li>
<li>上面两种方式并不总是独立存在的。你也可以在一个Start的service做bind的动作。例如，播放音乐的Service可以由start的方式来启动，之后还可以做bind的操作，这个时候，执行stopService并不会使得Service立即停止，除非所有bind的对象都解绑，Service才会停止。</li>
<li><strong>如果一个service既可以started与bound。当一个service是started的，系统并不会在所有的Client都unbind之后去杀死这个service，我们需要显示的去停止这个service，通过stopSelf或者stopService的方式。</strong></li>
</ul>


<h4>实现生命周期的一些callback方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mStartMode</span><span class="o">;</span>       <span class="c1">// indicates how to behave if the service is killed</span>
</span><span class='line'>    <span class="n">IBinder</span> <span class="n">mBinder</span><span class="o">;</span>      <span class="c1">// interface for clients that bind</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">mAllowRebind</span><span class="o">;</span> <span class="c1">// indicates whether onRebind should be used</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// The service is being created</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// The service is starting, due to a call to startService()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mStartMode</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// A client is binding to the service with bindService()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mBinder</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onUnbind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// All clients have unbound with unbindService()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mAllowRebind</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRebind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// A client is binding to the service with bindService(),</span>
</span><span class='line'>        <span class="c1">// after onUnbind() has already been called</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// The service is no longer used and is being destroyed</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>两种service的lifecycle图示：</h4>

<p><img src="http://kesenhoo.github.com/images/articles/service_lifecycle.png" alt="service_lifecycle.png" /></p>

<p>onCreate与onDestory负责创建与释放一些资源。例如开的线程等。</p>

<hr />

<p><strong>文章学习自<a href="http://developer.android.com/guide/components/services.html">http://developer.android.com/guide/components/services.html</a></strong><br/>
<strong>转载请注明出自<a href="http:://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/12/20/hi/"/>
    <updated>2012-12-20T00:57:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/12/20/hi</id>
    <content type="html"><![CDATA[<p><img src="http://kesenhoo.github.com/images/articles/hello_world.jpg"></p>

<p>Hi.This is my first post. <strong>By markdown.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Multimedia] - 捕获照片(Lesson 3 - 直接操控相机)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/12/18/android-training-multimedia-capturing-photos-lesson-3/"/>
    <updated>2012-12-18T23:59:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/12/18/android-training-multimedia-capturing-photos-lesson-3</id>
    <content type="html"><![CDATA[<p>在这一节课，我们会讨论如何通过使用framework的APIs来直接控制相机的硬件。直接控制设备的相机，相比起拍照与录像来说，要复杂一些。然而，如果你想要创建一个专业的特殊的相机程序，这节课会演示这部分内容。</p>

<h2>Open the Camera Object(打开相机对象)</h2>

<p>获取到 Camera 对象是直接控制Camera的第一步。正如Android自带的相机程序一样，推荐访问Camera的方式是在onCreate方法里面另起一个Thread来打开Camera。这个方法可以避免因为打开工作比较费时而引起ANR。在一个更加基础的实现方法里面，打开Camera的动作被延迟到onResume()方法里面去执行，这样使得代码能够更好的重用，并且保持控制流程不会复杂化。(原文是：In a more basic implementation, opening the camera can be deferred to the onResume() method to facilitate code reuse and keep the flow of control simple.)</p>

<!-- more -->


<p>在camera正在被另外一个程序使用的时候去执行 Camera.open() 会抛出一个exception，所以需要捕获起来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">safeCameraOpen</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">qOpened</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">releaseCameraAndPreview</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mCamera</span> <span class="o">=</span> <span class="n">Camera</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="n">qOpened</span> <span class="o">=</span> <span class="o">(</span><span class="n">mCamera</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">app_name</span><span class="o">),</span> <span class="s">&quot;failed to open Camera&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">qOpened</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">releaseCameraAndPreview</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mPreview</span><span class="o">.</span><span class="na">setCamera</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mCamera</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mCamera</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mCamera</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自从API level 9开始，camera的framework可以支持多个cameras。如果你使用 open() ，你会获取到最后的一个camera。</p>

<h2>Create the Camera Preview(创建相机预览界面)</h2>

<p>拍照通常需要提供一个预览界面来显示待拍的事物。和拍照类似，你需要使用一个 SurfaceView 来展现录制的画面。</p>

<h3>Preview Class</h3>

<p>为了显示一个预览界面，你需要一个Preview类。这个类需要实现android.view.SurfaceHolder.Callback 接口，这个接口用来传递从camera硬件获取的数据到程序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Preview</span> <span class="kd">extends</span> <span class="n">ViewGroup</span> <span class="kd">implements</span> <span class="n">SurfaceHolder</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SurfaceView</span> <span class="n">mSurfaceView</span><span class="o">;</span>
</span><span class='line'>    <span class="n">SurfaceHolder</span> <span class="n">mHolder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Preview</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mSurfaceView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SurfaceView</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="n">addView</span><span class="o">(</span><span class="n">mSurfaceView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Install a SurfaceHolder.Callback so we get notified when the</span>
</span><span class='line'>        <span class="c1">// underlying surface is created and destroyed.</span>
</span><span class='line'>        <span class="n">mHolder</span> <span class="o">=</span> <span class="n">mSurfaceView</span><span class="o">.</span><span class="na">getHolder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mHolder</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mHolder</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="n">SurfaceHolder</span><span class="o">.</span><span class="na">SURFACE_TYPE_PUSH_BUFFERS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Preview类必须在查看图片之前传递给 Camera 对象。正如下面描述的：</p>

<h3>Set and Start the Preview</h3>

<p>一个Camera实例与它相关的preview必须以一种指定的顺序来创建，首先是创建Camera对象。在下面的示例中，初始化camera的动作被封装起来，这样，无论用户想对Camera做任何的改变，都通过执行setCamera() 来呼叫<a href="http://developer.android.com/reference/android/hardware/Camera.html#startPreview(">Camera.startPreview()</a>)。Preview对象必须在 surfaceChanged() 的回调方法里面去做重新创建的动作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCamera</span><span class="o">(</span><span class="n">Camera</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mCamera</span> <span class="o">==</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stopPreviewAndFreeCamera</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mCamera</span> <span class="o">=</span> <span class="n">camera</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mCamera</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Size</span><span class="o">&gt;</span> <span class="n">localSizes</span> <span class="o">=</span> <span class="n">mCamera</span><span class="o">.</span><span class="na">getParameters</span><span class="o">().</span><span class="na">getSupportedPreviewSizes</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mSupportedPreviewSizes</span> <span class="o">=</span> <span class="n">localSizes</span><span class="o">;</span>
</span><span class='line'>        <span class="n">requestLayout</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mCamera</span><span class="o">.</span><span class="na">setPreviewDisplay</span><span class="o">(</span><span class="n">mHolder</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">          Important: Call startPreview() to start updating the preview surface. Preview must </span>
</span><span class='line'><span class="cm">          be started before you can take a picture.</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>        <span class="n">mCamera</span><span class="o">.</span><span class="na">startPreview</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modify Camera Settings(修改相机设置)</h2>

<p>相机设置可以改变拍照的方式，从缩放级别到曝光补偿(exposure compensation)。下面的例子仅仅演示了改变预览大小的设置，更多设置请参考Camera的源代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">surfaceChanged</span><span class="o">(</span><span class="n">SurfaceHolder</span> <span class="n">holder</span><span class="o">,</span> <span class="kt">int</span> <span class="n">format</span><span class="o">,</span> <span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Now that the size is known, set up the camera parameters and begin</span>
</span><span class='line'>    <span class="c1">// the preview.</span>
</span><span class='line'>    <span class="n">Camera</span><span class="o">.</span><span class="na">Parameters</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">mCamera</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>
</span><span class='line'>    <span class="n">parameters</span><span class="o">.</span><span class="na">setPreviewSize</span><span class="o">(</span><span class="n">mPreviewSize</span><span class="o">.</span><span class="na">width</span><span class="o">,</span> <span class="n">mPreviewSize</span><span class="o">.</span><span class="na">height</span><span class="o">);</span>
</span><span class='line'>    <span class="n">requestLayout</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mCamera</span><span class="o">.</span><span class="na">setParameters</span><span class="o">(</span><span class="n">parameters</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">      Important: Call startPreview() to start updating the preview surface. Preview must be</span>
</span><span class='line'><span class="cm">      started before you can take a picture.</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">mCamera</span><span class="o">.</span><span class="na">startPreview</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set the Preview Orientation(设置预览方向)</h2>

<p>大多数相机程序会锁定预览为横屏的，因为那是人拍照的自然方式。设置里面并没有阻止你去拍竖屏的照片，这些信息会被记录在EXIF里面。 <a href="http://developer.android.com/reference/android/hardware/Camera.html#setDisplayOrientation(int">setCameraDisplayOrientation()</a>) 方法可以使得你改变预览的方向，并且不会影响到图片被记录的效果。然而，在Android API level 14之前，你必须在改变方向之前，先停止你的预览，然后才能去重启它。</p>

<h2>Take a Picture(拍一张图片)</h2>

<p>只要预览开始之后，可以使用<a href="http://developer.android.com/reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback,%20android.hardware.Camera.PictureCallback,%20android.hardware.Camera.PictureCallback">Camera.takePicture()</a>) 方法来拍下一张图片。你可以创建Camera.PictureCallback 与 Camera.ShutterCallback 对象并传递他们到Camera.takePicture()中。</p>

<p>如果你想要做连拍的动作，你可以创建一个Camera.PreviewCallback 并实现onPreviewFrame().你还可以选择几个预览帧来进行拍照，或是建立一个延迟拍照的动作。</p>

<h2>Restart the Preview(重启预览)</h2>

<p>在图片被获取后，你必须在用户拍下一张图片之前重启预览。在下面的示例中，通过重载shutter button来实现重启。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="o">(</span><span class="n">mPreviewState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">K_STATE_FROZEN:</span>
</span><span class='line'>        <span class="n">mCamera</span><span class="o">.</span><span class="na">startPreview</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mPreviewState</span> <span class="o">=</span> <span class="n">K_STATE_PREVIEW</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="n">mCamera</span><span class="o">.</span><span class="na">takePicture</span><span class="o">(</span> <span class="kc">null</span><span class="o">,</span> <span class="n">rawCallback</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPreviewState</span> <span class="o">=</span> <span class="n">K_STATE_BUSY</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="c1">// switch</span>
</span><span class='line'>    <span class="n">shutterBtnConfig</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Stop the Preview and Release the Camera(停止预览并释放相机)</h2>

<p>当你的程序在使用Camera之后，有必要做清理的动作。特别是，你必须释放 Camera 对象，不然会引起其他app crash。</p>

<p>那么何时应该停止预览并释放相机呢? 在预览的surface被摧毁之后，可以做停止预览与释放相机的动作。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">surfaceDestroyed</span><span class="o">(</span><span class="n">SurfaceHolder</span> <span class="n">holder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Surface will be destroyed when we return, so stop the preview.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mCamera</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">          Call stopPreview() to stop updating the preview surface.</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="n">mCamera</span><span class="o">.</span><span class="na">stopPreview</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  * When this function returns, mCamera will be null.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">stopPreviewAndFreeCamera</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mCamera</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">          Call stopPreview() to stop updating the preview surface.</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="n">mCamera</span><span class="o">.</span><span class="na">stopPreview</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">          Important: Call release() to release the camera for use by other applications. </span>
</span><span class='line'><span class="cm">          Applications should release the camera immediately in onPause() (and re-open() it in</span>
</span><span class='line'><span class="cm">          onResume()).</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="n">mCamera</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mCamera</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这节课的前面，这一些系列的动作也是setCamera() 方法的一部分，因此初始化一个camera的动作，总是从停止预览开始的。</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/camera/cameradirect.html">http://developer.android.com/training/camera/cameradirect.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Multimedia] - 捕获照片(Lesson 2 - 简单的录像动作)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/12/18/android-training-multimedia-capturing-photos-lesson-2/"/>
    <updated>2012-12-18T23:21:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/12/18/android-training-multimedia-capturing-photos-lesson-2</id>
    <content type="html"><![CDATA[<p>这节课会介绍如何使用现有的Camera程序来录制一个视频。和拍照一样，我们没有必要去重新发明录像程序。大多数的Android程序都有自带Camera来进行录像。(<em>这一课的内容大多数与前面一课类似，简要带过，一些细节不赘述了</em>)</p>

<h2>Request Camera Permission [请求权限]</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;uses-feature</span> <span class="na">android:name=</span><span class="s">&quot;android.hardware.camera&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="err">&lt;</span>/manifest ... &gt;
</span></code></pre></td></tr></table></div></figure>


<p>与上一课的拍照一样，你可以在启动Camera之前，使用hasSystemFeature(PackageManager.FEATURE_CAMERA).来检查是否存在Camera。</p>

<!-- more -->


<h2>Record a Video with a Camera App(使用相机程序来录制视频)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">dispatchTakeVideoIntent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">takeVideoIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">ACTION_VIDEO_CAPTURE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">takeVideoIntent</span><span class="o">,</span> <span class="n">ACTION_TAKE_VIDEO</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isIntentAvailable</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">PackageManager</span> <span class="n">packageManager</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getPackageManager</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ResolveInfo</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">packageManager</span><span class="o">.</span><span class="na">queryIntentActivities</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span>
</span><span class='line'>            <span class="n">PackageManager</span><span class="o">.</span><span class="na">MATCH_DEFAULT_ONLY</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>View the Video(查看视频)</h2>

<p>Android的Camera程序会把拍好的视频地址返回。下面的代码演示了，如何查询到这个视频并显示到VideoView.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleCameraVideo</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mVideoUri</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mVideoView</span><span class="o">.</span><span class="na">setVideoURI</span><span class="o">(</span><span class="n">mVideoUri</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/camera/videobasics.html">http://developer.android.com/training/camera/videobasics.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training[Multimedia] - 捕获照片(Lesson 1 - 简单的拍照动作)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/12/18/android-training-multimedia-capturing-photos-lesson-1/"/>
    <updated>2012-12-18T22:21:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/12/18/android-training-multimedia-capturing-photos-lesson-1</id>
    <content type="html"><![CDATA[<p>在多媒体流行之前，世界是沉闷(dismal)并且特色稀少(featureless)的。还记得Gopher? (<em>Gopher是计算机上的一个工具软件，是Internet提供的一种由菜单式驱动的信息查询工具，采用客户机/服务器模式</em>)。因为你的app将要成为你的用户的生活的一部分，请赋予你的app能够把用户生活装进去的功能。使用内置的Camera，你的程序可以使得用户扩展（augment）他们所看的事物，生成唯一的头像，查找角落的人偶（zombies）,或者仅仅是分享他们的经验。</p>

<p>这一章节，会教你如何简单的使用已经存在的Camera程序。在后面的课程中，你会更加深入的（ dive deeper ）学习如何直接控制Camera的硬件。</p>

<p><strong>试试下面的例子程序</strong>
<a href="http://developer.android.com/shareables/training/PhotoIntentActivity.zip">PhotoIntentActivity.zip</a></p>

<hr />

<p>假设你想通过你的客户端程序实现一个聚合全球天气的地图，上面会有各地的当前天气图片。那么集合图片只是你程序的一部分。你想要最简单的动作来获取图片，而不是重新发明（reinvent）一个camera。幸运的是，大多数Android设备都已经至少安装了一款相机程序。在这节课中，你会学习，如何拍照。</p>

<!-- more -->


<h2>Request Camera Permission(请求使用相机权限)</h2>

<p>在写程序之前，需要在你的程序的manifest文件中添加下面的权限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;manifest</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;uses-feature</span> <span class="na">android:name=</span><span class="s">&quot;android.hardware.camera&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="err">&lt;</span>/manifest ... &gt;
</span></code></pre></td></tr></table></div></figure>


<p>如果你的程序并不需要一定有Camera，可以添加android:required=&#8221;false&#8221; 的tag属性。这样的话，Google Play 也会允许没有camera的设备下载这个程序。当然你有必要在使用Camera之前通过hasSystemFeature(PackageManager.FEATURE_CAMERA)方法来检查设备上是否有Camera。如果没有，你应该关闭你的Camera相关的功能！(<em>这个几乎没有人去做检查，因为目前所有的智能手机都会有相机</em>)</p>

<h2>Take a Photo with the Camera App(使用相机应用程序进行拍照]</h2>

<p>Android中的方法是：启动一个Intent来完成你想要的动作。这个步骤包含三部分： Intent 本身，启动的外部 Activity, 与一些处理返回照片的代码。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">dispatchTakePictureIntent</span><span class="o">(</span><span class="kt">int</span> <span class="n">actionCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">takePictureIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">ACTION_IMAGE_CAPTURE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">takePictureIntent</span><span class="o">,</span> <span class="n">actionCode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然在发出Intent之前，你需要检查是否有app会来handle这个intent，否则会引起启动失败：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isIntentAvailable</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">String</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">PackageManager</span> <span class="n">packageManager</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getPackageManager</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ResolveInfo</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">packageManager</span><span class="o">.</span><span class="na">queryIntentActivities</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">PackageManager</span><span class="o">.</span><span class="na">MATCH_DEFAULT_ONLY</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>View the Photo(查看照片)</h2>

<p>Android的Camera程序会把拍好的照片编码为bitmap，使用extra value的方式添加到返回的 Intent 当中， 对应的key为data。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleSmallCameraPhoto</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Bundle</span> <span class="n">extras</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getExtras</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mImageBitmap</span> <span class="o">=</span> <span class="o">(</span><span class="n">Bitmap</span><span class="o">)</span> <span class="n">extras</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">mImageBitmap</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> 这仅仅是处理一张很少的缩略图而已，如果是大的全图，需要做更多的事情来避免ANR。</p>

<h2>Save the Photo(保存照片)</h2>

<p>如果你提供一个file对象给Android的Camera程序，它会保存这张全图到给定的路径下。你必须提供存储的卷名，文件夹名与文件名。对于2.2以上的系统，如下操作即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">storageDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span>
</span><span class='line'>    <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStoragePublicDirectory</span><span class="o">(</span>
</span><span class='line'>        <span class="n">Environment</span><span class="o">.</span><span class="na">DIRECTORY_PICTURES</span>
</span><span class='line'>    <span class="o">),</span>
</span><span class='line'>    <span class="n">getAlbumName</span><span class="o">()</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Set the file name(设置文件名)</h2>

<p>正如上面描述的那样，文件的路径会有设备的系统环境决定。你自己需要做的只是定义个不会引起文件名冲突的命名scheme。下面会演示一种解决方案：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">File</span> <span class="nf">createImageFile</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Create an image file name</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">timeStamp</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyyMMdd_HHmmss&quot;</span><span class="o">).</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">imageFileName</span> <span class="o">=</span> <span class="n">JPEG_FILE_PREFIX</span> <span class="o">+</span> <span class="n">timeStamp</span> <span class="o">+</span> <span class="s">&quot;_&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">image</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span>
</span><span class='line'>        <span class="n">imageFileName</span><span class="o">,</span>
</span><span class='line'>        <span class="n">JPEG_FILE_SUFFIX</span><span class="o">,</span>
</span><span class='line'>        <span class="n">getAlbumDir</span><span class="o">()</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>    <span class="n">mCurrentPhotoPath</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Append the file name onto the Intent(把文件名添加到网络上)</h2>

<p>Once you have a place to save your image, pass that location to the camera application via the Intent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="n">createImageFile</span><span class="o">();</span>
</span><span class='line'><span class="n">takePictureIntent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">EXTRA_OUTPUT</span><span class="o">,</span> <span class="n">Uri</span><span class="o">.</span><span class="na">fromFile</span><span class="o">(</span><span class="n">f</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Add the Photo to a Gallery(添加照片到相册)</h2>

<p>对于大多数人来说，最简单查看你的照片的方式是通过系统的Media Provider。下面会演示如何触发系统的Media Scanner来添加你的照片到Media Provider的DB中，这样使得相册程序与其他程序能够读取到那些图片。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">galleryAddPic</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">mediaScanIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_MEDIA_SCANNER_SCAN_FILE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">mCurrentPhotoPath</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Uri</span> <span class="n">contentUri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">fromFile</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mediaScanIntent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">contentUri</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">sendBroadcast</span><span class="o">(</span><span class="n">mediaScanIntent</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Decode a Scaled Image(解码缩放图片)</h2>

<p>在有限的内存下，管理全尺寸的图片会很麻烦。下面会介绍如何缩放图片来适应程序的显示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setPic</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Get the dimensions of the View</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">targetW</span> <span class="o">=</span> <span class="n">mImageView</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">targetH</span> <span class="o">=</span> <span class="n">mImageView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get the dimensions of the bitmap</span>
</span><span class='line'>    <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">bmOptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span><span class="o">();</span>
</span><span class='line'>    <span class="n">bmOptions</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">mCurrentPhotoPath</span><span class="o">,</span> <span class="n">bmOptions</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">photoW</span> <span class="o">=</span> <span class="n">bmOptions</span><span class="o">.</span><span class="na">outWidth</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">photoH</span> <span class="o">=</span> <span class="n">bmOptions</span><span class="o">.</span><span class="na">outHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Determine how much to scale down the image</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">scaleFactor</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">photoW</span><span class="o">/</span><span class="n">targetW</span><span class="o">,</span> <span class="n">photoH</span><span class="o">/</span><span class="n">targetH</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Decode the image file into a Bitmap sized to fill the View</span>
</span><span class='line'>    <span class="n">bmOptions</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">bmOptions</span><span class="o">.</span><span class="na">inSampleSize</span> <span class="o">=</span> <span class="n">scaleFactor</span><span class="o">;</span>
</span><span class='line'>    <span class="n">bmOptions</span><span class="o">.</span><span class="na">inPurgeable</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">mCurrentPhotoPath</span><span class="o">,</span> <span class="n">bmOptions</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/camera/photobasics.html">http://developer.android.com/training/camera/photobasics.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.com">http://kesenhoo.github.com</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Training 05 - 与其他Apps进行交互(Lesson 3 - 允许其他app启动你的activity)]]></title>
    <link href="http://kesenhoo.github.com/blog/2012/12/04/android-training-05-interacting-with-other-apps-lesson-3/"/>
    <updated>2012-12-04T22:12:00+08:00</updated>
    <id>http://kesenhoo.github.com/blog/2012/12/04/android-training-05-interacting-with-other-apps-lesson-3</id>
    <content type="html"><![CDATA[<p>前两节课主要讲了从你的app启动另外一个app。但是如果你的app可以响应前面发出的action，那么你的app应该做好响应的准备。例如，如果你创建了一个social app，它可以分享messages 或者 photos 给好友，那么最好你的app能够接收ACTION_SEND 的intent,这样当用户在其他app触发分享功能的时候，你的app能够出现在待选对话框。</p>

<p>为了使得其他的app能够启动你的activity，你需要在你的manifest文件的<activity> 标签下添加<intent-filter> 的属性。</p>

<p>当你的app被安装到设备上时，系统可以识别你的intent filter并把这些信息记录下来。当其他app通过执行 startActivity() 或者 startActivityForResult()方法，并使用implicit intent时，系统可以自动查找出那些可以响应这个intent的activity。</p>

<!-- more -->


<h2>Add an Intent Filter(添加Intent Filter)</h2>

<p>为了尽可能确切的定义你的activity能够handle哪些intent，每一个intent filter都应该尽可能详尽的定义好action与data。</p>

<p>主要有下面三个方面需要定义：</p>

<ul>
<li><strong>Action</strong>:一个想要执行的动作的名称。通常是系统已经定义好的值，例如 ACTION_SEND 或者 ACTION_VIEW。</li>
<li><strong>Data</strong>:Intent附带数据的描述。可以使用一个或者多个属性，你可以只定义MIME type或者是只指定URI prefix，也可以只定义一个URI scheme，或者是他们综合使用。<strong>Note:</strong> 如果你不想handle Uri 类型的数据，那么你应该指定 android:mimeType 属性。例如 text/plain or image/jpeg.</li>
<li><strong>Category</strong>:提供一个附加的方法来标识这个activity能够handle的intent。通常与用户的手势或者是启动位置有关。系统有支持几种不同的categories,但是大多数都不怎么用的到。而且，所有的implicit intents都默认是 CATEGORY_DEFAULT 类型的。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;ShareActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.SEND&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;text/plain&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;image/*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个发送出来的intent只会包含一个action与type，但是handle这个intent的activity的 <intent-filter>是可以声明多个<action>, <category>与 <data> 的。</p>

<p>如果任何的两对action与data是互相矛盾的，你应该创建不同的intent fliter来指定特定的action与type。</p>

<p>例如，假设你的activity可以handle 文本与图片，无论是ACTION_SEND 还是 ACTION_SENDTO 的intent。在这种情况下，你必须为两个action定义两个不同的intent filter。因为ACTION_SENDTO intent 必须使用 Uri 类型来指定接收者使用 send 或 sendto 的地址。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;ShareActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- filter for sending text; accepts SENDTO action with sms URI schemes --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.SENDTO&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;sms&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;smsto&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- filter for sending text or images; accepts SEND action and text or image data --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.SEND&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;image/*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">&quot;text/plain&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong>为了接受implicit intents, 你必须在你的intent filter中包含 CATEGORY_DEFAULT 的category。
关于更多sending 与 receiving ACTION_SEND intents来执行social sharing行为的，请查看<a href="http://developer.android.com/training/sharing/receive.html">Receiving Content from Other Apps.</a>(下一章节内容)</p>

<h2>Handle the Intent in Your Activity [在你的Activity中Handle发送过来的Intent]</h2>

<p>为了决定采用哪个action，你可以读取Intent的内容。</p>

<p>你可以执行 getIntent() 来获取启动你的activity的那个intent。你可以在activity生命周期的任何时候去执行这个方法，当是你最好是在onCreate() 或者 onStart() 里面去执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>@Override
</span><span class='line'>protected void onCreate(Bundle savedInstanceState) {
</span><span class='line'>    super.onCreate(savedInstanceState);
</span><span class='line'>
</span><span class='line'>    setContentView(R.layout.main);
</span><span class='line'>
</span><span class='line'>    // Get the intent that started this activity
</span><span class='line'>    Intent intent = getIntent();
</span><span class='line'>    Uri data = intent.getData();
</span><span class='line'>
</span><span class='line'>    // Figure out what to do based on the intent type
</span><span class='line'>    if (intent.getType().indexOf(&quot;image/&quot;) != -1) {
</span><span class='line'>        // Handle intents with image data ...
</span><span class='line'>    } else if (intent.getType().equals(&quot;text/plain&quot;)) {
</span><span class='line'>        // Handle intents with text ...
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Return a Result(返回Result)</h2>

<p>如果你想返回一个result给启动你的那个activity，仅仅需要执行 setResult() ，通过指定一个result code与result intent。当你的的操作成功之后，用户需要返回到原来的activity，通过执行finish() 来关闭被叫起的activity。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">// Create intent to deliver some kind of result data</span>
</span><span class='line'><span class="n">Intent</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="s">&quot;com.example.RESULT_ACTION&quot;</span><span class="o">,</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;content://result_uri&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">setResult</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="n">finish</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>你必须总是指定一个result code。通常不是 RESULT_OK 就是 RESULT_CANCELED。你可以通过Intent 来添加需要返回的数据。</p>

<p><strong>Note:</strong>默认的result code是RESULT_CANCELED.因此，如果用户在没有完成操作之前点击了back key，那么之前的activity接受到的result code就是&#8221;canceled&#8221;。</p>

<p>如果你只是纯粹想要返回一个int来表示某些返回的result数据之一，你可以设置result code为任何大于0的数值。如果你返回的result只是一个int，那么连intent都可以不需要返回了，如下：</p>

<p>setResult(RESULT_COLOR_RED);
finish();
<strong>Note:</strong>我们没有必要在意你的activity是被用startActivity() 还是 startActivityForResult()方法所叫起的。系统会自动去判断改如何传递result。在不需要的result的case下，result会被自动忽略。</p>

<hr />

<p><strong>学习自：<a href="http://developer.android.com/training/basics/intents/filters.html">http://developer.android.com/training/basics/intents/filters.html</a>，请多指教，谢谢！</strong><br/>
<strong>转载请注明出自<a href="http://kesenhoo.github.io">http://kesenhoo.github.io</a>，谢谢配合！</strong></p>
]]></content>
  </entry>
  
</feed>
